<?xml version="1.0" encoding="UTF-8"?>
<project default="archive" basedir="." name="business">
    <description>This build file will build all the business modules</description>
    <!-- ===================================================================== -->
    <!-- import files -->
    <!-- ===================================================================== -->
	<property file="build.properties"/>
    <!-- ===================================================================== -->
    <!-- properties definitions -->
    <!-- ===================================================================== -->
    <!-- LOCAL PROPERTIES -->
	
	<!-- find bugs property-->
    <property name="project.name" value="${project.name}"/>
	
    <property name="home.dir" value="${migration.home.dir}"/>

    <property name="business.dir" value="${project.src.dir}"/>	
    <property name="project-bsla.dir" value="${business.dir}/project-bsla"/>	
	<property name="business.properties.dir" value="${project-bsla.dir}/config"/>
	<property name="business.lib.dir" value="${project-bsla.dir}/lib"/>
	<property name="jdbc.driver.lib.dir" value="${project-bsla.dir}/lib-jdbc"/>
    <property name="business.src-generated.dir" value="${src-generated.dir}"/>
	<property name="business.src-generated-web.dir" value="${src-generated-web.dir}"/>
	
    <property name="business.src-architecture.dir" value="${project-bsla.dir}/src-architecture"/>
	<property name="business.test.dir" value="${project-bsla.dir}/test"/>	
    <property name="business.dist.dir" value="${project-bsla.dir}/dist"/>	
	<property name="archive.name" value="${project.name}"/>
	<property name="business.classes.dir" value="${project-bsla.dir}/classes"/>
	
	<property name="webapp.structure.dir" value="${project-bsla.dir}/dist/working"/>
	<property name="webapp.structure.project.dir" value="${webapp.structure.dir}/${project.name}"/>

	<property name="webapp.structure.WEBINF.dir" value="${webapp.structure.project.dir}/WEB-INF"/>
	<property name="webapp.structure.lib.dir" value="${webapp.structure.WEBINF.dir}/lib"/>
	<property name="webapp.structure.classes.dir" value="${webapp.structure.WEBINF.dir}/classes"/>
	<property name="webapp.structure.tld.dir" value="${webapp.structure.WEBINF.dir}/tld"/>

	<property name="dependency.structure.default" value="${project-bsla.dir}/src-architecture-web/default"/>
	
	<!--
    <property name="test.src.business.dir" value="${business.home.dir}/test"/>
    <property name="generated.src.business.dir" value="${business.home.dir}/generated"/>
    <property name="reports.dir" value="${common.reports.dir}"/>
    <property name="dist.dir" value="${common.dist.dir}"/>
    <property name="lib.dir" value="${common.lib.dir}"/>
    <property name="doc.dir" value="${common.doc.dir}/migration"/>
    <property name="config.basedir" value="${common.config.dir}/migration"/>
    <property name="config.standalone.dir" value="${config.basedir}/standalone"/>
    <property name="config.server.dir" value="${config.basedir}/server"/>
     set local properties for the jar component -->
	<!--<property name="archive.name" value="${package.migration.archive.basename}"/>-->
	
	<!-- ===================================================================== -->
    <!-- classpath definitions -->
    <!-- ===================================================================== -->

	<path id="compile.classpath">
        <fileset dir="${business.lib.dir}">
            <include name="commons-beanutils-1.7.jar"/>
        	<include name="commons-beanutils-bean-collections-1.7.jar"/>
            <include name="commons-beanutils-core-1.7.jar"/>
            <include name="commons-collections-3.1.jar"/>
        	<include name="commons-dbcp-1.2.1.jar"/>
            <include name="commons-lang-2.0.jar"/>
            <include name="commons-logging-1.0.3.jar"/>
            <include name="commons-logging-api-1.0.3.jar"/>
        	<include name="mail.jar"/>
        	<!--<include name="struts.jar"/>-->
        	<include name="servlet-api.jar"/>
        	<include name="servlet-default.jar"/>
            <include name="spring-full-1.2.5.jar"/>
            <include name="log4j-1.2.12.jar"/>
            <include name="junit-3.8.1.jar"/>
        </fileset>   
    </path>	

	<!-- ===================================================================== -->
    <!-- specific macros definition -->
    <!-- ===================================================================== -->
	<macrodef name="title">
		<attribute name="title"/>
		<attribute name="projectname"/>
		<attribute name="projectdir"/>
		<sequential>
			<echo>************************************************************************</echo>
			<echo>*</echo>
			<echo>*                                  @{title}</echo>
			<echo>*</echo>
			<echo>*                  Executing in project ${ant.project.name}</echo>
			<echo>*                  for project @{projectname}</echo>
			<echo>* </echo>
			<echo>* </echo>
			<echo>************************************************************************</echo>
		</sequential>
	</macrodef>

    <macrodef name="macro_compile">
        <attribute name="debug"/>
        <attribute name="optimize"/>
        <sequential>
            <javac debug="@{debug}" deprecation="false" destdir="${business.classes.dir}" optimize="@{optimize}" nowarn="false">
                <classpath refid="compile.classpath"/>
                <src path="${business.src-generated.dir}"/>
                <src path="${business.src-architecture.dir}"/>
            	<!--<src path="${business.properties.dir}"/>-->
                <include name="**/*.java"/>
            </javac>
        </sequential>
    </macrodef>	
    	
    <macrodef name="macro_copy_resource">
        <attribute name="todir"/>
        <attribute name="filesetDir"/>
        <sequential>
            <copy todir="@{todir}">
                <fileset dir="@{filesetDir}">
                    <include name="**/*.xml"/>
                    <include name="**/*.properties"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>
	
    <macrodef name="macro_archive">
        <attribute name="compress"/>
        <attribute name="destdir"/>
        <attribute name="destfile"/>
    	<attribute name="classesdir"/>
        <sequential>
            <jar compress="@{compress}" destfile="@{destdir}/@{destfile}">
                <fileset dir="@{classesdir}">
                    <!--<patternset refid="dest.exclude"/>-->
                    <include name="**/*.*"/>
                </fileset>
            </jar>
        </sequential>
    </macrodef>
	
    <macrodef name="macro_create_webapp_structure">
    	<sequential>
	        <delete failonerror="false" includeemptydirs="true">
	            <fileset dir="${webapp.structure.project.dir}"/>
	        </delete>
	    	<mkdir dir="${webapp.structure.project.dir}"/>
	    	<mkdir dir="${webapp.structure.WEBINF.dir}"/>
    		<mkdir dir="${webapp.structure.lib.dir}"/>
    		<mkdir dir="${webapp.structure.classes.dir}"/>
    		<mkdir dir="${webapp.structure.tld.dir}"/>
    	</sequential>
    </macrodef>
	
    <macrodef name="macro_copy_dependency">
    	<attribute name="dependency.structure"/>
    	<sequential>
    		<copy todir="${webapp.structure.project.dir}">
                <fileset dir="@{dependency.structure}">
                </fileset>    			
    	    </copy>
    		<!-- to redo more generic -->
            <copy todir="${webapp.structure.lib.dir}">
                <fileset dir="${business.lib.dir}">
                    <include name="*.jar"/>
                </fileset>
            </copy>    	
            <copy todir="${webapp.structure.lib.dir}">
                <fileset dir="${jdbc.driver.lib.dir}">
                    <include name="*.jar"/>
                </fileset>
            </copy>   
    	</sequential>
    </macrodef>
    		
    <macrodef name="macro_copy_generation">
        <attribute name="generation.frontEnd.structure"/>
    	<sequential>
    		<copy todir="${webapp.structure.project.dir}" overwrite="true">
                <fileset dir="@{generation.frontEnd.structure}">
                </fileset>    			
    	    </copy>  
    		<copy todir="${webapp.structure.lib.dir}" overwrite="true">
                <fileset dir="${business.dist.dir}">
                	<include name="${archive.name}.jar"/>
                </fileset>    			
    	    </copy>    		
     	</sequential>
    </macrodef>    	
	
    <macrodef name="macro_war">
    	<sequential>
    		<war destfile="${business.dist.dir}/${project.name}.war" webxml="${webapp.structure.WEBINF.dir}/web.xml">
    		    <lib dir="${webapp.structure.lib.dir}"/>
    		    <classes dir="${webapp.structure.classes.dir}"/>
    		    <fileset dir="${webapp.structure.project.dir}"/>
    		</war>  		
     	</sequential>
    </macrodef> 	
    <!--
      If the scope is local, you do not have to specify the second attribute (it is not used).
      Otherwise you have to specify the target server
    -->

    <!-- ===================================================================== -->
    <!-- target definitions -->
    <!-- ===================================================================== -->
    <!-- target init -->
    <target name="init">
        <macro_setEnvironment config="${config}"/>
    </target>
    
	<!-- target clean -->
    <target name="clean">
        <title title="TASK clean" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Clean the business project</description>
        <delete failonerror="false" file="${business.dist.dir}/${archive.name}.jar"/>
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${business.classes.dir}"/>
        </delete>
        <delete failonerror="false" dir="${reports.dir}"/>
    </target>

    <!-- target prepare -->
    <target name="prepare">
        <title title="TASK prepare" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Creates the directories necessary for building the business</description>
        <mkdir dir="${business.classes.dir}"/>
        <mkdir dir="${business.dist.dir}"/>
    </target>

    <!-- target compile -->
    <target name="compile" depends="prepare">
        <title title="TASK compile" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Compile the migration project</description>
        <macro_compile debug="true" optimize="false"/>
    </target>
	
    <!-- target archive -->
    <target name="archive" depends="clean,compile,resource">
        <title title="TASK archive" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Create an archive containing all the classes of the ${project.name} project</description>
        <macro_archive compress="true" destdir="${business.dist.dir}" destfile="${archive.name}.jar" classesdir="${business.classes.dir}"/>
    </target>
    
	<!-- target resource -->
    <target name="resource">
        <title title="TASK resource" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Copy all the properties and xml files to the working directory (classes.dir).</description>
    	<macro_copy_resource todir="${business.classes.dir}" filesetDir="${business.src-generated.dir}"/>
    	<macro_copy_resource todir="${business.classes.dir}" filesetDir="${business.src-architecture.dir}"/>
    </target>

	
	<!-- target war -->
    <target name="war" depends="archive">
        <title title="TASK war" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>release the package as a web application</description>
    	<!-- 
    		make a working dir
    		make the war structure
    		copy the files created or depend to the correct place
    		package (manifest, web.xml) the entire application.
    	-->
    	<macro_create_webapp_structure/>
    	<macro_copy_dependency dependency.structure="${dependency.structure.default}"/>
    	<macro_copy_generation generation.frontEnd.structure="${business.src-generated-web.dir}"/>
		<macro_war/>

    </target>

	<!-- target testsuite -->
    <target name="build" depends="archive"/>
		
</project>
