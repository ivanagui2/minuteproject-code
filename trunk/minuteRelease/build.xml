<?xml version="1.0" encoding="UTF-8"?>
<project default="release" basedir="." name="release">
    <description>This build file will build all the minuteKernel modules</description>
    <!-- ===================================================================== -->
    <!-- import files -->
    <!-- ===================================================================== -->
	<property file="build.properties"/>
    <!-- ===================================================================== -->
    <!-- properties definitions -->
    <!-- ===================================================================== -->
    <!-- LOCAL PROPERTIES 	-->
    <property name="project.name" value="minuteProject"/>
	<property name="dburl" value="jdbc:hsqldb:hsql://localhost:9001/${db.name}"/>
	
	<target name="prepare-structure">
	 <delete dir="${release.dir}" />
	 <delete file="${release.dir}.zip" />	
	 <mkdir dir="${application.dir}"/>
	 <mkdir dir="${application.lib.dir}"/>
	 <mkdir dir="${config.dir}"/>	
	 <!--<mkdir dir="${config.template.dir}"/>-->	
	 <mkdir dir="${template.dir}"/>	
	 <mkdir dir="${target.dir}"/>
	 <mkdir dir="${sample.dir}"/>
	</target>

	<target name="build-minuteFoundation">
	   <ant dir="${minute.foundation.dev.relpath}" target="distribute" >
	   	 <property name="project.name" value="${minuteFoundation}"></property>
		 <property name="distribute.dir" value="${release.del.relpath}/${application.dir}/lib"></property>
	   </ant>	
		<!---->
	   <ant dir="${minute.foundation.dev.relpath}" target="distribute" >
	   	 <property name="project.name" value="${minuteFoundation}"></property>
		 <property name="distribute.dir" value="${release.del.relpath}/${target.dir}/${fitnesse}"></property>
	   </ant>			
	</target>

	<target name="distribute-minuteFoundation">
	  <copy todir="${target.dir}/mp-foundation" overwrite="true">
	 	<fileset dir="${minute.foundation.dev.relpath}/dist">
	 		<include name="**/*.jar"/>
	 		<include name="**/*.zip"/>
	 	</fileset>
	  </copy>	  		
	  <copy todir="${application.dir}" overwrite="true">
	 	<fileset dir="${minute.foundation.dev.relpath}/dist">
	 		<include name="**/*.jar"/>
	 		<include name="**/*.zip"/>
	 	</fileset>
	  </copy>	  		
	</target>
	<target name="copy-install-maven-minuteFoundation">
		  <copy todir="${target.dir}/mp-foundation" overwrite="true">
		 	<fileset dir="${minute.foundation.dev.relpath}/script">
		 		<include name="*.*"/>
		 	</fileset>
		  </copy>		
	</target>
	
	<target name="release-minuteFoundation" depends="build-minuteFoundation, copy-install-maven-minuteFoundation, distribute-minuteFoundation"></target>
	
	<target name="build-architecture-bsla">
		  <ant dir="${architecture.bsla.dev.relpath}" target="distribute" >
		  	<property name="project.name" value="${bsla}"></property>
		  	<property name="distribute.dir" value="../../${release.del.relpath}/${target.dir}/${bsla}"></property>
		  </ant>		
	</target>
	<target name="copy-install-maven">
		  <copy todir="${target.dir}/${bsla}" overwrite="true">
		 	<fileset dir="${architecture.bsla.dev.relpath}/script">
		 		<include name="*.*"/>
		 	</fileset>
		  </copy>		
	</target>
	<target name="copy-architecture-bsla-dependencies">
	  <copy todir="${target.dir}/${bsla}/${dependencies.lib.dir}" overwrite="true">
	 	<fileset dir="${architecture.bsla.dev.relpath}/lib">
	 		<include name="**/README.txt"/>
	 	</fileset>
	  </copy>			
	</target>
	
	<target name="release-architecture-bsla" depends="build-architecture-bsla,copy-install-maven,copy-architecture-bsla-dependencies"></target>

	<target name="build-architecture-adf">
		  <ant dir="${architecture.adf.dev.relpath}" target="distribute" >
		  	<property name="project.name" value="${adf}"></property>
		  	<property name="distribute.dir" value="../../${release.del.relpath}/${target.dir}/${adf}"></property>
		  </ant>		
	</target>
	
	<target name="release-architecture-adf" depends="build-architecture-adf"></target>

	<target name="build-architecture-openxava">
		  <ant dir="${architecture.openxava.dev.relpath}" target="distribute" >
		  	<property name="project.name" value="${openxava}"></property>
		  	<property name="distribute.dir" value="../../${release.del.relpath}/${target.dir}/${openxava}"></property>
		  </ant>		
	</target>
	
	<target name="release-architecture-openxava" depends="build-architecture-openxava"></target>

	<target name="build-architecture-fitnesse">
	  <!--<ant dir="${architecture.dev.relpath}" antfile="build-architecture-package.xml" target="distribute" >
	  	<property name="src.dir" value="src-architecture-mp-fitnesse"></property>
	  	<property name="project.name" value="${fitnesse}"></property>
	  	<property name="distribute.dir" value="../${release.del.relpath}/${target.dir}/${fitnesse}"></property>	  	
	  </ant>-->
		  <ant dir="${architecture.fitnesse.dev.relpath}" target="distribute" >
		  	<property name="project.name" value="${fitnesse}"></property>
		  	<property name="distribute.dir" value="../../${release.del.relpath}/${target.dir}/${fitnesse}"></property>
		  </ant>
	</target>
	<target name="copy-architecture-fitnesse-dependencies">
		  <copy todir="${target.dir}/${fitnesse}/${dependencies.lib.dir}" overwrite="true">
		 	<fileset dir="${architecture.fitnesse.dev.relpath}/lib">
		 		<include name="**/*.jar"/>
		 	</fileset>
		  	</copy>
	</target>
	<target name="copy-install-maven-fitnesse">
		  <copy todir="${target.dir}/${fitnesse}" overwrite="true">
		 	<fileset dir="${architecture.fitnesse.dev.relpath}/script">
		 		<include name="*.*"/>
		 	</fileset>
		  </copy>		
	</target>
	<target name="release-architecture-fitnesse" 
		depends="build-architecture-fitnesse,copy-install-maven-fitnesse,copy-architecture-fitnesse-dependencies"></target>
	
	<target name="copy-kernel-dependencies">
	  <copy todir="${application.lib.dir}" overwrite="true">
	 	<fileset dir="${kernel.dev.relpath}/lib">
	 		<include name="**/*.jar"/>
	 	</fileset>
	  </copy>	  
	  <copy todir="${application.lib.dir}" overwrite="true">
	 	<fileset dir="${kernel.dev.relpath}/application/java/lib">
	 		<include name="**/*.jar"/>
	 	</fileset>
	  </copy>	  		
	</target>
	
	<target name="distribute-kernel">
	  <copy todir="${application.dir}" overwrite="true">
	 	<fileset dir="${kernel.dev.relpath}/application/java/lib">
	 		<include name="**/*.jar"/>
	 		<include name="**/*.zip"/>
	 	</fileset>
	  </copy>	  		
	</target>	
	
	<target name="build-kernel-dependencies">
	  <ant dir="${kernel.dev.relpath}" target="archive" >
	  	<property name="application.dir" value="./application"></property>
	  	<property name="project.name" value="minuteKernel"></property>
	  </ant>
	</target>	
	
	<target name="release-kernel" depends="build-kernel-dependencies, distribute-kernel, copy-kernel-dependencies" >
	</target>

	
	<target name="copy-console-dependencies"> 
	  <copy todir="${application.lib.dir}" overwrite="true">
	 	<fileset dir="${console.dev.relpath}/lib">
	 		<include name="miglayout-3.7.3.1.jar"/>
	 	</fileset>
	  </copy>	  		
	</target>
	
	<target name="distribute-console">
	  <copy todir="${application.lib.dir}" overwrite="true">
	 	<fileset dir="${console.dev.relpath}/dist">
	 		<include name="**/*.jar"/>
	 		<include name="**/*.zip"/>
	 	</fileset>
	  </copy>	  		
	</target>	
	
	<target name="build-console-dependencies">
	  <ant dir="${console.dev.relpath}" target="archive" >
	  	<property name="application.dir" value="./application"></property>
	  	<property name="project.name" value="minuteConsole"></property>
	  </ant>
	</target>
	  		
	<target name="release-console" depends="build-console-dependencies, distribute-console, copy-console-dependencies" >
	</target>

	<target name="test-console-locally">
	  <copy todir="${catalog.dev.relpath}" overwrite="true">
	 	<fileset dir="${demo.config.dev.relpath}">
	 		<include name="mp-template-config-*.xml"/>	 		
	 	</fileset>
		  </copy>	  	
	 </target>
	  	
	<target name="copy-template-dependencies">
	  <filter token="templateRoot" value="${templateRoot}"/>
	  <copy todir="${catalog.dir}" overwrite="true" filtering="true">
	 	<fileset dir="${catalog.dev.relpath}">
	 		<include name="**/*-catalog.xml"/>	 		
	 	</fileset>
	  </copy>
	  <copy todir="${catalog.dir}" overwrite="true" filtering="true">
	 	<fileset dir="${demo.config.dev.relpath}">
	 		<include name="mp-template-config*.*"/>
	 	</fileset>	  	
	  </copy>		
	  <copy todir="${template.framework.dir}" overwrite="true" >
	 	<fileset dir="${template2.dev.relpath.framework}">
	 		<include name="**/*.vm"/>		
	 	</fileset>
	  </copy>		
	  <copy todir="${template.utils.dir}" overwrite="true" >
	 	<fileset dir="${template2.dev.relpath.utils}">
	 		<include name="**/*.vm"/>		
	 	</fileset>
	  </copy>		
	  <copy todir="${template.soa.dir}" overwrite="true" >
	 	<fileset dir="${template2.dev.relpath.soa}">
	 		<include name="**/*.vm"/>		
	 	</fileset>
	  </copy>		
	  <copy todir="${template.tutorial.dir}" overwrite="true" >
	 	<fileset dir="${template2.dev.relpath.tutorial}">
	 		<include name="**/*.vm"/>		
	 	</fileset>
	  </copy>		
	</target>
	<target name="release-template" depends="copy-template-dependencies"></target>

	<target name="copy-sample-dependencies">
	  <copy todir="${sample.dir}" overwrite="true">
	 	<fileset dir="${sample.dev.relpath}">
	 		<include name="**/*.*"/>
	 	</fileset>
	  </copy>
	</target>
	<target name="release-sample" depends="copy-sample-dependencies" >
	</target>

	<target name="copy-demo-dependencies">
	  <copy todir="${demo.dir}" overwrite="true">
	 	<fileset dir="${demo.dev.relpath}/demo">
	 		<include name="**/*.*"/>
	 	</fileset>
	  </copy>
	  <chmod dir="${demo.dir}" perm="777" includes="**/*.sh"/>
	</target>
	
	<target name="release-demo" depends="copy-demo-dependencies" >
	</target>

	<target name="copy-release-installation">
	  <copy todir="${release.dir}" overwrite="true">
	 	<fileset dir="${installation.dir}">
	 		<include name="**/README.txt"/>
	 	</fileset>
	  </copy>
	  <copy todir="${release.dir}/mywork/config" overwrite="true">
	 	<fileset dir="${demo.config.dev.relpath}">
	 		<include name="mp-template-config*"/>
	 		<include name="model-generation*"/>
	 		<include name="lcp*"/>
	 		<include name="mp-config-sample*"/>
	 	</fileset>
	  </copy>
	  <copy todir="${release.dir}/bin" overwrite="true">
	 	<fileset dir="${installation.dir}/bin">
	 		<include name="*.*"/>
	 	</fileset>
	  </copy>	
	   <chmod dir="${release.dir}/mywork/config" perm="777" includes="**/*.sh"/>	
	   <chmod dir="${release.dir}/bin" perm="777" includes="**/*.sh"/>	
	</target>
	
	<target name="release-installation" depends="copy-release-installation" >
	</target>
		
	<target name="release-all" depends="prepare-structure">
	 <antcall target="release-minuteFoundation"></antcall>
	 <antcall target="release-template"></antcall>
	 <antcall target="release-kernel"></antcall>
	 <antcall target="release-console"></antcall>
	 <antcall target="release-architecture-bsla"></antcall>
	 <antcall target="release-architecture-openxava"></antcall>
	 <antcall target="release-architecture-adf"></antcall>
     <antcall target="release-architecture-fitnesse"></antcall>	
	 <antcall target="release-sample"></antcall>	
	 <antcall target="release-demo"></antcall>		
	 <antcall target="release-installation"></antcall>		
	</target>
	
	<target name="release" depends="release-all">
	  <zip destfile="${release.dir}.zip" basedir="${release.dir}"></zip>
	</target>
	
	<!--
	    
	-->
	<!-- ===================================================================== -->
    <!-- classpath definitions -->
    <!-- ===================================================================== -->
    <path id="hsqldb.library.path">
        <fileset dir="${sample.dir}/hsql">
            <include name="*.jar"/>
        </fileset>   	
    </path>
	
    <path id="mp.library.path">
    	<pathelement location="${demo.dir}/config"/>    	
        <fileset dir="${application.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>   	
  	    	
    </path>

	<!-- ===================================================================== -->
    <!-- ant task definitions -->
    <!-- ===================================================================== -->	
	<target name="hsqldb.start" description="Starts local HSQLDB server" >  
	 <echo message="Starting HSQLDB" />  
	  <java fork="true" dir="${sample.dir}" classname="org.hsqldb.Server" spawn="true">  
	   <classpath>  
	    <path refid="hsqldb.library.path" />  
	   </classpath>  
	  	<arg line="-database.0 file:./hsql/${db.name} -dbname.0 ${db.name} -port 9001"/>	
	  </java>  
	</target> 
	
    <target name="hsqldb.stop" description="Stops HSQLDB server">
      <java classname="org.hsqldb.util.ShutdownServer">
       <classpath refid="hsqldb.library.path"/>
       <arg line="-url ${dburl}"/>
      </java>
    </target>

	<target name="mp-bsla-hibernate-generation" description="MP Hibernate" >  
	 <echo message="MP Hibernate" />  
	  <java fork="true" dir="${demo.dir}/config" classname="net.sf.minuteProject.application.ModelGenerator" >  
	   <classpath>  
	    <path refid="mp.library.path" />  
	   </classpath>  
	  	<arg line="mp-config-hibernate.xml"/>	
	  </java>  
	</target>
	
	<target name="mp-bsla-jpa-generation" description="MP JPA">  
	 <echo message="MP JPA" />  
	  <java fork="true" dir="${demo.dir}/config" classname="net.sf.minuteProject.application.ModelGenerator" >  
	   <classpath>  
	    <path refid="mp.library.path" />  
	   </classpath>  
	  	<arg line="mp-config-jpa.xml"/>	
	  </java>  
	</target>
	
	<target name="mp-bsla-ibatis-generation" description="MP iBatis">  
	 <echo message="MP iBatis" />  
	  <java fork="true" dir="${demo.dir}/config" classname="net.sf.minuteProject.application.ModelGenerator" >  
	   <classpath>  
	    <path refid="mp.library.path" />  
	   </classpath>  
	  	<arg line="mp-config-ibatis.xml"/>	
	  </java>  
	</target>
	
	<target name="mp-fitnesse-generation" description="MP Fitnesse">  
	 <echo message="MP Fitness" />  
	  <java fork="true" dir="${demo.dir}/config" classname="net.sf.minuteProject.application.ModelViewGenerator" >  
	   <classpath>  
	    <path refid="mp.library.path" />  
	   </classpath>  
	  	<arg line="mp-config-fitnesse.xml"/>	
	  </java>  
	</target>
	
	<target name="generation-4-sample" >
	  <antcall target="hsqldb.start"/>
	  <antcall target="mp-bsla-hibernate-generation"/>
	  <antcall target="mp-bsla-jpa-generation"/>	 
	  <antcall target="mp-bsla-ibatis-generation"/>
	  <antcall target="mp-fitnesse-generation"/>			
	  <antcall target="hsqldb.stop"/>
	</target>
</project>
