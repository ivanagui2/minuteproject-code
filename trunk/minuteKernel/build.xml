<?xml version="1.0" encoding="UTF-8"?>
<project default="archive" basedir="." name="minuteKernel">
	<description>This build file will build all the minuteKernel modules</description>
	<!-- ===================================================================== -->
	<!-- import files -->
	<!-- ===================================================================== -->
	<property file="build.properties"/>
	<!-- ===================================================================== -->
	<!-- properties definitions -->
	<!-- ===================================================================== -->
	<!-- LOCAL PROPERTIES 	
    <property name="project.name" value="minuteProject"/>-->
	<property name="home.dir" value="."/>
	<property name="application.dir" value="${home.dir}/application"/>
	<property name="application.name" value="${project.name}"/>
	<property name="application.version" value="${project.version}"/>

	<property name="lib.dir" value="${home.dir}/lib"/>
	<property name="libc.dir" value="${home.dir}/libc"/>
	<property name="libextra.dir" value="${lib.dir}/extra"/>
	<property name="libmongo.dir" value="${lib.dir}/mongodb"/>
	<property name="libcmis.dir" value="${lib.dir}/cmis"/>
	<property name="src.dir" value="${home.dir}/src"/>
	<property name="config.dir" value="${home.dir}/config"/>
	<property name="src-template.dir" value="${home.dir}/src-template"/>
	<property name="src-patch.dir" value="${home.dir}/src-patch"/>
	<property name="src-plugin.dir" value="${home.dir}/src-plugin"/>
	<property name="test.dir" value="${home.dir}/test"/>
	<property name="dist.dir" value="${application.dir}/java/lib"/>
	<property name="archive.name" value="${application.name}-${application.version}.jar"/>
	<property name="archive.src.name" value="${application.name}-${application.version}-src.zip"/>
	<property name="classes.dir" value="${home.dir}/classes"/>
	<property name="testclasses.dir" value="${home.dir}/testclasses"/>
	<property name="reports.tests" value="${home.dir}/reports"/>
	<tstamp>
		<format property='build.time' pattern='yyyy-MM-dd HH:mm:ss'/>
	</tstamp>

	<!-- ===================================================================== -->
	<!-- classpath definitions -->
	<!-- ===================================================================== -->
	<path id="compile.classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${libextra.dir}">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${libmongo.dir}">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${libcmis.dir}">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${deplib.dir}">
			<include name="*.jar"/>
		</fileset>
	</path>
	<path id="compile.test.classpath">
		<fileset dir="${libc.dir}">
			<include name="*.jar"/>
		</fileset>
		<pathelement location="./config"/>
	</path>
	<path id="compiled.classes">
		<pathelement location="${classes.dir}"/>
	</path>
	<path id="compiled.test.classes">
		<pathelement location="${testclasses.dir}"/>
	</path>
	<!-- ===================================================================== -->
	<!-- specific macros definition -->
	<!-- ===================================================================== -->
	<macrodef name="macro_compile">
		<attribute name="debug"/>
		<attribute name="optimize"/>
		<sequential>
			<javac debug="@{debug}" deprecation="false" destdir="${classes.dir}" 
            	optimize="@{optimize}" nowarn="false">
				<classpath refid="compile.classpath"/>
				<src path="${src.dir}"/>
				<src path="${src-plugin.dir}"/>
				<src path="${src-patch.dir}"/>
				<include name="**/*.java"/>
			</javac>
		</sequential>
	</macrodef>
	
	<macrodef name="macro_compile_test">
		<attribute name="debug"/>
		<attribute name="optimize"/>
		<sequential>
			<mkdir dir="${testclasses.dir}"/>
			<javac debug="@{debug}" deprecation="false" destdir="${testclasses.dir}" 
            	optimize="@{optimize}" nowarn="false">
				<!--<classpath refid="compile.classpath"/>
				<classpath path="${class.dir}"></classpath>
				-->
		          <classpath>
		             <path refid="compile.classpath"/>
		             <path refid="compile.test.classpath"/>
		             <pathelement path="${classes.dir}"/>
		          </classpath>
				<src path="${test.dir}"/>
				<include name="**/*.java"/>
			</javac>
		</sequential>
	</macrodef>

	<macrodef name="macro_copy_resource">
		<attribute name="todir"/>
		<attribute name="filesetDir"/>
		<sequential>
			<copy todir="@{todir}">
				<fileset dir="@{filesetDir}">
					<include name="**/*.xml"/>
					<include name="**/*.properties"/>
				</fileset>
			</copy>
		</sequential>
	</macrodef>

	<macrodef name="macro_copy_template">
		<attribute name="todir"/>
		<attribute name="filesetDir"/>
		<sequential>
			<copy todir="@{todir}" overwrite="true">
				<fileset dir="@{filesetDir}">
					<include name="**/*.java" />
					<include name="**/*.groovy"/>
				</fileset>
				<filterset>
					<filter token='version' value='${project.version}'/>
					<filter token='build.time' value='${build.time}'/>
				</filterset>
			</copy>
		</sequential>
	</macrodef>

	<macrodef name="macro_copy_code">
		<attribute name="todir"/>
		<attribute name="filesetDir"/>
		<sequential>
			<mkdir dir="@{filesetDir}"/>
			<copy todir="@{todir}">
				<fileset dir="@{filesetDir}">
					<include name="**/*.java"/>
					<include name="**/*.groovy"/>
					<include name="**/*.xml"/>
					<include name="**/*.properties"/>
				</fileset>
			</copy>
		</sequential>
	</macrodef>
	
	<macrodef name="macro_copy_for_mvn">
		<attribute name="todir"/>
		<attribute name="fromdir"/>
		<sequential>
			<copy todir="@{todir}" overwrite="true">
				<fileset dir="@{fromdir}">
					<include name="**/*.*"/>
				</fileset>
			</copy>
		</sequential>
	</macrodef>

	<macrodef name="macro_archive">
		<attribute name="compress"/>
		<attribute name="destdir"/>
		<attribute name="destfile"/>
		<attribute name="classesdir"/>
		<sequential>
			<jar compress="@{compress}" destfile="@{destdir}/@{destfile}">
				<fileset dir="@{classesdir}">
					<include name="**/*.*"/>
				</fileset>
			</jar>
		</sequential>
	</macrodef>

	<macrodef name="title">
		<attribute name="title"/>
		<attribute name="projectname"/>
		<attribute name="projectdir"/>
		<sequential>
			<echo>***************************</echo>
			<echo>* task @{title}</echo>
			<echo>* on project @{projectname}</echo>
			<echo>***************************</echo>
		</sequential>
	</macrodef>

	<!-- ===================================================================== -->
	<!-- TEST definitions -->
	<!-- ===================================================================== -->

    <target name="test" depends="compile-test" description="Run JUnit test">
    	<mkdir dir="${reports.tests}" />
       <junit fork="yes" haltonerror="false" haltonfailure="false" printsummary="true">
          <formatter type="plain"/>
          <formatter type="xml"/>
          <batchtest fork="yes" todir="${reports.tests}">
               <fileset dir="test">
                 <include name="**/*Test.java"/>
                 <exclude name="**/TechnologyCatalogUtilsTest.java"/>
               </fileset>
          </batchtest>
          <classpath>
             <path refid="compile.classpath"/>
             <path refid="compile.test.classpath"/>
             <pathelement path="${classes.dir}"/>
             <pathelement path="${config.dir}"/>
             <pathelement path="${testclasses.dir}"/>
          </classpath>
       </junit>
    </target>

	<!-- ===================================================================== -->
	<!-- target definitions -->
	<!-- ===================================================================== -->

	<target name="compileGroovy" >
		<taskdef name="groovyc"
		  classname="org.codehaus.groovy.ant.Groovyc"
		  classpath="${lib.dir}/groovy-all-1.8.0.jar"/>
		<mkdir dir="${classes.dir}"/>
		<groovyc destdir="${classes.dir}">
			<src path="${src.dir}"/>
			<src path="${src-plugin.dir}"/>
			<src path="${src-patch.dir}"/>
			<classpath refid="compile.classpath"/>
			<classpath>
				<pathelement path="${classes.dir}"/>
			</classpath>
			<javac debug="on" deprecation="true"/>
		</groovyc>
	</target>

	<!-- target clean -->
	<target name="clean">
		<title title="clean" projectname="${project.name}" projectdir="${home.dir}"/>
		<description>Clean the business project</description>
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${classes.dir}"/>
			<fileset dir="${dist.dir}"/>
		</delete>
		<delete failonerror="false" dir="${reports.dir}"/>
	</target>

	<!-- target test 
	<target name="test">
		<junit printsummary="yes" haltonfailure="yes">
			<classpath refid="junit.class.path" />
			<classpath>
			    <pathelement location="${build.test.dir}"/>
			  </classpath>
			<formatter type="xml" />
			<batchtest todir="${test.report.dir}">
				<fileset dir="${test.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	-->
	<!-- target prepare -->
	<target name="prepare">
		<title title="TASK prepare" projectname="${project.name}" projectdir="${home.dir}"/>
		<description>Creates the directories necessary for building the business</description>
		<mkdir dir="${classes.dir}"/>
		<mkdir dir="${dist.dir}"/>
	</target>

	<!-- target compile -->
	<target name="compile" depends="prepare">
		<title title="TASK compile" projectname="${project.name}" projectdir="${home.dir}"/>
		<description>Compile ${project.name} project</description>
		<macro_compile debug="true" optimize="false"/>
	</target>
	
	<!-- target compile test -->
	<target name="compile-test" depends="compileGroovy">
		<title title="TASK compile test" projectname="${project.name}" projectdir="${home.dir}"/>
		<description>Compile test of ${project.name} project</description>
		<macro_compile_test debug="true" optimize="false"/>
	</target>

	<!-- target template -->
	<target name="template">
		<title title="TASK template" projectname="${project.name}" projectdir="${home.dir}"/>
		<description>Copy and apply token filter on kernel core properties</description>
		<macro_copy_template todir="${src.dir}" filesetDir="${src-template.dir}"/>
	</target>

	<!-- target resource -->
	<target name="resource">
		<title title="TASK resource" projectname="${project.name}" projectdir="${home.dir}"/>
		<description>Copy all the properties and xml files to the working directory (classes.dir).</description>
		<macro_copy_resource todir="${classes.dir}" filesetDir="${src.dir}"/>
		<!--<macro_copy_resource todir="${classes.dir}" filesetDir="${test.dir}"/>-->
	</target>

	<!-- target copy code -->
	<target name="archive-code">
		<title title="TASK copy code" projectname="${project.name}" projectdir="${home.dir}"/>
		<description>Copy all the code.</description>
		<delete dir="${release.code.dir}" >
		</delete>
		<mkdir dir="${dist.dir}"/>
		<macro_copy_code filesetDir="${src.dir}" todir="${release.code.dir}"/>
		<macro_copy_code filesetDir="${src-plugin.dir}" todir="${release.code.dir}"/>
		<zip basedir="${release.code.dir}" destfile="${dist.dir}/${archive.src.name}">
		</zip>
		<delete dir="${release.code.dir}" >
		</delete>
	</target>

	<!-- target archive -->
	<target name="archive" depends="clean,template,test,resource, archive-code">
		<title title="TASK archive" projectname="${project.name}" projectdir="${home.dir}"/>
		<description>Create an archive containing all the classes of the migration project</description>
		<macro_archive compress="true" destdir="${dist.dir}" destfile="${archive.name}" classesdir="${classes.dir}"/>
	</target>

	<!-- SHIFT to maven -->
	<!-- create the maven structure for
		 - foundation
		 - kernel
		 - template
	-->
	<property name="ant.foundation.src" value="../minuteFoundation/src/main/java" />
	<property name="mvn.foundation.src" value="../mvn/minuteFoundation/src/main/java" />

	<target name="setup-mvn-foundation">
		<macro_copy_for_mvn fromdir="../minuteFoundation/src/main/java" todir="../mvn/minuteFoundation/src/main/java" />
	</target>
	
	
	<property name="ant.kernel.src" value="../minuteKernel/src" />
	<property name="ant.kernel.src.plugin" value="../minuteKernel/src-plugin" />
	<property name="ant.kernel.src.patch" value="../minuteKernel/src-patch" />
	<property name="ant.kernel.src.test" value="../minuteKernel/test" />
	
	<property name="mvn.kernel.src.java" value="../mvn/minuteKernel/src/main/java" />
	<property name="mvn.kernel.src.test.java" value="../mvn/minuteKernel/src/test/java" />
	
	<target name="setup-mvn-kernel">
		<macro_copy_for_mvn fromdir="${ant.kernel.src}" todir="${mvn.kernel.src.java}" />
		<macro_copy_for_mvn fromdir="${ant.kernel.src.plugin}" todir="${mvn.kernel.src.java}" />
		<macro_copy_for_mvn fromdir="${ant.kernel.src.patch}" todir="${mvn.kernel.src.java}" />
		<macro_copy_for_mvn fromdir="${ant.kernel.src.test}" todir="${mvn.kernel.src.test.java}" />
	</target>
	
	<target name="setup-mvn">
		<antcall target="setup-mvn-foundation"></antcall>
		<antcall target="setup-mvn-kernel"></antcall>
	</target>
    <!-- build from ant -->
	
	
	<!-- copy artifacts -->
	

</project>
