<?xml version="1.0" encoding="UTF-8"?>
<project default="archive" basedir="." name="minuteKernel">
    <description>This build file will build all the business modules</description>
    <property name="project.name" value="minuteProject"/>
    <property name="home.dir" value="."/>
    <property name="application.dir" value="${home.dir}/application"/>
	<property name="application.name" value="minuteKernel">	</property>
	
	<property name="lib.dir" value="${home.dir}/lib"/>
    <property name="src.dir" value="${home.dir}/src"/>
    <property name="test.dir" value="${home.dir}/test"/>	
    <property name="dist.dir" value="${application.dir}/java/lib"/>	
	<property name="archive.name" value="${application.name}.jar"/>
	<property name="classes.dir" value="${home.dir}/classes"/>

	
	<!-- ===================================================================== -->
    <!-- classpath definitions -->
    <!-- ===================================================================== -->
    <path id="compile.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>
    <!-- ===================================================================== -->
    <!-- specific macros definition -->
    <!-- ===================================================================== -->
    <macrodef name="macro_compile">
        <attribute name="debug"/>
        <attribute name="optimize"/>
        <sequential>
            <javac debug="@{debug}" deprecation="false" destdir="${classes.dir}" 
            	optimize="@{optimize}" nowarn="false">
                <classpath refid="compile.classpath"/>
                <src path="${src.dir}"/>
                <src path="${test.dir}"/>
                <include name="**/*.java"/>
            </javac>
        </sequential>
    </macrodef>
    	
    <macrodef name="macro_copy_resource">
        <attribute name="todir"/>
        <attribute name="filesetDir"/>
        <sequential>
            <copy todir="@{todir}">
                <fileset dir="@{filesetDir}">
                    <include name="**/*.xml"/>
                    <include name="**/*.properties"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>
	
    <macrodef name="macro_archive">
        <attribute name="compress"/>
        <attribute name="destdir"/>
        <attribute name="destfile"/>
    	<attribute name="classesdir"/>
        <sequential>
            <jar compress="@{compress}" destfile="@{destdir}/@{destfile}">
                <fileset dir="@{classesdir}">
                    <include name="**/*.*"/>
                </fileset>
            </jar>
        </sequential>
    </macrodef>

    <macrodef name="title">
        <attribute name="title"/>
        <attribute name="projectname"/>
        <attribute name="projectdir"/>
        <sequential>
			<echo>***************************</echo>
			<echo>* task @{title}</echo>
			<echo>* on project @{projectname}</echo>
        	<echo>***************************</echo>
        </sequential>
    </macrodef>

    <!-- ===================================================================== -->
    <!-- target definitions -->
    <!-- ===================================================================== -->
    
	<!-- target clean -->
    <target name="clean">
        <title title="TASK clean" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Clean the business project</description>
        <delete failonerror="false" file="${generatorBusiness.dist.dir}/${archive.name}"/>
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${classes.dir}"/>
        </delete>
        <delete failonerror="false" dir="${reports.dir}"/>
    </target>	
	
    <!-- target prepare -->
    <target name="prepare">
        <title title="TASK prepare" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Creates the directories necessary for building the business</description>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${dist.dir}"/>
    </target>	

    <!-- target compile -->
    <target name="compile" depends="prepare">
        <title title="TASK compile" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Compile the migration project</description>
        <macro_compile debug="true" optimize="false"/>
    </target>	

    <!-- target resource -->
    <target name="resource">
        <title title="TASK resource" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Copy all the properties and xml files to the working directory (classes.dir).</description>
    	<macro_copy_resource todir="${classes.dir}" filesetDir="${src.dir}"/>
    	<macro_copy_resource todir="${classes.dir}" filesetDir="${test.dir}"/>
    </target>	

    <!-- target archive -->
    <target name="archive" depends="clean,compile,resource">
        <title title="TASK archive" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Create an archive containing all the classes of the migration project</description>
        <macro_archive compress="true" destdir="${dist.dir}" destfile="${archive.name}" classesdir="${classes.dir}"/>
    </target>	
	
		
</project>
