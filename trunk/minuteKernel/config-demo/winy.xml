<!DOCTYPE root>
<generator-config>
	<configuration>
        <conventions>
            <target-convention type="enable-updatable-code-feature" />
            <target-convention type="disable-timestamp-comment-marker" />
        </conventions>
        <context>
        	<context-session-profile class="SessionProfile" name="sessionProfile">
        		
        	</context-session-profile>
        </context>
		<model name="winy" version="1.0" package-root="com">
			<description>
				<CDATA>
					This model illustrates:
					Reverse-engineering on tables, views
					SDD
					Add ad-hoc forms and actions
				</CDATA>
			</description>
			<data-model database-type="MYSQL">
				<driver name="mysql" version="5.1.16" groupId="mysql"
					artifactId="mysql-connector-java"></driver>
				<dataSource>
					<driverClassName>org.gjt.mm.mysql.Driver</driverClassName>
					<url>jdbc:mysql://localhost:3306/winy</url>
					<username>root</username>
					<password>mysql</password>
				</dataSource>
				<!-- for Oracle and DB2 please set the schema <schema> </schema> -->
				<primaryKeyPolicy oneGlobal="true">
					<primaryKeyPolicyPattern name="autoincrementPattern"></primaryKeyPolicyPattern>
				</primaryKeyPolicy>
			</data-model>
			<business-model>
				<business-package default="project">
					<condition type="package" startsWith="STAT" result="statistics"></condition>
					<condition type="package" startsWith="SEC" result="security"></condition>
					<condition type="package" startsWith="ADMIN" result="admin"></condition>
					<condition type="package" startsWith="RELEASE" result="release"></condition>
					<condition type="package" startsWith="BUS" result="business"></condition>
					<condition type="package" startsWith="VIEW_STAT" result="stats"></condition>
				</business-package>
				<enrichment>
					<entity name="COUNTRY" content-type="reference-data">
						<!-- <field name="DESCRIPTION" ordering="asc" label="my description"
							is-searchable="true"></field>
							 -->
						<field name="NAME" ordering="asc"></field>
						<semantic-reference>
							<sql-path path="NAME" />
						</semantic-reference>
					</entity>
					<entity name="REGION" content-type="reference-data">
						<field name="NAME" ordering="asc"></field>
						<semantic-reference>
							<sql-path path="NAME" />
						</semantic-reference>
					</entity>
					<entity name="CEPAGE" content-type="reference-data">
						<field name="NAME" ordering="asc"></field>
						<semantic-reference>
							<sql-path path="NAME" />
						</semantic-reference>
					</entity>
					<entity name="COLOR" content-type="reference-data">
						<field name="NAME" ordering="asc"></field>
						<semantic-reference>
							<sql-path path="NAME" />
						</semantic-reference>
					</entity>
					<entity name="APPELATION" content-type="reference-data">
						<field name="NAME" ordering="asc"></field>
						<semantic-reference>
							<sql-path path="NAME" />
						</semantic-reference>
					</entity>
					<conventions>
					
						<column-naming-convention type="apply-strip-column-name-suffix"
							pattern-to-strip="_ID" />
						<reference-naming-convention
							type="apply-referenced-alias-when-no-ambiguity" is-to-plurialize="true" />
						<ordering-convention field-pattern="DISPLAY_ORDER"
							field-pattern-type="endsWith" ordering="asc" />

						<!-- stereotype email, URL -->
						<stereotype-convention field-pattern="email"
							field-pattern-type="contains" stereotype="email" />
						<stereotype-convention field-pattern="url"
							field-pattern-type="contains" stereotype="url" />
						<stereotype-convention field-pattern="password"
							field-pattern-type="contains" stereotype="password" />
						<stereotype-convention field-pattern="notes"
							field-pattern-type="equals" stereotype="text-html" />

						<!-- primary key conv -->
						<column-naming-convention
							type="apply-fix-primary-key-column-name-when-no-ambiguity-and-not-natural"
							default-value="ID" />

						<!-- strip prefix -->
						<entity-naming-convention type="apply-strip-table-name-prefix"
							pattern-to-strip="ADMIN_,SEC_,BUS_" />
						<!-- semantic reference -->
						<semantic-entity-convention
							field-pattern="NAME,NUMBER" field-pattern-type="contains"
							max-number-of-fields="2" />

						<!-- trigger -->
						<property-convention scope="field" pattern="CREATION_DATE"
							tag="trigger-insert-with-current-date" type="start-with" />
						
						<view-primary-key-convention 
						            type="apply-default-primary-key-otherwise-first-one" 
						            default-primary-key-names="IDENTIFIER,ID" /> 
					
						<!-- content type -->
						<entity-content-type-convention type="apply-content-type-to-entity-belonging-to-package" 
							pattern="reference" content-type="reference-data"/>

						<semantic-reference-convention content-type="reference-data"
						    field-pattern="value,code" field-pattern-type="endsWith" 
						    max-number-of-fields="5" />
						    
					</conventions>

				</enrichment>
			</business-model>
			<statement-model>
				<queries>
					<query name="winery_profile" id="winery_profile" package-name="profile">
						<query-body>
							<value>
select w.id domain_id, w.name domain, pp.name formula, pp.price price, pp.period period, r.name region 
from user u, user_winery_profile uwp, winery w, pay_plan pp, region r
where uwp.user_id = u.id and
uwp.winery_id = w.id and
uwp.pay_plan_id = pp.id and
w.region_id = r.id and
u.email = ?
							</value>
						</query-body>
						<query-params>
                        	<query-param name="email" is-mandatory="true" type="string" sample="'mail'"></query-param>
                        </query-params>
					</query>
					<query name="winery_admin" id="winery_admin" package-name="winery">
						<query-body>
							<value>
select * from v_winery_admin where domain_id = ?
							</value>
						</query-body>
						<query-params>
                        	<query-param name="id" is-mandatory="true" type="int" sample="1"></query-param>
                        </query-params>
					</query>
					<query name="winery_public" id="winery_public" package-name="winery">
						<query-body>
							<value>
select * from v_winery_public where domain_id = ?
							</value>
						</query-body>
						<query-params>
                        	<query-param name="id" is-mandatory="true" type="int" sample="1"></query-param>
                        </query-params>
					</query>
					
					<!-- TODO create productItemList -->
					<query name="productAndItemList" id="product_list" package-name="product">
						<query-body>
							<value>
select p.name product, p.detail detail, pi.id product_item_id, pi.price price, pi.year year, w.name winery, r.name region 
from product p, winery w, region r, product_item pi
where p.winery_id = w.id and w.region_id = r.id and pi.product_id = p.id $wheredomainid $whereproductid
 order by region desc, winery desc, product desc
							</value>
						</query-body>
						<query-filters>
                            <query-filter name="wheredomainid" and-where-connection="and">
                                <value>
        <![CDATA[ w.id = ? ]]>
                                </value>
                                <query-params>
                                    <query-param name="wineryId" type="int" sample="1">
                                    </query-param>
                                </query-params>
                            </query-filter>
                            <query-filter name="whereproductid" and-where-connection="and">
                                <value>
        <![CDATA[ p.id = ? ]]>
                                </value>
                                <query-params>
                                    <query-param name="productId" type="int" sample="1">
                                    </query-param>
                                </query-params>
                            </query-filter>
                        </query-filters>
					</query>
					<query name="productList" id="product_list" package-name="product">
						<query-body>
							<value>
select p.name product, p.detail detail, p.is_bio is_bio, p.is_aoc is_aoc, p.grades grades 
from product p
 $wheredomainid
 order by p.name desc
							</value>
						</query-body>
						<query-filters>
                            <query-filter name="wheredomainid" and-where-connection="where">
                                <value>
        <![CDATA[ p.winery_id = ? ]]>
                                </value>
                                <query-params>
                                    <query-param name="wineryId" type="int" sample="1">
                                    </query-param>
                                </query-params>
                            </query-filter>
                        </query-filters>
					</query>
					<query name="call_new_domain" id="call_new_domain" package-name="domain" is-write="true">
                         <query-body>
                         <value>
<![CDATA[call new_domain (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]]>
                            </value>
                         </query-body>
                         <query-params>
                         	<query-param name="name" is-mandatory="true" type="string" sample="'a'"></query-param>
                         	<query-param name="description" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="geo" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="latitude" is-mandatory="true" type="long" sample="1" ></query-param>
                         	<query-param name="longitude" is-mandatory="true" type="long" sample="1" ></query-param>
                         	<query-param name="grades" is-mandatory="true" type="string" sample="'1'" ></query-param>
                         	<query-param name="email" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="region_id" is-mandatory="true" type="int" sample="-1" ></query-param>
                         	<query-param name="contact_name" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_street1" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_street2" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_post_code" is-mandatory="true" type="int" sample="1200" ></query-param>
                         	<query-param name="contact_city" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_phone" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<!-- add 2 params 
                         		> login email
                         		> plan chosen
                         	-->
                         	<query-param name="pay_plan_id" is-mandatory="true" type="int" sample="1" ></query-param>
                         	<query-param name="login_email" is-mandatory="true" type="string" sample="'test'" ></query-param>
                         	<query-param name="id" is-mandatory="true" type="int" sample="10"  is-id="true" is-output-param="true"></query-param>
                         </query-params>
                          
                     </query>
					<query name="call_update_domain" id="call_update_domain" package-name="domain" is-write="true">
                         <query-body>
                         <value>
<![CDATA[call update_domain (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]]>
                            </value>
                         </query-body>
                         <query-params>
                         	<query-param name="name" is-mandatory="true" type="string" sample="'a'"></query-param>
                         	<query-param name="description" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="geo" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="latitude" is-mandatory="true" type="long" sample="1" ></query-param>
                         	<query-param name="longitude" is-mandatory="true" type="long" sample="1" ></query-param>
                         	<query-param name="grades" is-mandatory="true" type="string" sample="'1'" ></query-param>
                         	<query-param name="contact_email" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="region_id" is-mandatory="true" type="int" sample="-1" ></query-param>
                         	<query-param name="contact_name" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_street1" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_street2" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_post_code" is-mandatory="true" type="int" sample="1200" ></query-param>
                         	<query-param name="contact_city" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_phone" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<!-- add 2 params 
                         		> login email
                         		> plan chosen
                         	-->
                         	<query-param name="pay_plan_id" is-mandatory="true" type="int" sample="1" ></query-param>
                         	<query-param name="login_email" is-mandatory="true" type="string" sample="'test'" ></query-param>
                         	<query-param name="domain_id" is-mandatory="true" type="int" sample="10"  is-id="true" ></query-param>
                         </query-params>
                          
                     </query>
					<query name="call_make_domain" id="call_make_domain" package-name="domain"  is-write="true">
                         <query-body>
                         <value>
<![CDATA[call make_domain (?,?,?,?,?,?,?,?,?,?,?,?,?)]]>
                            </value>
                         </query-body>
                         <query-params>
                         	<query-param name="name" is-mandatory="true" type="string" sample="'a'"></query-param>
                         	<query-param name="description" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="geo" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="latitude" is-mandatory="true" type="long" sample="1" ></query-param>
                         	<query-param name="longitude" is-mandatory="true" type="long" sample="1" ></query-param>
                         	<query-param name="email" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="region_id" is-mandatory="true" type="int" sample="1" ></query-param>
                         	<query-param name="contact_name" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_street1" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_street2" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_post_code" is-mandatory="true" type="int" sample="1200" ></query-param>
                         	<query-param name="contact_city" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_phone" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         </query-params>
                          
                     </query>
                     
					<query name="call_new_product" id="call_new_product" package-name="product">
                         <query-body>
                         <value>
<![CDATA[call new_product (?,?,?,?,?,?)]]>
                            </value>
                         </query-body>
                         <query-params>
                         	<query-param name="name" is-mandatory="true" type="string" sample="'a'"></query-param>
                         	<query-param name="detail" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="priceInfo" is-mandatory="true" type="long" sample="1.5" ></query-param>
                         	<query-param name="wineryId" is-mandatory="true" type="int" sample="-1" ></query-param>
                         	<query-param name="year" is-mandatory="true" type="int" sample="1999" ></query-param>
                         	<query-param name="id" is-mandatory="true" type="int" sample="10"  is-id="true" is-output-param="true"></query-param>
                         </query-params>
                     </query>

                     <query name="cepage_tokenfield" id="cepage_tokenfield" package-name="cepage">
                     <!-- TODO add implicity country, language as filter param -->
                         <query-body>
                         <value>
<!-- <![CDATA[select id as value, name as label from cepage order by name desc]]> -->
<![CDATA[select name as value, name as label from cepage order by name desc]]>
                            </value>
                         </query-body>
                     </query>
                     <query name="country_list" id="country_list" package-name="country">
                         <query-body>
                         <value>
<![CDATA[select id, name, description from country order by name desc]]>
                            </value>
                         </query-body>
                     </query>
                     <query name="country_list_having_region" id="country_list" package-name="country">
                         <query-body>
                         <value>
<![CDATA[  
select c.id, c.name, c.description 
 from country c, region r
 where r.country_id = c.id
 order by name desc
 ]]>
                            </value>
                         </query-body>
                     </query>
                     
                     <query name="region_list" id="region_list" package-name="region">
                         <query-body>
                         <value>
<![CDATA[select id, name, description from region r where r.country_id = ? order by name desc]]>
                            </value>
                         </query-body>
                         <query-params>
                         	<query-param name="country_id" is-mandatory="true" type="int" sample="-1"></query-param>
                         </query-params>
                     </query>
                     <!-- master data -->
                     <!-- grades -->
                     <query name="grade_list" id="region_list" package-name="region">
                         <query-body>
                         	<value>
<![CDATA[select id, name, url_description from cepage $wherecountryid order by display_order desc, name desc]]>
                            </value>
                         </query-body>
						 <query-filters>
                            <query-filter name="wherecountryid" and-where-connection="where">
                                <value>
        <![CDATA[ country_id = ? ]]>
                                </value>
                                <query-params>
                                    <query-param name="country_id" type="int" sample="1"/>
                                </query-params>
                            </query-filter>
                         </query-filters>
                     </query>
              
                     <!-- badge queries -->
                     <query name="winery_product_badge" id="winery_product_badge" package-name="badge">
                         <query-body>
                         <value>
<![CDATA[
select count(*) nb_of_products, w.grades grades, w.name winery, w.description description 
from product p, winery w
where p.winery_id = w.id 
and w.id = ?
group by w.name, w.grades
 order by winery desc
]]>
                            </value>
                         </query-body>
                         <query-params>
                         	<query-param name="winery_id" is-mandatory="true" type="int" sample="-1"></query-param>
                         </query-params>
                     </query>

                     <query name="winery_product_item_badge" id="winery_product_item_badge" package-name="badge">
                         <query-body>
                         <value>
<![CDATA[
select p.id product_id, count(pi.id) nb_of_items , count(a.id) nb_of_awards , p.name product, p.detail detail, p.image_url, p.is_bio, p.is_aoc is_aoc, p.grades, p.color
from product p left outer join product_item pi on
 pi.product_id = p.id 
 left outer join award a on a.product_id = p.id
 where p.active = true
$wherewineryid
group by p.id
 order by p.name asc
]]>
                            </value>
                         </query-body>
						 <query-filters>
                            <query-filter name="wherewineryid" and-where-connection="and">
                                <value>
        <![CDATA[ p.winery_id = ? ]]>
                                </value>
                                <query-params>
                                    <query-param name="winery_id" type="int" sample="1"/>
                                </query-params>
                            </query-filter>
                         </query-filters>
                     </query>
                     
                     <query name="get_wineries_in_region" id="get_wineries_in_region" package-name="region">
                         <query-body>
	                         <value>
                         <!--http://stackoverflow.com/questions/4687312/querying-within-longitude-and-latitude-in-mysql 
                         https://developers.google.com/maps/articles/phpsqlsearch_v3
 -->
 <![CDATA[
SELECT id, ( $distanceunit * acos( cos( radians(?) ) * cos( radians( latitude ) ) * cos( radians( longitude )
 - radians(?) ) + sin( radians(?) ) * sin( radians( latitude ) ) ) ) AS distance, latitude, longitude 
 FROM winery HAVING distance < ? ORDER BY distance LIMIT 0 , ?
 ]]>
                            </value>
                         </query-body>
                         <query-params>
                             <query-param id="latitudeId" name="latitude" is-mandatory="true" type="long" sample="48" ></query-param>
                             <query-param name="longitude" is-mandatory="true" type="long" sample="7" ></query-param>
                             <query-param name="latitude2" refname="latitude"></query-param>                          
                             <query-param name="range" is-mandatory="true" type="int" sample="2" ></query-param>
                             <query-param name="nb_of_result" is-mandatory="true" type="int" sample="2" ></query-param>
                         </query-params>
                         <query-chunks>
							<query-chunk name="distanceunit" sample-value="3959">
								<query-chunk-value name="km" value="6371"/>
								<query-chunk-value name="miles" value="3959"/>
							</query-chunk>
						</query-chunks>
                     </query>
                     
                     <!-- queries for DDL -->
                     <!-- 
                     	country -> region -> appelation
                     	color -> cepage
                     	or
                     	revert
                     	
                     	each master data > semantic ref > order by + where parent is (for filter) 
                     
                     -->
                     <!-- pictures -->


                     <query name="winery_picture_list" id="winery_picture_list" package-name="winery">
                         <query-body>
                         <value>
<![CDATA[
 select id picture_id, image_name, description, display_order 
 from winery_pictures 
 where winery_id = ?
 order by display_order
]]>
                            </value>
                         </query-body>
                         <query-params>
                         	<query-param name="winery_id" is-mandatory="true" type="int" sample="-1"></query-param>
                         </query-params>
                     </query>
<!-- profile -->
                     <query name="profile_winery_picture_list" id="winery_picture_list" package-name="winery">
                         <query-body>
                         <value>
<![CDATA[
 select id picture_id, image_name, description, display_order 
 from winery_pictures 
 where winery_id = ?
 order by display_order
]]>
                            </value>
                         </query-body>
                         <query-params>
                         	<query-param name="winery_id" is-mandatory="true" type="int" sample="-1" from-profile-session-property="winery_id"></query-param>
                         </query-params>
                     </query>
<!-- end query -->

<!-- SDD for public -->
<!-- 
search type wine/region/country
ex: cabernet 

// try content search on tags / grades / region / country / (domain)
=>list of wines + domains

 -->
 
                   </queries>
              </statement-model>
		</model>

		<targets catalog-entry="REST-Custom, Openxava"
			append-catalog-entry-dir-to-outputdir-root="true"  
			outputdir-root="../../product/winy" >
			<property name="openxava-disable-sdd" value="true" />
		</targets>



	</configuration>
</generator-config>