#exposeVariableModelSpecific()
#exposeConnectionSpecific()
package $packageName;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.sql.DataSource;

import org.apache.commons.lang.StringUtils;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.transaction.annotation.Transactional;
#distinctEntityProperty()
#templateDefinition()
#set ($springConfig = $commonUtils.getArtifactRelativePathDirAndFullName($model, $templateBslaSpringConfigHibBE) )

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={
     "classpath:${springConfig}"
})
@TransactionConfiguration(transactionManager = "$transactionManagerName") 
@Transactional
public class $className extends AbstractTransactionalJUnit4SpringContextTests { 

	@Override
	@Autowired
	public void setDataSource(@Qualifier(value = "$dataSourceName") DataSource dataSource) {
	   this.simpleJdbcTemplate = new SimpleJdbcTemplate(dataSource);
	}
        
    protected String getString1 (int length) {
        return StringUtils.substring ("This is a test string",0,length);
    }

    protected Integer getInteger1 () {
        return new Integer (100);
    }
    
    protected Long getLong1 () {
        return new Long (100);
    }

    protected Boolean getBoolean1 () {
        return new Boolean (false);
    }

    protected Long getDecimal1() {
        return getLong1();
    }

    protected BigDecimal getBigDecimal1() {
        return BigDecimal.valueOf(getLong1());
    }
    
    protected String getString2 (int length) {
        return StringUtils.substring ("that is a second test string",0,length);
    }

    protected Integer getInteger2 () {
        return new Integer (200);
    }
    
    protected Long getLong2 () {
       return new Long (200);
    }

    protected Boolean getBoolean2 () {
       return new Boolean (true);
    }

    protected Long getDecimal2() {
        return getLong2();
    }

    protected BigDecimal getBigDecimal2() {
        return BigDecimal.valueOf(getLong2());
    }
    
    protected Date getDate () {
       return new Date();
    }

    protected Timestamp getTimestamp () {
       return new Timestamp(getDate().getTime());
    }
        
}