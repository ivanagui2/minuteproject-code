#exposeVariableEntitySpecific()
#putImportParamsUML()
package $packageName;

import java.util.List;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import net.sf.minuteProject.architecture.bsla.bean.criteria.PaginationCriteria;
import $importDaoInterfaceUML;
import $importDomainObjectUML;

/**
 *
 * <p>Title: $className</p>
 *
 * <p>Description: Interface of a Data access object dealing with $className
 * persistence. It offers a set of methods which allow for saving,
 * deleting and searching $className objects</p>
 *
 */

public class $className extends HibernateDaoSupport implements $daoInterfaceNameUML {

	public $className () {}

    /**
     * Inserts a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public void insert$tableClassName($tableClassName $tableVariableName) {
      getHibernateTemplate().save($tableVariableName);
    }

    /**
     * Updates a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public void update$tableClassName($tableClassName $tableVariableName) {
      getHibernateTemplate().update($tableVariableName);
    }
 
     /**
     * Saves a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public void save$tableClassName($tableClassName $tableVariableName) {
      getHibernateTemplate().save($tableVariableName);
    }
       
    /**
     * Deletes a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public void delete$tableClassName($tableClassName $tableVariableName) {
      getHibernateTemplate().delete($tableVariableName);
    }
    
    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName
     * @param Long id
     * @return $tableClassName The $tableClassName entity
     
    public $tableClassName load$tableClassName(Long id) {
    	return ($tableClassName)getHibernateTemplate().get(${tableClassName}.class, id);
    }
*/
    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName
     * @param $primaryKeyFullType $primaryKey
     * @return $tableClassName The $tableClassName entity
     */
    public $tableClassName load$tableClassName($primaryKeyFullType $primaryKeyVariable) {
    	return ($tableClassName)getHibernateTemplate().get(${tableClassName}.class, $primaryKeyVariable);
    }    

    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName and its dependent one to many objects
     * @param Long id
     * @return $tableClassName The $tableClassName entity
     */
    public $tableClassName loadFullFirstLevel$tableClassName($primaryKeyFullType $primaryKeyVariable) {
        List list = getHibernateTemplate().find(
                     " FROM $tableClassName $tableVariableName "
#foreach ($reference in $table.children)
#putReferenceParams2()
                     + " LEFT JOIN FETCH ${tableVariableName}.${linkedTableVariable}${linkedColumnClass}s "   
#end                      
                     + " WHERE ${tableVariableName}.${primaryKeyVariable} = "+$primaryKeyVariable
               );
         if (list!=null)
            return ($tableClassName)list.get(0);
         return null;
    	//return null;//($tableClassName) getHibernateTemplate().queryForObject("loadFullFirstLevel$tableClassName", id);
    }

    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName
     * @param $tableClassName $tableVariableName
     * @return $tableClassName The $tableClassName entity
     */
    public $tableClassName loadFullFirstLevel$tableClassName($tableClassName $tableVariableName) {
        boolean isWhereSet = false;
        StringBuffer query = new StringBuffer();
        query.append ("FROM $tableClassName $tableVariableName ");
#foreach ($reference in $table.children)
#putReferenceParams2()
        query.append (" LEFT JOIN FETCH ${tableVariableName}.${linkedTableVariable}${linkedColumnClass}s ");
#end    
#foreach ($column in $table.primaryKeyColumns)
#putColumnParams()
        if (${tableVariableName}.get$columnClass() != null) {
           query.append (getQueryWHERE_AND (isWhereSet));
           isWhereSet = true;
#if ($sqlUtils.isQuotedColumn($column))        
           query.append(" ${tableVariableName}.${columnVar} = '"+ ${tableVariableName}.get$columnClass()+"' ");
#else
           query.append(" ${tableVariableName}.${columnVar} = "+ ${tableVariableName}.get$columnClass() + " ");
#end
         }
	#end                   
        	List list = getHibernateTemplate().find(query.toString());
        if (list!=null)
           return ($tableClassName)list.get(0);    
        return null;
    }  
     
    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName and its dependent objects one to many
     * @param Long id
     * @return $tableClassName The $tableClassName entity
     */
    public $tableClassName loadFull$tableClassName(Long id) {
    	return null;//($tableClassName)getHibernateTemplate().queryForObject("loadFull$tableClassName", id);
    }

    /**
     * Searches a list of $tableClassName entity 
     * @param $tableClassName $tableVariableName
     * @return List
     */
    public List search$tableClassName($tableClassName $tableVariableName) {
        boolean isWhereSet = false;
        StringBuffer query = new StringBuffer();
        query.append ("FROM $tableClassName $tableVariableName ");
#foreach ($column in ${table.columns})
#putColumnParams()
        if (${tableVariableName}.get$columnClass() != null) {
           query.append (getQueryWHERE_AND (isWhereSet));
           isWhereSet = true;
#if ($sqlUtils.isQuotedColumn($column))        
           query.append(" ${tableVariableName}.${columnVar} = '"+ ${tableVariableName}.get$columnClass()+"' ");
#else
           query.append(" ${tableVariableName}.${columnVar} = "+ ${tableVariableName}.get$columnClass() + " ");
#end
         }
	#end       
	        	return getHibernateTemplate().find(query.toString());            
    //return getHibernateTemplate().queryForList("search$tableClassName", $tableVariableName);
    }    
    
    /**
     * Load a paginated list of $tableClassName entity dependent of pagination criteria
     * @param PaginationCriteria paginationCriteria
     * @return List
     */
    public List loadPaginated$tableClassName (PaginationCriteria paginationCriteria) {
        return null;
    //return getHibernateTemplate().queryForList("loadPaginated$tableClassName", $tableVariableName);
    }   
    
    private String getQueryWHERE_AND (boolean isWhereSet) {
       if (isWhereSet)
          return " AND ";
       return " WHERE ";
    }
    
    
}
