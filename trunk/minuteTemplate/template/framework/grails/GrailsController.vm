#exposeVariableEntitySpecific()
#exposeEnvironmentParams()
#putGrailsTemplateDefinition()
#exposeImportGrailsParamParamsUML ($table)
#set($tableLabel=$i18nUtils.getI18nFromDBObject(${domainClassName}))
#set($tableLabels=$i18nUtils.plurialize(${tableLabel}))
package $packageName

import $importDomainObjectUML

class ${className} {

     def scaffold = $domainClassName
     
	 def xmlShow = {
		 def $domainVariableName = ${domainClassName}.get(params.id)
		 if ($domainVariableName)
		 	renderXml$domainClassName ($domainVariableName)
		 else {
		    response.status = 404 //Not Found
		    render "${params.id} not found."
	 	 }
	 }
	 
	 def jsonShow = {
		 def $domainVariableName = ${domainClassName}.get(params.id)
		 if ($domainVariableName)
		 	renderJson$domainClassName ($domainVariableName)
		 else {
		    response.status = 404 //Not Found
		    render "${params.id} not found."
	 	 }
	 }
	 	 
	 def xmlList = {
		 def list = ${domainClassName}.list()
		 render(contentType:"text/xml"){
		   "$tableLabels"{
			 for($domainVariableName in list){
			   renderXml${domainClassName} $domainVariableName
			 }
		   }
		}
	 }
	   
	 def jsonList = {
		 def list = ${domainClassName}.list()
		 render(contentType:"text/json"){
		   "$tableLabels"{
			 for($domainVariableName in list){
			   renderJson${domainClassName} $domainVariableName
			 }
		   }
		}
	 }	   
	 
	 private String renderXml${domainClassName}($domainClassName ${domainVariableName}ToRender) {
		 render(contentType:"text/xml"){
			"${domainVariableName}" (
#foreach($column in ${table.primaryKeyColumns})
#putColumnParams()
                #if ($velocityCount>1),#end"$columnVar":${domainVariableName}ToRender.id
#end
             ){
#foreach ($column in ${table.attributes})
#putColumnParams()
                "$columnVar"(${domainVariableName}ToRender.${columnVar})
#end			
			 }
		 }
	 }  
	 
	 private String renderJson${domainClassName}($domainClassName ${domainVariableName}ToRender) { // unfortunately can not use variable $domainVariableName use ${domainVariableName}ToRender instead (Grails 1.3.5) 
		 render(contentType:"text/json"){                                                // otherwise error for rendering 
			"${domainVariableName}" (                                                    // this line
#foreach($column in ${table.columns})
#putColumnParams()
#if ($isPrimaryKey)
                #if ($velocityCount>1),#end"$columnVar":${domainVariableName}ToRender.id
#else
                #if ($velocityCount>1),#end"$columnVar":${domainVariableName}ToRender.${columnVar}
#end
#end
             )
		 }
	 }  
	 
}
