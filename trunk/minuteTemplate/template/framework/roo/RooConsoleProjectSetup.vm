#rooCommand()
#exposeVariableModelSpecific()
#set ($datasource = $model.dataModel.basicDataSource)
#exposeJdbc()
${shell}project --topLevelPackage $model.packageRoot

${shell}persistence setup --provider HIBERNATE --database $database.type
${shell}database properties list
${shell}database properties set --key database.url --value $datasource.url
${shell}database properties set --key database.username --value $datasource.username
#if($datasource.password!="")
${shell}database properties set --key database.password --value $datasource.password
#end
${shell}database properties list

#foreach ($package in ${businessPackages})
#foreach ($table in ${package.listOfTables})
#putRooEntityParams()
#if(!$isMany2Many)
${shell}entity --class ~.domain.${tableClassName} --identifierField $identifierField --identifierColumn $identifierColumn --identifierType $identifierType --testAutomatically
#end
#end
#end
	
#foreach ($package in ${businessPackages})
#foreach ($table in ${package.listOfTables})

#exposeVariableEntitySpecific()
#if(!$isMany2Many)
#foreach ($column in ${table.attributes})
#putRooColumnParams()
#if(!$column.isPrimaryKey())
#if(!$columnUtils.isForeignKey($column))
${shell}field $rooConsoleType --fieldName $columnVar ${typeChunk} ${minSizeChunk} ${notNullChunk} ${sizeMaxChunk} --class ~.domain.${tableClassName}
#else
#set($reference=$referenceUtils.getReference($column))
#set($linkedTableClass = $formatUtils.getJavaName(${reference.foreignTableName}))
${shell}field reference --fieldName $columnVar --type ~.domain.$linkedTableClass ${notNullChunk}
#end
#end
#end
#end
#end
#end	
	
#foreach ($package in ${businessPackages})
#foreach ($table in ${package.listOfTables})
#exposeVariableEntitySpecific()
#if(!$isMany2Many)
#foreach ($reference in $table.children)
#putReferenceParams2()
##m2m not supported. Check if link table is m2m.
#if(!$tableUtils.isMany2Many(${linktableDB}))
${shell}field set --class ~.domain.${localTableClass} --fieldName ${linkedTableVariable}${linkedColumnClass}s --element ~.domain.${linkedTableClass} --mappedBy $linkedColumnVariable ${notNullChunk} --cardinality MANY_TO_ONE
#end
#end
#end
#end
#end
	
${shell}perform eclipse
${shell}perform assembly	