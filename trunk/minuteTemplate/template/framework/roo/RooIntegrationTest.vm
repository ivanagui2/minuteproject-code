package ${packageName};

import ${rooDomainDataOnDemand};
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ${className} {
    
    declare @type: ${rooIntegrationTestClassName}: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: ${rooIntegrationTestClassName}: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext.xml");
    
    @Autowired
    private ${rooDomainDataOnDemand} ${rooIntegrationTestClassName}.dod;
    
    @Test
    public void ${rooIntegrationTestClassName}.testCountAddresses() {
        org.junit.Assert.assertNotNull("Data on demand for '${domainClassName}' failed to initialize correctly", dod.getRandom${domainClassName}());
        long count = ${importDomainObject}.countAddresses();
        org.junit.Assert.assertTrue("Counter for '${domainClassName}' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void ${rooIntegrationTestClassName}.testFind${domainClassName}() {
        org.junit.Assert.assertNotNull("Data on demand for '${domainClassName}' failed to initialize correctly", dod.getRandom${domainClassName}());
        java.lang.Integer id = dod.getRandom${domainClassName}().getAddressid();
        org.junit.Assert.assertNotNull("Data on demand for '${domainClassName}' failed to provide an identifier", id);
        ${importDomainObject} obj = ${importDomainObject}.findAddress(id);
        org.junit.Assert.assertNotNull("Find method for '${domainClassName}' illegally returned null for id '" + id + "'", obj);
        org.junit.Assert.assertEquals("Find method for '${domainClassName}' returned the incorrect identifier", id, obj.getAddressid());
    }
    
    @Test
    public void ${rooIntegrationTestClassName}.testFindAllAddresses() {
        org.junit.Assert.assertNotNull("Data on demand for '${domainClassName}' failed to initialize correctly", dod.getRandom${domainClassName}());
        long count = ${importDomainObject}.countAddresses();
        org.junit.Assert.assertTrue("Too expensive to perform a find all test for '${domainClassName}', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        java.util.List<${importDomainObject}> result = ${importDomainObject}.findAllAddresses();
        org.junit.Assert.assertNotNull("Find all method for '${domainClassName}' illegally returned null", result);
        org.junit.Assert.assertTrue("Find all method for '${domainClassName}' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void ${rooIntegrationTestClassName}.testFindAddressEntries() {
        org.junit.Assert.assertNotNull("Data on demand for '${domainClassName}' failed to initialize correctly", dod.getRandom${domainClassName}());
        long count = ${importDomainObject}.countAddresses();
        if (count > 20) count = 20;
        java.util.List<${importDomainObject}> result = ${importDomainObject}.findAddressEntries(0, (int)count);
        org.junit.Assert.assertNotNull("Find entries method for '${domainClassName}' illegally returned null", result);
        org.junit.Assert.assertEquals("Find entries method for '${domainClassName}' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    @Transactional
    public void ${rooIntegrationTestClassName}.testFlush() {
        org.junit.Assert.assertNotNull("Data on demand for '${domainClassName}' failed to initialize correctly", dod.getRandom${domainClassName}());
        java.lang.Integer id = dod.getRandom${domainClassName}().getAddressid();
        org.junit.Assert.assertNotNull("Data on demand for '${domainClassName}' failed to provide an identifier", id);
        ${importDomainObject} obj = ${importDomainObject}.findAddress(id);
        org.junit.Assert.assertNotNull("Find method for '${domainClassName}' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyAddress(obj);
        java.lang.Integer currentVersion = obj.getVersion();
        obj.flush();
        org.junit.Assert.assertTrue("Version for '${domainClassName}' failed to increment on flush directive", obj.getVersion() > currentVersion || !modified);
    }
    
    @Test
    @Transactional
    public void ${rooIntegrationTestClassName}.testMerge() {
        org.junit.Assert.assertNotNull("Data on demand for '${domainClassName}' failed to initialize correctly", dod.getRandom${domainClassName}());
        java.lang.Integer id = dod.getRandom${domainClassName}().getAddressid();
        org.junit.Assert.assertNotNull("Data on demand for '${domainClassName}' failed to provide an identifier", id);
        ${importDomainObject} obj = ${importDomainObject}.findAddress(id);
        org.junit.Assert.assertNotNull("Find method for '${domainClassName}' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyAddress(obj);
        java.lang.Integer currentVersion = obj.getVersion();
        obj.merge();
        obj.flush();
        org.junit.Assert.assertTrue("Version for '${domainClassName}' failed to increment on merge and flush directive", obj.getVersion() > currentVersion || !modified);
    }
    
    @Test
    @Transactional
    public void ${rooIntegrationTestClassName}.testPersist() {
        org.junit.Assert.assertNotNull("Data on demand for '${domainClassName}' failed to initialize correctly", dod.getRandom${domainClassName}());
        ${importDomainObject} obj = dod.getNewTransientAddress(Integer.MAX_VALUE);
        org.junit.Assert.assertNotNull("Data on demand for '${domainClassName}' failed to provide a new transient entity", obj);
        org.junit.Assert.assertNull("Expected '${domainClassName}' identifier to be null", obj.getAddressid());
        obj.persist();
        obj.flush();
        org.junit.Assert.assertNotNull("Expected '${domainClassName}' identifier to no longer be null", obj.getAddressid());
    }
    
    @Test
    @Transactional
    public void ${rooIntegrationTestClassName}.testRemove() {
        org.junit.Assert.assertNotNull("Data on demand for '${domainClassName}' failed to initialize correctly", dod.getRandom${domainClassName}());
        java.lang.Integer id = dod.getRandom${domainClassName}().getAddressid();
        org.junit.Assert.assertNotNull("Data on demand for '${domainClassName}' failed to provide an identifier", id);
        ${importDomainObject} obj = ${importDomainObject}.findAddress(id);
        org.junit.Assert.assertNotNull("Find method for '${domainClassName}' illegally returned null for id '" + id + "'", obj);
        obj.remove();
        org.junit.Assert.assertNull("Failed to remove '${domainClassName}' with identifier '" + id + "'", ${importDomainObject}.findAddress(id));
    }
    
}
