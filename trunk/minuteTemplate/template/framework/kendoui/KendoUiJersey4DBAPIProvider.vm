#exposeVariableModelSpecific()
package $packageName;

import com.sun.jersey.api.core.HttpContext;
import com.sun.jersey.api.model.Parameter;
import com.sun.jersey.core.spi.component.ComponentContext;
import com.sun.jersey.core.spi.component.ComponentScope;
import com.sun.jersey.server.impl.inject.AbstractHttpContextInjectable;
import com.sun.jersey.spi.inject.Injectable;
import com.sun.jersey.spi.inject.InjectableProvider;
import net.sf.minuteProject.architecture.bsla.domain.AbstractDomainObject;

import net.sf.minuteProject.model.data.criteria.EntityCriteria;
import net.sf.minuteProject.model.data.criteria.EntitySort;
import net.sf.minuteProject.model.data.criteria.QueryData;
import net.sf.minuteProject.model.data.criteria.constant.EntityMatchType;
import net.sf.minuteProject.model.data.criteria.constant.OperandType;
import net.sf.minuteProject.model.data.criteria.constant.QuerySortOrder;

import javax.ws.rs.core.Context;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.ext.Provider;
import java.io.Serializable;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

@Provider
public abstract class $className <T extends AbstractDomainObject> implements InjectableProvider<Context, Parameter> {

    public ComponentScope getScope() {
        return ComponentScope.PerRequest;
    }

    public Injectable getInjectable(ComponentContext ic, Context context, Parameter parameter) {
//        Integer i = 0;
//        if (QueryModel.class.isAssignableFrom(parameter.getParameterClass())) {
        return new AbstractHttpContextInjectable<QueryData<T>>() {
            @Override
            public QueryData<T> getValue(HttpContext context) {
                MultivaluedMap<String, String> parameters = context.getUriInfo().getQueryParameters();

                Integer first = extractInteger(parameters, "page");
                Integer pageSize = extractInteger(parameters, "pageSize");
                Integer skip = extractInteger(parameters, "skip");
                Integer take = extractInteger(parameters, "take");
                ///
                QuerySortOrder order = getOrder(parameters);
                T esMask = getSortMask(parameters);

                EntitySort<T> es = new EntitySort<T>(esMask, order);

                T ecMask = getFilterMask(parameters);

                EntityCriteria<T> ec = new EntityCriteria<T>(ecMask, EntityMatchType.ALL, OperandType.CONTAINS, false);

                QueryData<T> data = new QueryData<T>(first, pageSize, es, ec);

/*
                queryModel.setSort(new ListExtractor<Sort>().extractList(parameters, new Extractor<Sort>() {
                    public Sort extract(MultivaluedMap<String, String> parameters, int index) {
                        List<String> fields = parameters.get("sort[" + index + "][field]");
                        List<String> dirs = parameters.get("sort[" + index + "][dir]");
                        if (fields != null && fields.size() > 0 && dirs != null && dirs.size() > 0) {
                            return new Sort(fields.get(0), dirs.get(0));
                        } else {
                            return null;
                        }
                    }
                }));

                queryModel.setFilters(new ListExtractor<Filter>().extractList(parameters, new Extractor<Filter>() {
                    public Filter extract(MultivaluedMap<String, String> parameters, int index) {
                        List<String> values = parameters.get("filter[filters][" + index + "][value]");
                        List<String> fields = parameters.get("filter[filters][" + index + "][field]");
                        List<String> operators = parameters.get("filter[filters][" + index + "][operator]");
                        String logic = parameters.getFirst("filter[logic]");
//                            List<String> aggregates = parameters.get("filter[" + index + "][aggregate]");
                        if ( fields != null && fields.size() > 0 ) {
                            return new Filter( fields, operators, values,logic);
                        } else {
                            return null;
                        }
                    }
                }));
                */

                return data;
            }
        };

    }


    protected QuerySortOrder getOrder(MultivaluedMap<String, String> parameters){
        return QuerySortOrder.ASC;
    }

    protected abstract T getSortMask(MultivaluedMap<String, String> parameters);

    protected abstract T getFilterMask(MultivaluedMap<String, String> parameters);

    protected abstract Object getRowKeyImplementation (T element);

    protected abstract T serviceLoad (String rowKey);

    protected interface Extractor<T> {
        T extract(MultivaluedMap<String, String> parameters, int index);
    }
 
    protected Integer extractInteger(MultivaluedMap<String, String> parameters, String parameter) {
        try {
            return Integer.parseInt(parameters.get(parameter).get(0));
        } catch (Exception e) {
            return null;
        }
    }
 
    protected class ListExtractor<T> {
            List<T> objects = new LinkedList<T>();
            protected List<T> extractList(MultivaluedMap<String, String> parameters, Extractor<T> extractor) {
            int i=0;
            while (true) {
                T object = extractor.extract(parameters, i);
                if (object != null) {
                    objects.add(object);
                } else {
                    return objects;
                }
                i++;
            }
        }
    }
}