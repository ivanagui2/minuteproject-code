#macro (exposePlaySpecific)
#set ($applicationPlay=$configuration.name)
#exposeVariableModelSpecific()
#set ($datasource = $model.dataModel.basicDataSource)
#end

#macro (exposeImportPlayParamParamsUML $tableDB)
#set ($importDomainObjectUML = $commonUtils.getEntityLevelTemplateFullPath($model, $tableDB, $template, $templatePlayDomainObject))
#end

#macro (exposeDOPlayParamParamsUML $tableDB)
#set ($domainObjectPlayUML = $commonUtils.getTemplateClassName($tableDB, $model, $templatePlayDomainObject))
#end

#macro (putPlayTemplateDefinition)
#set ($templatePlayDomainObject="PlayDomainObject")
#end

#macro (printPlayDomainImport)
#putPlayTemplateDefinition()
#foreach ($reference in $table.children)
#set ($thisTable = $reference.foreignTable)
#exposeImportPlayParamParamsUML($reference.foreignTable)
#if(!$thisTable.isManyToMany())
import $importDomainObjectUML;
#end
#end
#foreach ($reference in $table.parents)
#exposeImportPlayParamParamsUML($reference.foreignTable)
#set ($thisTable = $reference.foreignTable)
#if(!$thisTable.isManyToMany())
import $importDomainObjectUML;
#end
#end
#foreach ($reference in $childReferences)
#putReferenceParams()
#if($linktableDB.isManyToMany())
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
#exposeImportPlayParamParamsUML($targetTable)
import $importDomainObjectUML;
#end
#end
#end
#end
