#exposeVariableEntitySpecific()
#putJPA2TemplateDefinition()
#exposeEntityCache()
#exposeEnvironmentParams()
#exposeJPA2Specifics()
#addedAreas()
#groovify()
package $packageName;

$!updatedAreaImport
import java.sql.*;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;

#if($addDomainSpecificMethod)
import java.util.Map;
import java.util.Map.Entry;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import net.sf.minuteProject.architecture.bsla.domain.AbstractDomainObject;
#end
import java.io.Serializable;
import javax.persistence.*;
#if($addXmlBinding)
import javax.xml.bind.annotation.*;
#end
#exposeJPA2Import()
#exposeJPA2CompositeKeyImport()
#exposeJPA2EnumImport()

/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: Domain Object describing a ${className} entity</p>
 *
 */
@Entity (name="${className}")
@Table (name="\"${table.name}\"")
#set($nqVar = $jpa2Utils.getNamedQueryVariable($table))
@NamedQueries $annotationListTagBeginning
#set($selectChunk="SELECT $nqVar FROM ${className} $nqVar")
	 @NamedQuery(name="${className}.findAll", query="$selectChunk")
#foreach ($column in ${table.attributes})
#putColumnParamNaming()
	,@NamedQuery(name="${className}.findBy$columnClass", query="$selectChunk WHERE ${nqVar}.$columnVar = :$columnVar")
#if($convertUtils.isStringType($column.type))
	,@NamedQuery(name="${className}.findBy${columnClass}Containing", query="$selectChunk WHERE ${nqVar}.$columnVar like :$columnVar")
#end
#if ($isEmbedded)
#foreach($column in ${table.primaryKeyColumns})
#putColumnParamNaming()
#if(!$isForeignKey)
#set($columnCap = $formatUtils.upperCase(${columnClass}))
#set($nqVar = $jpa2Utils.getNamedQueryVariable($table))
#set($selectChunk="SELECT $nqVar FROM ${className} $nqVar")
	,@NamedQuery(name="${className}.findBy${columnClass}Containing", query="$selectChunk WHERE ${nqVar}.${columnVar}_ like :$columnVar")
#end
#end
#end
#addArea ("custom-queries")
#end
$annotationListTagEnding
#if($addXmlBinding)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(namespace="$packageName", name = "${className}")
@XmlRootElement(namespace="$packageName")
#end
#if($hasCache && $isCacheEnabled)
#if($jpa2ImplementationIsHibernate)
@org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.READ_WRITE)
#end
#if($jpa2ImplementationIsEclipseLink)
//eclipseLink configuration missing? Please contribute by providing the snippet
#end
#end
#addArea("custom-annotations")
#if($addDomainSpecificMethod)
public class ${className} extends AbstractDomainObject {
#else
public class ${className} implements Serializable {
#end
    private static final long serialVersionUID = 1L;
#putColumnDefaultValue()

    public static final String FIND_ALL = "${className}.findAll";
#foreach ($column in ${table.attributes})
#putColumnParamNaming()
#set($columnCap = $formatUtils.upperCase(${columnClass}))
    public static final String FIND_BY_$columnCap = "${className}.findBy$columnClass";
#if($convertUtils.isStringType($column.type))
    public static final String FIND_BY_${columnCap}_CONTAINING ="${className}.findBy${columnClass}Containing";
#end
#end
#if ($isEmbedded)
#foreach($column in ${table.primaryKeyColumns})
#putColumnParamNaming()
#if(!$isForeignKey)
#set($columnCap = $formatUtils.upperCase(${columnClass}))
    public static final String FIND_BY_${columnCap}_CONTAINING ="${className}.findBy${columnClass}Containing";
#end
#end
#end
	
#if ($isEmbedded)
    @EmbeddedId
##    $accessor ${embeddedIdClass} $embeddedIdVariable;
    public ${embeddedIdClass} $embeddedIdVariable; ##public for jpa2 mapping of fk referencing a field within embeddedId class
#foreach($column in ${table.primaryKeyColumns})
#putColumnParamNaming()
#if(!$isForeignKey)
    @Column(name="$column.name" #if($isLengthPrecisionColumn), length=$column.size#end #if($column.isRequired()), nullable=false#else, nullable=true#end #if($isColumnUnique), unique=true#else, unique=false#end , insertable=false, updatable=false)
    $accessor $columnType ${columnVar}_;
#end
#end
#else
#foreach($column in ${table.primaryKeyColumns})
#putColumnParamNaming()
#if (!$isMany2Many)
#if (!$isPkUserProvided && !$isView)
#if ($databaseUtils.isPrimaryKeyPolicySequence($table))
#set ($sequenceName = $databaseUtils.provideSequence($table))
    @SequenceGenerator(name = "${table.name}SEQ", sequenceName ="$sequenceName", allocationSize=1 )
#end
#end
    @Id @Column(name="$column.name" #if($isLengthPrecisionColumn),length=$column.size#end) 
#if (!$isMany2Many)
#if (!$isPkUserProvided && !$isView)
#if ($databaseUtils.isPrimaryKeyPolicySequence($table))
#set ($sequenceName = $databaseUtils.provideSequence($table))
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator="${table.name}SEQ") 
#elseif ($databaseUtils.isPrimaryKeyPolicyIncrement($table))
    @GeneratedValue(strategy = GenerationType.AUTO)
#elseif ($databaseUtils.isPrimaryKeyPolicyIdentity($table))
    @GeneratedValue(strategy = GenerationType.IDENTITY)
#elseif ($databaseUtils.isPrimaryKeyPolicyUUID($table) && $jpa2ImplementationIsHibernate)
    @GeneratedValue(generator = "system-uuid")
    @org.hibernate.annotations.GenericGenerator(name = "system-uuid", strategy = "uuid")
#end
#end
#end
#end
#putJPA2Temporal()
#if($addXmlBinding)
#exposeXmlElementValue()
    @XmlElement $!xmlElementValue
#end
    $accessor $columnType $columnVar;

#end
#end
#foreach ($column in ${table.attributes})
#fieldAnnotationAddedAreas()
#updatedColumnAttributeAreas()
$!updatedAreaBegin
#if($isUpdated)
$updatedAreaSnippet
#else
#putColumnParamNaming()
#if($isEnum)
#set ($enumColumn = $columnUtils.getColumn($table, $column.name))
#set ($columnType = $enumUtils.getEnumType($template, $enumColumn))
##set($columnType=$enumClassName)
    @Enumerated #if($convertUtils.isStringType($column.type))(EnumType.STRING)
    @Column(name="$column.name") 
#end    
#else
#if ($isView)
    @Column(name="$column.name"  #if($isLengthPrecisionColumn), length=$column.size#end #if($column.isRequired()), nullable=false#else, nullable=true#end #if($isColumnUnique), unique=true#else, unique=false#end , insertable=false, updatable=false)
#else
    @Column(name="$column.name"  #if($isLengthPrecisionColumn), length=$column.size#end #if($column.isRequired()), nullable=false#else, nullable=true#end #if($isColumnUnique), unique=true#else, unique=false#end)
#end
#if ($column.isLob())
    @Lob @Basic(fetch=FetchType.LAZY) 
#exposeLobProperties()
#end
#end
#if($addXmlBinding)
#exposeXmlElementValue()
    @XmlElement $!xmlElementValue
#end
#if ($column.isVersion())
	@Version
#end
#putJPA2Temporal()
    $accessor $columnType $columnVar; 
#end
$!updatedAreaEnd

#end
#foreach ($reference in $table.parents)
#putReferenceParams2()
#if($isFieldRelationshipPersistence)
#set($insertableUpdatableRelationship=", insertable=false, updatable=false")
#set($insertableUpdatableField=", insertable=true, updatable=true")
#else
#set($insertableUpdatableRelationship=", insertable=true, updatable=true")
#set($insertableUpdatableField=", insertable=false, updatable=false")
#end
#if ($referenceUtils.isReferenceInPrimaryKey($reference) && $tableUtils.isCompositePrimaryKeyNotMany2Many($table))
#set($insertableUpdatableRelationship=", insertable=true, updatable=true")
#set($insertableUpdatableField=", insertable=false, updatable=false")
    @MapsId ("$localColumnName")
#end
#set($fetchType=$jpa2Utils.getFetchType($template, $reference))
    @ManyToOne (fetch=FetchType.$fetchType #if ($isMandatory && !$table.isLinkEntity()), optional=false#end)
    @JoinColumn(name="$localColumnName", referencedColumnName = "$reference.foreignColumnName" #if($localColumn.isRequired()), nullable=false#else, nullable=true#end #if($isColumnUnique), unique=true #else, unique=false#end $insertableUpdatableRelationship) 
#exposeRelationship($table, $reference)
#set($colVar = $commonUtils.getColumnAliasVariable($table, $reference))
    $accessor $linkedTableClass ${colVar};  

#set($column = $reference.localColumn)
#putColumnParamNaming()
#if($addXmlBinding)
#exposeXmlElementValue()
    @XmlAttribute $!xmlElementValue
#end
    @Column(name="$column.name" #if($isLengthPrecisionColumn), length=$column.size#end #if($column.isRequired()), nullable=false#else, nullable=true#end #if($isColumnUnique), unique=true#else, unique=false#end$insertableUpdatableField)
    $accessor $columnType ${colVar}_;

#end	
#foreach ($reference in $table.children)
#putReferenceParams2()
#exposeEntityUpdatedAreas("${childrenListVariable}-field")
#if(!$linktableDB.isManyToMany())
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
#set ($importDomainObjectForeignTable = $commonUtils.getEntityLevelTemplateFullPath($model, $linktableDB, $template, $templateJPA2DomainObject))
#set ($targetEntityClass="${importDomainObjectForeignTable}.class")
#exposeEnrichedPk(${reference.column})
#if (!$isEnrichedPk)
#set ($foreignColumnVar = $formatUtils.getJavaNameVariable($columnDB.name))
#else
#set ($foreignColumnVar = $domainVariableName)
#end
#if($addXmlBinding)
    @XmlElement (name="$i18nUtils.singularize($childrenListVariable)")
#end
#if($jpa2Utils.isEmbedded($linktableDB)) 
#if($columnUtils.isPartOfCompositePrimaryKey($reference.foreignColumn))
#set ($targetEmbeddedIdClass = $commonUtils.getTemplateClassName($linktableDB, $model, $templateJPA2EmbeddedId))
#set ($targetEmbeddedIdVariable = $commonUtils.getJavaNameVariableFirstLetter($targetEmbeddedIdClass))
#set($linkedColumnVariable = "${targetEmbeddedIdVariable}__.${linkedColumnVariable}")
#end
#end
    @OneToMany (targetEntity=$targetEntityClass, fetch=FetchType.LAZY, mappedBy="$linkedColumnVariable"#if (!$reference.column.isRequired() || $reference.table.isLinkEntity()), cascade=CascadeType.REMOVE#end)//, cascade=CascadeType.ALL)
    $accessor Set <$linkedTableClass> $childrenListVariable = new HashSet<$linkedTableClass>(); 

#end
#end
#if(!$linktableDB.isManyToMany())
$!updatedAreaEnd
#end
#end
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
#exposeEntityUpdatedAreas("m2m-$childrenListVariable")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
#exposeImportParamsUML($targetTable)
#set($targetColumn=$enrichmentUtils.getOtherColumn($linkedTableDB, $linkReference.localColumn))
#if($addXmlBinding)
#if($isMasterRelationship)
    @XmlElement (name="$i18nUtils.singularize($childrenListVariable)")
#else
    @XmlTransient
#end
#end
    @ManyToMany
    @JoinTable(name="$linkedTableDBName", 
        joinColumns=@JoinColumn(name="$targetColumn.name"), 
        inverseJoinColumns=@JoinColumn(name="$linkReference.localColumnName") 
    )
    $accessor Set <$targetTableName> $childrenListVariable = new HashSet <$targetTableName> ();

#end
#updatedAreaEnd()
#end
    /**
    * Default constructor
    */
    public ${className}() {
    }

	/**
	* All field constructor 
	*/
    public ${className}(
#foreach ($column in ${table.columns})
#putColumnParamNaming()
#if ($column.isLob())
#exposeLobProperties()
#elseif($useTemporal && $isTimeColumn)
#set($columnType="java.util.Date")
#end
       $columnType $columnVar#if ($velocityCount!=$table.columnCount),
#end
#end	
) {
	 this(
#foreach ($column in ${table.columns})
#putColumnParamNaming()
#if ($column.isLob())
#exposeLobProperties()
#elseif($useTemporal && $isTimeColumn)
#set($columnType="java.util.Date")
#end
       $columnVar#if ($velocityCount!=$table.columnCount),
#end
#end

	 ,true);
	}
    
	public ${className}(
#foreach ($column in ${table.columns})
#putColumnParamNaming()
#if ($column.isLob())
#exposeLobProperties()
#elseif($useTemporal && $isTimeColumn)
#set($columnType="java.util.Date")
#end
       $columnType $columnVar#if ($velocityCount!=$table.columnCount),
#end
#end
	
    , boolean setRelationship) {
       //primary keys
#if ($tableUtils.isCompositePrimaryKeyNotMany2Many($table))
       this.$embeddedIdVariable = new ${embeddedIdClass}();  	
#foreach($column in $tableUtils.getPrimaryKeyNotForeignKeyColumns($table))
#putColumnParamNaming()
#set($locColumn=$columnUtils.getColumn($table, $column.name))
#set($fieldVar=$formatUtils.getJavaNameVariable($locColumn.alias))
       this.${embeddedIdVariable}.set$columnClass ($fieldVar);
#end
#else
#foreach($column in ${table.primaryKeyColumns})
#putColumnParamNaming()
       set$columnClass ($columnVar);
#end
#end	
       //attributes
#foreach ($column in ${table.attributes})
#putColumnParamNaming()
#if($isEnum)
#set ($enumColumn = $columnUtils.getColumn($table, $column.name))
#set ($enumClassName = $enumUtils.getEnumType($template, $enumColumn))
       set$columnClass (${enumClassName}.fromValue($columnVar));
#else
       set$columnClass ($columnVar);
#end
#end
       //parents
#foreach ($reference in $table.parents)
#putReferenceParams2()
#columnJavaNaming()
#exposeRelationship($table, $reference)
#set($colVar = $commonUtils.getColumnAliasVariable($table, $reference))
#set($colClass= $commonUtils.getColumnAliasClassName($table, $reference))
##set($colVar=$formatUtils.getJavaNameVariable($referenceUtils.getColumnAlias(${reference.foreignTable}, ${reference.foreignColumn})))
##       if (setRelationship) this.${colVar} = new $linkedTableClass();
#if($localColumnType==$linkedColumnType)   
## setter is the one of the linked table
#set($columnClass=$referenceUtils.getColumnClassNameForLinkTable($database, $linkedColumn))
#set($locColumn=$columnUtils.getColumn($table, $localColumn.name))
#set($fieldVar=$formatUtils.getJavaNameVariable($locColumn.alias))
#columnJavaNaming()
       if (setRelationship && $fieldVar!=null) {
          this.${colVar} = new $linkedTableClass();
          this.${colVar}.set$columnClass($fieldVar);
#if(!$isPrimaryKey)
	      set${colClass}_ (${fieldVar});
#end 
       }
#else
       // the datamodel type of foreignkey and primary are not equals, please adapt
#end
#end
    }

	public ${className} flat() {
	   return new ${className}(
#foreach ($column in ${table.columns})
#putColumnParamNaming()
#if ($columnUtils.belongsToCompositePrimaryKeyNotMany2Many($column))
#set($columnClass=$columnUtils.getPrimaryKeyClassName($table, $column.name))
		  get${embeddedIdClassGetSet}().get$columnClass()#if ($velocityCount!=$table.columnCount),
#end
#else
#if($column.isPrimaryKey())
#set($columnClass=$columnUtils.getPrimaryKeyClassName($table,$column.name))
#elseif($columnUtils.isForeignKey($column))
#set($reference=$referenceUtils.getReference($column))
#set($columnClass = $commonUtils.getColumnAliasClassName($table, $reference))
#set($columnClass="${columnClass}_")
#end
#if($isEnum)
##          get$columnClass().toString()#if ($velocityCount!=$table.columnCount),
          (get$columnClass()==null)?null:get$columnClass().toString()#if ($velocityCount!=$table.columnCount),
#end
#else
#if ($isEmbedded && $tableUtils.isPartOfEmbeddedAnNotForeignKey($column))
#set($columnClass=$columnClass+"_")
#end
          get$columnClass()#if ($velocityCount!=$table.columnCount),
#end
#end
#end
#end

       , false
	   );
	}

#####
#if($addDomainSpecificMethod)
    /**
    * display semanticReference with attribute inside class
    */
	public String display() {
#putSemanticReference("this")
	}
	
#if($tableUtils.doesNotHaveVariable($table, "display"))
    public String getDisplay() {
		return display();
	}
#end
    /**
    * toString implementation
    */
	public String toString() {
		return toString(this);
	}

	public ToStringBuilder getToStringBuilder(Object object) {
	 	return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)
#foreach($column in ${table.primaryKeyColumns})
#putColumnParamNaming()
            .append("$columnVar", $columnVar)
#end
#foreach ($column in ${table.columns})
#if(!$column.isPrimaryKey())
#if($columnUtils.isColumnEmbeddedInEntity($column))
#putColumnParamNaming()
#if($columnUtils.isForeignKey($column))
#set($columnVar="${columnVar}_")
#end
            .append("$columnVar", $columnVar)
#end
#end
#end
	 	;
	} 
		
	public String toString(Object object) {
	 	return getToStringBuilder(object).toString();
	} 
	
	public String toStringWithParents() {
	    ToStringBuilder toStringBuilder = getToStringBuilder(this);
#foreach ($reference in $table.parents)
#putReferenceParams2()
#columnJavaNaming()
#set($colVar = $commonUtils.getColumnAliasVariable($table, $reference))
        if ($colVar!=null)
            toStringBuilder.append("${colVar}", ${colVar}.toStringWithParents());
#end
	 	return toStringBuilder.toString();	
	}
	/**
    * hashCode implementation
    */
	public int hashCode() {
		return new HashCodeBuilder(17,31).
                append(display()).
                toHashCode();
##		return HashCodeBuilder.reflectionHashCode(flat());
	}
	
#set($variableName = $formatUtils.getJavaNameVariableConvertReservedWord($variableName))
	public boolean equals(Object object) {
		if (object == null) return false;	
		if (object == this) return true;
		if (!(object instanceof ${className})) return false;
		${className} ${variableName} = (${className}) object;
#if ($tableUtils.isCompositePrimaryKeyNotMany2Many($table))
// not supported yet for composite pk
#else
#foreach($column in ${table.primaryKeyColumns})
#putColumnParamNaming()
		if (${variableName}.${columnVar}==null || !${variableName}.${columnVar}.equals(${columnVar})) return false;
#end
#end
		return true;
	}    

	public boolean equalsMask(Object object) {
		if (object == null) return false;	
		if (object == this) return true;
		if (!(object instanceof ${className})) return false;
		${className} ${variableName} = (${className}) object;
#if ($tableUtils.isCompositePrimaryKeyNotMany2Many($table))
// not supported yet for composite pk
#else
#foreach($column in ${table.primaryKeyColumns})
#putColumnParamNaming()
		if (${columnVar}!=null && ${variableName}.${columnVar}!=null && !${variableName}.${columnVar}.equals(${columnVar})) return false;
		if ((${variableName}.${columnVar}!=null && ${columnVar}==null) || (${variableName}.${columnVar}==null && ${columnVar}!=null)) return false;
#end
#foreach($column in ${table.columns})
#if(!$column.isPrimaryKey())
#putColumnParamNaming()
		if (${columnVar}!=null && ${variableName}.${columnVar}!=null && !${variableName}.${columnVar}.equals(${columnVar})) return false;
		if ((${variableName}.${columnVar}!=null && ${columnVar}==null) || (${variableName}.${columnVar}==null && ${columnVar}!=null)) return false;
#end
#end
#end
		return true;
	}

	public ${className} clone() {
        ${className} ${variableName} = flat();
#foreach ($reference in $table.parents)
#putReferenceParams2()
#exposeRelationship($table, $reference)
#set($localColumnVariable = $commonUtils.getColumnAliasVariable($table, $reference))
#set($localColumnClass = $commonUtils.getColumnAliasClass($table, $reference))
#if ($isEmbedded && $tableUtils.isPartOfEmbeddedAnNotForeignKey($column))
#set($columnClass=$columnClass+"_")
#end
        if (get${localColumnClass}()!=null) 
            ${variableName}.set${localColumnClass} (get${localColumnClass}().clone());   
#end	   
        return ${variableName};
	}
	
	public void copy (${className} ${variableName}) {
		if (${variableName}!=null) {
#foreach($column in ${table.primaryKeyColumns})
#putColumnParamNaming()
			set$columnClass (${variableName}.get$columnClass());
#end
#foreach ($column in ${table.columns})
#if(!$column.isPrimaryKey())
#if($columnUtils.isColumnEmbeddedInEntity($column))
#putColumnParamNaming()
			set$columnClass (${variableName}.get$columnClass());
#end
#end
#end
		}
	}
	
	public static ${className} fullMask() {
		return new ${className}(
#foreach ($column in ${table.columns})
#putDefaultMaskColumnValue()
			$defaultMask #if ($velocityCount!=$table.columnCount),
#end
#end
		);
	}

    public ${className} maskString(Map<String, String> filter) {
        for (Entry<String, String> set : filter.entrySet()) {
            mask(set.getKey(), getEntry(set.getKey(), set.getValue()));
        }
        return this;
    }
    
    public Object getEntry(String pattern, String value) {
        if(pattern==null || value==null) return null;
#foreach ($column in ${table.columns})
#putColumnParamNaming()
#if ($columnUtils.isString($column) && !$isEnum)
        if ("${columnVar}".equals(pattern))
           return value;
#else
#if($isEnum)
		if ("${columnVar}".equals(pattern))
           return value;
#else
#set($key=$convertUtils.getJavaTypeMaskExpressionFromStringInput($column, "value", $useTemporal))
    	if ("${columnVar}".equals(pattern))
           return $key;
#end
#end
#end
        return null;
    }	
				
    public ${className} mask(Map<String, Object> filter) {
        for (Entry<String, Object> set : filter.entrySet()) {
            mask(set.getKey(), set.getValue());
        }
        return this;
    }
    
    public ${className} mask(String pattern, Object value) {
        if(pattern==null || value==null) return this;
#foreach ($column in ${table.columns})
#putColumnParamNaming()
#if ($columnUtils.isString($column) && !$isEnum && !$isForeignKey)
#if ($isEmbedded && $tableUtils.isPartOfEmbeddedAnNotForeignKey($column))
#set($columnClass=$columnClass+"_")
#end
        if ("${columnVar}".equals(pattern)) {
           set$columnClass(value.toString());
		   return this;
		}
#else
#if($column.isPrimaryKey())
#set($columnClass=$columnUtils.getPrimaryKeyClassName($table,$column.name))
#elseif($columnUtils.isForeignKey($column))
#set($reference=$referenceUtils.getReference($column))
#set($columnClass = $commonUtils.getColumnAliasClassName($table, $reference))
#set($columnClass="${columnClass}_")
#end
#if($isEnum)
		if ("${columnVar}".equals(pattern)) {
           set$columnClass(value.toString());
		   return this;
		}
#else
#if ($isEmbedded && $tableUtils.isPartOfEmbeddedAnNotForeignKey($column))
#set($columnClass=$columnClass+"_")
#end
#set($key=$convertUtils.getJavaTypeCastExpression($column, "value", $useTemporal))
		if ("${columnVar}".equals(pattern)) {
           set$columnClass($key);
		   return this;
		}
#end
#end
#end
        return this;
    }

    public ${className} mask(String pattern) {
        if(pattern==null) return this;
#foreach ($column in ${table.columns})
#putColumnParamNaming()
#if ($columnUtils.isString($column) && !$isEnum && !$isForeignKey)
#putDefaultMaskColumnValue()
#if ($isEmbedded && $tableUtils.isPartOfEmbeddedAnNotForeignKey($column))
#set($columnClass=$columnClass+"_")
#end
        if ("${columnVar}".equals(pattern))
           set$columnClass($defaultMask);
#end
#end
        return this;
    }

	public void assignNullToBlank () {
#foreach ($column in ${table.columns})
#putColumnParamNaming()
#if ($columnType=="String" && !$isEnum && !$isForeignKey)
#if ($isEmbedded && $tableUtils.isPartOfEmbeddedAnNotForeignKey($column))
#set($columnClass=$columnClass+"_")
#end
        if (StringUtils.isEmpty(get$columnClass()))
           set$columnClass(null);
#end
#end	
	}

#end
### end addDomainSpecificMethod
### setter-getter-adder
#if(!$groovify)
#if ($isMany2Many)
    public ${className} get${className} () {
    	return this;
    }

    public void set${className} (${className} ${variableName}) {
    	new ${className}(
#foreach ($column in ${table.columns})
#putColumnParamNaming()
       ${variableName}.get_${columnVar}()#if ($velocityCount!=$table.columnCount),
#end
#end 		
		);
    }
    
#end   
#if ($tableUtils.isCompositePrimaryKeyNotMany2Many($table))
#* #if ($isEmbedded)
#set($embeddedIdClassGetSet=$embeddedIdClass+"_")
#else
#set($embeddedIdClassGetSet=$embeddedIdClass)
#end
*#
    public $embeddedIdClass get$embeddedIdClassGetSet() {
		if ($embeddedIdVariable==null) $embeddedIdVariable = new $embeddedIdClass();
        return $embeddedIdVariable;
    }
	
    public void set$embeddedIdClassGetSet ($embeddedIdClass $embeddedIdVariable) {
        this.$embeddedIdVariable =  $embeddedIdVariable;
    }
#foreach($column in ${table.primaryKeyColumns})
#putColumnParamNaming()
#if(!$isForeignKey)
    public $columnType get${columnClass}_() {
        return ${columnVar}_;
    }
	
    public void set${columnClass}_ ($columnType $columnVar) {
        this.${columnVar}_ =  ${columnVar}_;
    }
    
#end
#end
#else 
#foreach($column in ${table.primaryKeyColumns})
#putColumnParamNaming()
    public $columnType get$columnClass() {
        return $columnVar;
    }
	
    public void set$columnClass ($columnType $columnVar) {
        this.$columnVar =  $columnVar;
    }
    
#end
#end
#foreach ($column in ${table.attributes})
#updatedColumnGetterSetterAreas()
$!updatedAreaBegin
#if($isUpdated)
$updatedAreaSnippet
#else
#putColumnParamNaming()
#if ($column.isLob())
#exposeLobProperties()
#end
#if($isEnum)
#set($originType=$columnType)
#set ($enumColumn = $columnUtils.getColumn($table, $column.name))
#set ($columnType = $enumUtils.getEnumType($template, $enumColumn))
##set($columnType=$enumClassName)
#end
#if($useTemporal && $isTimeColumn)
#set($columnType="java.util.Date")
#end
    public $columnType get$columnClass() {
        return $columnVar;
    }
	
    public void set$columnClass ($columnType $columnVar) {
        this.$columnVar =  $columnVar;
    }
	
#if($isEnum)
    public void set$columnClass ($originType $columnVar) {
        this.$columnVar =  ${columnType}.fromValue($columnVar);
    } 
#end
#end
$!updatedAreaEnd

#end

#foreach ($reference in $table.parents)
#putReferenceParams2()
#exposeRelationship($table, $reference)
#set($localColumnVariable = $commonUtils.getColumnAliasVariable($table, $reference))
#set($localColumnClass = $commonUtils.getColumnAliasClass($table, $reference))
#set($colVar = $commonUtils.getColumnAliasVariable($table, $reference))
#set($colClass = $commonUtils.getColumnAliasClassName($table, $reference))
    public $linkedTableClass get$colClass () {
    	return ${localColumnVariable};
    }
	
    public void set${colClass} ($linkedTableClass ${localColumnVariable}) {
    	this.${localColumnVariable} = ${localColumnVariable};
    }

#set($column = $reference.localColumn)
#putColumnParamNaming()
    public $columnType get${colClass}_() {
        return ${colVar}_;
    }
	
    public void set${colClass}_ ($columnType $colVar) {
        this.${colVar}_ =  $colVar;
    }
	
#end

#foreach ($reference in $table.children)
#putReferenceParams2()
#exposeEntityUpdatedAreas("${childrenListVariable}-getter")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
#if(!$linktableDB.isManyToMany())
##if($addXmlBinding)
##    @XmlElement(name="$childrenListVariable")
##end
#set($linkedTableVariable = $formatUtils.getJavaNameVariableConvertReservedWord($linkedTableVariable))
    public Set<$linkedTableClass> get${childrenListClass}() {
        if (${childrenListVariable} == null){
            ${childrenListVariable} = new HashSet<$linkedTableClass>();
        }
        return ${childrenListVariable};
    }

    public void set${childrenListClass} (Set<$linkedTableClass> ${childrenListVariable}) {
        this.${childrenListVariable} = ${childrenListVariable};
    }	
    
    public void add${childrenListClass} ($linkedTableClass element) {
    	    get${childrenListClass}().add(element);
    }
    
#end    
#end
$!updatedAreaEnd
#end

#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
    public Set<$targetTableName> get${childrenListClass}() {
        if (${childrenListVariable} == null){
            ${childrenListVariable} = new HashSet<$targetTableName>();
        }
        return ${childrenListVariable};
    }

    public void set${childrenListClass} (Set<$targetTableName> ${childrenListVariable}) {
        this.${childrenListVariable} = ${childrenListVariable};
    }
    	
    public void add${childrenListClass} ($targetTableName element) {
        get${childrenListClass}().add(element);
    }
	
#end
#end 
## getter-setter-adder
#putJPA2TriggerSnippet()

$!updatedAreaImplementation

}
