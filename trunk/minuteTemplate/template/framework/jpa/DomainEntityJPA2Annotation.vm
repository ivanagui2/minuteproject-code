#exposeVariableEntitySpecific()
#putJPA2TemplateDefinition()
#exposeEnvironmentParams()
#addedAreas()
package $packageName;

$!updatedAreaImport
import java.sql.*;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;

import java.io.Serializable;
import javax.persistence.*;
#if($addXmlBinding)
import javax.xml.bind.annotation.*;
#end
#exposeJPA2Import()
#exposeJPA2CompositeKeyImport()
#exposeJPA2EnumImport()

/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: Domain Object describing a ${className} entity</p>
 *
 */
@Entity (name="${className}")
@Table (name="${table.name}")
@NamedQueries({
#set($selectChunk="SELECT $domainVariableName FROM ${className} $domainVariableName")
	 @NamedQuery(name="${className}.findAll", query="$selectChunk")
#foreach ($column in ${table.attributes})
#putColumnParams()
#columnJavaNaming()
	,@NamedQuery(name="${className}.findBy$columnClass", query="$selectChunk WHERE ${domainVariableName}.$columnVar = :$columnVar")
#if($convertUtils.isStringType($column.type))
	,@NamedQuery(name="${className}.findBy${columnClass}Containing", query="$selectChunk WHERE ${domainVariableName}.$columnVar like :$columnVar")
#end
#end
}) 
#if($addXmlBinding)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(namespace="$packageName", name = "${className}")
@XmlRootElement(namespace="$packageName")
#end
public class ${className} implements Serializable {

    private static final long serialVersionUID = 1L;
	
    public  static final String FIND_ALL = "${className}.findAll";
#foreach ($column in ${table.attributes})
#putColumnParams()
#columnJavaNaming()
#set($columnCap = $formatUtils.upperCase(${columnClass}))
    public static final String FIND_BY_$columnCap = "${className}.findBy$columnClass";
#if($convertUtils.isStringType($column.type))
    public static final String FIND_BY_${columnCap}_CONTAINING ="${className}.findBy${columnClass}Containing";
#end
#end	
	
#if ($tableUtils.isCompositePrimaryKeyNotMany2Many($table))
    @EmbeddedId
    private ${embeddedIdClass} $embeddedIdVariable;
    
#else
#foreach($column in ${table.primaryKeyColumns})
#putColumnParams()
#columnJavaNaming()
#if (!$isMany2Many)
#if (!$isPkUserProvided)
#if ($databaseUtils.isPrimaryKeyPolicySequence($table))
#set ($sequenceName = $databaseUtils.provideSequence($table))
    @SequenceGenerator(name = "${table.name}SEQ", sequenceName ="$sequenceName", allocationSize=1 )
#end
#end
    @Id @Column(name="$column.name" #if($isLengthPrecisionColumn),length=$column.size#end)
#if (!$isMany2Many)
#if (!$isPkUserProvided)
#if ($databaseUtils.isPrimaryKeyPolicySequence($table))
#set ($sequenceName = $databaseUtils.provideSequence($table))
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator="${table.name}SEQ") 
#elseif ($databaseUtils.isPrimaryKeyPolicyIncrement($table))
    @GeneratedValue(strategy = GenerationType.AUTO)
#end
#end
#end
#end
#if($addXmlBinding)
#exposeXmlElementValue()
    @XmlElement $!xmlElementValue
#end
    private $columnType $columnVar;

#end
#end
#foreach ($column in ${table.attributes})
#fieldAnnotationAddedAreas()
#updatedColumnAttributeAreas()
$!updatedAreaBegin
#if($isUpdated)
$updatedAreaSnippet
#else
#putColumnParams()
#columnJavaNaming()
#if($isEnum)
#set($columnType=$enumClassName)
    @Enumerated #if($convertUtils.isStringType($column.type))(EnumType.STRING)
    @Column(name="$column.name")
#end    
#else
#if ($isView)
    @Column(name="$column.name",  #if($isLengthPrecisionColumn)length=$column.size,#end #if($column.isRequired())nullable=false#else nullable=true#end, #if($isColumnUnique)unique=true,#else unique=false,#end insertable=false, updatable=false)
#else
    @Column(name="$column.name",  #if($isLengthPrecisionColumn)length=$column.size,#end #if($column.isRequired())nullable=false#else nullable=true#end, #if($isColumnUnique)unique=true#else unique=false#end)
#end
#if ($column.isLob())
    @Lob
#exposeLobProperties()
#if ($convertClobToString=="true")
#set($columnType="String")
#end
#end
#end
#if($addXmlBinding)
#exposeXmlElementValue()
    @XmlElement $!xmlElementValue
#end
#if($useTemporal && $isTimeColumn)
#set($columnType="java.util.Date")
    @Temporal(TemporalType.${column.type})
#end
    private $columnType $columnVar; 
#end
$!updatedAreaEnd

#end
#foreach ($reference in $table.parents)
#putReferenceParams2()
#if ($referenceUtils.isReferenceInPrimaryKey($reference) && $tableUtils.isCompositePrimaryKeyNotMany2Many($table))
    @MapsId ("$localColumnName")
#end
    @ManyToOne (fetch=FetchType.LAZY #if ($isMandatory && !$table.isLinkEntity()), optional=false#end)
    @JoinColumn(name="$localColumnName", referencedColumnName = "$reference.foreignColumnName", #if($localColumn.isRequired())nullable=false#else nullable=true#end, #if($isColumnUnique)unique=true #else unique=false #end) 
##exposeEnrichedPk($localColumn)
#exposeRelationship($table, $reference)
#if (!$isParentRelationshipSimplificable)
#set($colVar = ${localColumnVariable})
#else
#set($colVar = ${linkedTableVariable})
#end
#set($colVar = $commonUtils.getColumnNameVariable($table, $reference))
##exposeRelationship($table, $reference)
    private $linkedTableClass ${colVar}; ##//${localColumnVariable} - ${linkedTableVariable} 

#set($column = $reference.localColumn)
#putColumnParams()
#columnJavaNaming()
#if($addXmlBinding)
#exposeXmlElementValue()
    @XmlAttribute $!xmlElementValue
#end
    @Column(name="$column.name", #if($isLengthPrecisionColumn)length=$column.size,#end #if($column.isRequired())nullable=false#else nullable=true#end, #if($isColumnUnique)unique=true,#else unique=false,#end insertable=false, updatable=false)
    private $columnType ${columnVar}_;
	
#end	
#foreach ($reference in $table.children)
#putReferenceParams2()
#if(!$linktableDB.isManyToMany())
#set ($importDomainObjectForeignTable = $commonUtils.getEntityLevelTemplateFullPath($model, $linktableDB, $template, $templateJPA2DomainObject))
#set ($targetEntityClass="${importDomainObjectForeignTable}.class")
#exposeEnrichedPk(${reference.column})
#if (!$isEnrichedPk)
#set ($foreignColumnVar = $formatUtils.getJavaNameVariable($columnDB.name))
#else
#set ($foreignColumnVar = $domainVariableName)
#end
#if($addXmlBinding)
    @XmlElement (name="$i18nUtils.singularize($childrenListVariable)")
#end
##set($colVar = $commonUtils.getColumnNameVariable($table, $reference))
    @OneToMany (targetEntity=$targetEntityClass, fetch=FetchType.LAZY, mappedBy="$linkedColumnVariable"#if (!$reference.column.isRequired() || $reference.table.isLinkEntity()), cascade=CascadeType.REMOVE#end)//, cascade=CascadeType.ALL)
    private Set <$linkedTableClass> $childrenListVariable = new HashSet<$linkedTableClass>(); 
   
#end
#end
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
#exposeImportParamsUML($targetTable)
#set($targetColumn=$enrichmentUtils.getOtherColumn($linkedTableDB, $linkReference.localColumn))
#if($addXmlBinding)
#if($isMasterRelationship)
    @XmlElement (name="$i18nUtils.singularize($childrenListVariable)")
#else
    @XmlTransient
#end
#end
    @ManyToMany
    @JoinTable(name="$linkedTableDBName", 
        joinColumns=@JoinColumn(name="$targetColumn.name"), 
        inverseJoinColumns=@JoinColumn(name="$linkReference.localColumnName") 
    )
    private Set <$targetTableName> $childrenListVariable = new HashSet <$targetTableName> ();

#end
    /**
    * Default constructor
    */
    public ${className}() {
    }

	/**
	* All field constructor 
	*/
    public ${className}(
#foreach ($column in ${table.columns})
#putColumnParams()
#columnJavaNaming()
#if ($column.isLob() && $convertClobToString=="true")
#set($columnType="String")
#end
       $columnType $columnVar#if ($velocityCount!=$table.columnCount),
#end
#end	
) {
       //primary keys
#if ($tableUtils.isCompositePrimaryKeyNotMany2Many($table))
        $embeddedIdVariable = new ${embeddedIdClass}();  	
#foreach($column in $tableUtils.getPrimaryKeyNotForeignKeyColumns($table))
#putColumnParams()
#columnJavaNaming()	
        ${embeddedIdVariable}.set$columnClass ($columnVar);
#end
#else
#foreach($column in ${table.primaryKeyColumns})
#putColumnParams()
#columnJavaNaming()
       set$columnClass ($columnVar);
#end
#end	
       //attributes
#foreach ($column in ${table.attributes})
#putColumnParams()
#columnJavaNaming()
#if($isEnum)
       set$columnClass (${enumClassName}.fromValue($columnVar));
#else
       set$columnClass ($columnVar);
#end
#end
       //parents
#foreach ($reference in $table.parents)
#putReferenceParams2()
#columnJavaNaming()
#exposeRelationship($table, $reference)
#if (!$isParentRelationshipSimplificable)
#set($colVar = ${localColumnVariable})
#else
#set($colVar = ${linkedTableVariable})
#end
#set($colVar = $commonUtils.getColumnNameVariable($table, $reference))
       this.${colVar} = new $linkedTableClass();
#if($localColumnType==$linkedColumnType)   
## setter is the one of the linked table
#set($columnClass=$referenceUtils.getColumnClassNameForLinkTable($database, $linkedColumn))
##set($columnVar=$referenceUtils.getLocalColumnVariableName($database, $reference.localColumn))
##set($columnVar=$referenceUtils.getLocalColumnClassName($database, $reference.localColumn))
#set($columnVar=$referenceUtils.getColumnNameVariableForLinkTable($database, $localColumn))##$formatUtils.getJavaNameVariable($localColumnName.toLowerCase()))
##set($columnClass=$referenceUtils.getLocalColumnClassNameForLinkTable($database, $localColumn))
#columnJavaNaming()
       this.${colVar}.set$columnClass($columnVar); //$linkedTableClass $linkedColumn - local $localTableClass $localColumn
#else
       // the datamodel type of foreignkey and primary are not equals, please adapt
#end
#end
    }

	public ${className} flat() {
	   return new ${className}(
#foreach ($column in ${table.columns})
#putColumnParams()
#columnJavaNaming()
#if ($columnUtils.belongsToCompositePrimaryKeyNotMany2Many($column))
		  get${embeddedIdClass}().get$columnClass()#if ($velocityCount!=$table.columnCount),
#end
#else
#if($columnUtils.isForeignKey($column))
#set($columnClass="${columnClass}_")
#end
          get$columnClass()#if ($velocityCount!=$table.columnCount),
#end
#end
#end

	   );
	}

#if ($isMany2Many)
    public ${className} get${className} () {
    	return this;
    }

    public void set${className} (${className} ${variableName}) {
    	new ${className}(
#foreach ($column in ${table.columns})
#putColumnParams()
       ${variableName}.get_${columnVar}()#if ($velocityCount!=$table.columnCount),
#end
#end 		
		);
    }
    
#end   
#if ($tableUtils.isCompositePrimaryKeyNotMany2Many($table))
    public $embeddedIdClass get$embeddedIdClass() {
		if ($embeddedIdVariable==null) $embeddedIdVariable = new $embeddedIdClass();
        return $embeddedIdVariable;
    }
	
    public void set$embeddedIdClass ($embeddedIdClass $embeddedIdVariable) {
        this.$embeddedIdVariable =  $embeddedIdVariable;
    }
    
#else 
#foreach($column in ${table.primaryKeyColumns})
#putColumnParams()
#columnJavaNaming()
    public $columnType get$columnClass() {
        return $columnVar;
    }
	
    public void set$columnClass ($columnType $columnVar) {
        this.$columnVar =  $columnVar;
    }
    
#end
#end
#foreach ($column in ${table.attributes})
#updatedColumnGetterSetterAreas()
$!updatedAreaBegin
#if($isUpdated)
$updatedAreaSnippet
#else
#putColumnParams()
#columnJavaNaming()
#if ($column.isLob())
#exposeLobProperties()
#if ($convertClobToString=="true")
#set($columnType="String")
#end
#end
#if($isEnum)
#set($columnType=$enumClassName)
#end
#if($useTemporal && $isTimeColumn)
#set($columnType="java.util.Date")
#end
    public $columnType get$columnClass() {
        return $columnVar;
    }
	
    public void set$columnClass ($columnType $columnVar) {
        this.$columnVar =  $columnVar;
    }    
#end
$!updatedAreaEnd

#end

#foreach ($reference in $table.parents)
#putReferenceParams2()
#exposeRelationship($table, $reference)
#set($localColumnVariable = $commonUtils.getColumnNameVariable($table, $reference))
#set($localColumnClass = $commonUtils.getColumnNameClass($table, $reference))
    public $linkedTableClass get$localColumnClass () {
    	return ${localColumnVariable};
    }
	
    public void set${localColumnClass} ($linkedTableClass ${localColumnVariable}) {
    	this.${localColumnVariable} = ${localColumnVariable};
    }
##    
###if (!$isParentRelationshipSimplificable)
##    public $linkedTableClass get$localColumnClass () {
##    	return ${localColumnVariable};
####    }
##	
##    public void set${localColumnClass} ($linkedTableClass ${localColumnVariable}) {
##    	this.${localColumnVariable} = ${localColumnVariable};
##    }
##    
###else
##    public $linkedTableClass get${linkedTableClass} () { 
##    	return ${linkedTableVariable};
##    }
##	
##   public void set${linkedTableClass} ($linkedTableClass ${linkedTableVariable}) {
##    	this.${linkedTableVariable} = ${linkedTableVariable};
##    }
##    
##end 
##if($addXmlBinding)
## for attribute
#set($column = $reference.localColumn)
#putColumnParams()
#columnJavaNaming()
    public $columnType get${columnClass}_() {
        return ${columnVar}_;
    }
	
    public void set${columnClass}_ ($columnType $columnVar) {
        this.${columnVar}_ =  $columnVar;
    }
	
#end
##end
#foreach ($reference in $table.children)
#putReferenceParams2()
#if(!$linktableDB.isManyToMany())
##if($addXmlBinding)
##    @XmlElement(name="$childrenListVariable")
##end
    public Set<$linkedTableClass> get${childrenListClass}() {
        if (${childrenListVariable} == null){
            ${childrenListVariable} = new HashSet<$linkedTableClass>();
        }
        return ${childrenListVariable};
    }

    public void set${childrenListClass} (Set<$linkedTableClass> ${childrenListVariable}) {
        this.${childrenListVariable} = ${childrenListVariable};
    }	
    
    public void add${childrenListClass} ($linkedTableClass ${linkedTableVariable}) {
    	    get${childrenListClass}().add($linkedTableVariable);
    }
    
#end    
#end
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
    public Set<$targetTableName> get${childrenListClass}() {
        if (${childrenListVariable} == null){
            ${childrenListVariable} = new HashSet<$targetTableName>();
        }
        return ${childrenListVariable};
    }

    public void set${childrenListClass} (Set<$targetTableName> ${childrenListVariable}) {
        this.${childrenListVariable} = ${childrenListVariable};
    }
    	
    public void add${childrenListClass} ($targetTableName ${childrenListVariable}) {
        get${childrenListClass}().add($childrenListVariable);
    }	    
#end

$!updatedAreaImplementation

}
