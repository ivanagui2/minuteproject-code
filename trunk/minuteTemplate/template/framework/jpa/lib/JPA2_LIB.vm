#macro (putJPA2TemplateDefinition)
#getTemplatePropertyValue("DomainEntityUMLTemplate")
#if (!$value.equals(""))
#set ($templateJPA2DomainObject=$value)
#else
#set ($templateJPA2DomainObject="DomainEntityJPA2Annotation")
#end
#end

#macro (exposeJPA2DomainObject $tableDB)
#putJPA2TemplateDefinition()
#set ($domainObjectClass = $commonUtils.getTemplateClassName($tableDB, $model, $templateJPA2DomainObject))
#set ($domainObjectVariable = $commonUtils.getJavaNameVariableFirstLetter($domainObjectClass))
#set ($importDomainObjectUML = $commonUtils.getEntityLevelTemplateFullPath($model, $tableDB, $template, $templateJPA2DomainObject))
#end

#macro (exposeJPA2Import)
#foreach ($reference in $table.children)
#set ($thisTable = $reference.foreignTable)
#exposeJPA2DomainObject($reference.foreignTable)
#if(!$thisTable.isManyToMany())
import $importDomainObjectUML;
#end
#end
#foreach ($reference in $table.parents)
#exposeJPA2DomainObject($reference.foreignTable)
#set ($thisTable = $reference.foreignTable)
#if(!$thisTable.isManyToMany())
import $importDomainObjectUML;
#end
#end
#foreach ($reference in $childReferences)
#putReferenceParams()
#if($linktableDB.isManyToMany())
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
#exposeJPA2DomainObject($targetTable)
import $importDomainObjectUML;
#end
#end
#end
#end