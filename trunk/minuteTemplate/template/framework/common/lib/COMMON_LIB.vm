#macro(generatorSpecific)
#if($configuration.isSingleModel())
#set($generatorBean=$model)
#else
#set($generatorBean=$configuration.application)
#end
#end

#macro(putReadmeText)
$readmeUtils.getReadme($template)
#end

#macro (asUML $table)
#set ($table = $tableUtils.asUML($table))
#end

#macro (exposeApplicationSpecific)
#set ($configuration = $model.configuration)
#set ($applicationName=$configuration.name)
#end

#macro (exposeVariableApplicationSpecific)
#exposeVariableModelDetailSpecific()
#end

#macro(exposeVariableFunctionSpecific)
#exposeVariableEntitySpecific()
#exposeFunction()
#set ($functionNameUpperCase=$routineUtils.getFunctionCallName($function))
#set ($functionCall=$routineUtils.getFunctionCall($function))
#end

#macro(exposeCompositeSpecific)
#set ($in = $commonUtils.getDirection("IN"))
#set ($out = $commonUtils.getDirection("OUT"))
#set ($packageName = $commonUtils.getPackageName($composite, $template))
#set ($className = $commonUtils.getClassName($composite, $template))
#set ($classVariableName = $formatUtils.firstLowerCase(${className}))
#end

#macro(exposeInputCompositeSpecific)
#set ($in = $commonUtils.getDirection("IN"))
#set ($out = $commonUtils.getDirection("OUT"))
#set ($packageName = $commonUtils.getPackageName($composite, $template))
#set ($className = $commonUtils.getClassName($composite, $template))
#set ($classVariableName = $formatUtils.firstLowerCase(${className}))
#end

#macro(exposeQuerySpecific)
#set ($packageName = $commonUtils.getPackageName($query, $template))
#set ($className = $commonUtils.getClassName($query, $template))
#set ($classVariableName = $formatUtils.firstLowerCase(${className}))
#set ($inputBean = $query.inputBean)
#set ($outputBean = $query.outputBean)
#set ($isNotVoidInput = !$inputBean.getColumns().isEmpty())
#end

#macro(exposeChartSpecific)
#set ($isChartLayout = $queryUtils.isChartLayout($query))
#set ($isPieChart = $queryUtils.isPieChart($query))
#set ($isBarChart = $queryUtils.isBarChart($query))
#set ($isColumnChart = $queryUtils.isColumnChart($query))
#set ($outputBeanColumnDimension1 = $queryUtils.getOutputBeanDimension($query,0))
#set ($outputBeanColumnValue = $queryUtils.getOutputBeanValue($query))
#set ($outputBeanDimension1 = $formatUtils.getJavaName($outputBeanColumnDimension1.alias))
#set ($outputBeanDimension1Var = $commonUtils.getJavaNameVariableFirstLetter($outputBeanDimension1))
#set ($outputBeanDimensionValue = $formatUtils.getJavaName($outputBeanColumnValue.alias))
#set ($dimensions = $queryUtils.getOutputBeanDimension($query))
#end

#macro(exposeStatementParam)
#set($javaType=$statementUtils.getJavaType($param))	
#set($javaVariable=$statementUtils.getJavaVariableName($param))	
#set($setterType=$statementUtils.getJdbcSetter($param))	
#set($getterType=$statementUtils.getJdbcGetter($param))	
#end

#macro (exposeFunction)
#exposeFunctionTemplate()
#set ($in = $commonUtils.getDirection("IN"))
#set ($out = $commonUtils.getDirection("OUT"))
#set ($input = $function.getEntity($in))
#set ($output = $function.getEntity($out))
#set ($functionInputClass = $commonUtils.getTemplateClassName($input, $model, $templateFunctionInput))
#set ($functionInputVariable = $commonUtils.getJavaNameVariableFirstLetter($functionInputClass))
#set ($functionInputImport = $commonUtils.getEntityLevelTemplateFullPath($model, $input, $template, $templateFunctionInput))
#set ($functionOutputClass = $commonUtils.getTemplateClassName($output, $model, $templateFunctionOutput))
#set ($functionOutputVariable = $commonUtils.getJavaNameVariableFirstLetter($functionOutputVariable))
#set ($functionOutputImport = $commonUtils.getEntityLevelTemplateFullPath($model, $output, $template, $templateFunctionOutput))
#set ($functionInterfaceClassName = $commonUtils.getTemplateClassName($output, $model, $templateFunctionInterface))
#set ($functionInterfaceVariableName = $commonUtils.getJavaNameVariableFirstLetter($functionInterfaceClassName))
#set ($functionInterfaceImport = $commonUtils.getEntityLevelTemplateFullPath($model, $output, $template, $templateFunctionInterface))
#end

#macro (exposeFunctionTemplate)
#set ($templateFunctionInput = "StoredProcedureInputBean")
#set ($templateFunctionOutput = "StoredProcedureOutputBean")
#set ($templateFunctionInterface = $template.getPropertyValue("functionInterface","DaoInterfaceStoreProcedure"))
#end

#macro (putGetterSetter $class $variable)
#putGetterSetterAlt($class, $class, $variable)
#end

#macro (putGetterSetterAlt $class $classVariable $variable)
    public ${class} get${classVariable} () {
        return ${variable};
    }

    public void set${classVariable} (${class} ${variable}) {
        this.${variable} = ${variable};
    }

#end

#macro(exposeVariableTriggerSpecific)
#set($triggerColumn =$triggerUtils.getColumn($trigger))
#set($triggerColumnName =$triggerColumn.name)
#set($triggerVar =$triggerUtils.getTriggerAlias($trigger))
#set($triggerType =$triggerUtils.getTriggerType($trigger))
#set($triggerJavaExpressionChunk =$triggerUtils.getJavaDisplayChunk($trigger, $template))
#set($triggerSqlExpressionChunk =$triggerUtils.getSqlDisplayChunk($trigger, $template))
#end

#macro (putGetterAdder $classList $listVariable $class $variable)
#set ($listClasses = $i18nUtils.plurialize(${class}))
#if($addXmlBinding)
    @XmlTransient
#end
    public List<${class}> get${listClasses} () {
        if (${listVariable}==null)
            ${listVariable} = new ArrayList<$class>();
        return ${listVariable};
    }

    public void add${class} (${class} ${variable}) {
        get${listClasses} ().add(${variable});
    }

#end

#macro (toString)
    public String toString() {
        StringBuffer sb = new StringBuffer();
#foreach($column in ${table.columns})
#if (!$column.hasBeenDuplicated())
#putColumnParamNaming()
        sb.append("$columnClass: "+get$columnClass());
#if($velocityCount<${table.columnCount})
        sb.append(", ");
#end
#end
#end
        return sb.toString();
    }
#end
#macro (putSetterGetterAdder $classList $listVariable $class $variable)
#set ($listClasses = $i18nUtils.plurialize(${class}))
    public void set${listClasses} (List<${class}> ${listVariable}) {
        this.${listVariable} = ${listVariable};
    }

#putGetterAdder($classList $listVariable $class $variable)
#end

#macro (putImportSDDBean)
#set ($templateJavaBean=$template.getPropertyValue("JavaBeanTemplate","SDDOutputBean"))
#set ($beanClass = $commonUtils.getTemplateClassName($table, $model, $templateJavaBean))
#set ($beanVariable = $commonUtils.getJavaNameVariableFirstLetter($beanClass))
#set ($beanImport = $commonUtils.getEntityLevelTemplateFullPath($model, $table, $template, $templateJavaBean))
#set ($listVariable = $i18nUtils.plurialize(${beanVariable}))
#set ($addXmlBinding=$template.getPropertyValue("add-xmlbinding",false))
#set ($xmlFormat=$template.getPropertyValue("add-xml-format","none"))
#end

#macro (putImportCompositeSDDBean)
#templateCommonDefinition()
#set ($inputComposite = $composite.getInputComposite())
#set ($outputComposite = $composite.getOutputComposite())
#set ($sddInputCompositeBeanClass = $commonUtils.getTemplateClassName($inputComposite, $template, $templateSDDInputCompositeBean))
#set ($sddInputCompositeBeanVariable = $commonUtils.getJavaNameVariableFirstLetter($sddInputCompositeBeanClass))
#set ($sddInputCompositeBeanImport = $commonUtils.getEntityLevelTemplateFullPath($inputComposite, $template, $templateSDDInputCompositeBean))
#set ($sddOutputCompositeBeanClass = $commonUtils.getTemplateClassName($outputComposite, $template, $templateSDDOutputCompositeBean))
#set ($sddOutputCompositeBeanVariable = $commonUtils.getJavaNameVariableFirstLetter($sddOutputCompositeBeanClass))
#set ($sddOutputCompositeBeanImport = $commonUtils.getEntityLevelTemplateFullPath($outputComposite, $template, $templateSDDOutputCompositeBean))
#end

#macro (putImportCompositeOutputSDDBean)
#templateCommonDefinition()
#set ($sddOutputBeanClass = $commonUtils.getTemplateClassName($table, $model, $templateSDDOutputBean))
#set ($sddOutputBeanClasses = $i18nUtils.plurialize(${sddOutputBeanClass}))
#set ($sddOutputBeanVariable = $commonUtils.getJavaNameVariableFirstLetter($sddOutputBeanClass))
#set ($sddOutputBeanImport = $commonUtils.getEntityLevelTemplateFullPath($model, $table, $template, $templateSDDOutputBean))
#set ($sddOutputBeanCollectionClass = $commonUtils.getTemplateClassName($table, $model, $templateSDDOutputBeanCollection))
#set ($sddOutputBeanCollectionVariable = $commonUtils.getJavaNameVariableFirstLetter($sddOutputBeanCollectionClass))
#set ($sddOutputBeanCollectionImport = $commonUtils.getEntityLevelTemplateFullPath($model, $table, $template, $templateSDDOutputBeanCollection))
#end

#macro (putImportCompositeInputSDDBean)
#templateCommonDefinition()
#set ($sddInputBeanClass = $commonUtils.getTemplateClassName($table, $template, $templateSDDInputBean))
#set ($sddInputBeanVariable = $commonUtils.getJavaNameVariableFirstLetter($sddInputBeanClass))
#set ($sddInputBeanImport = $commonUtils.getEntityLevelTemplateFullPath($table, $template, $templateSDDInputBean))
#end

#macro (putImportQuerySDDBean)
#templateCommonDefinition()
#set ($sddInputBeanClass = $commonUtils.getTemplateClassName($query.getInputBean(), $model, $templateSDDInputBean))
#set ($sddInputBeanVariable = $commonUtils.getJavaNameVariableFirstLetter($sddInputBeanClass))
#set ($sddInputBeanImport = $commonUtils.getEntityLevelTemplateFullPath($model, $query.getInputBean(), $template, $templateSDDInputBean))
#set ($sddOutputBeanClass = $commonUtils.getTemplateClassName($query.getOutputBean(), $model, $templateSDDOutputBean))
#set ($sddOutputBeanClasses = $i18nUtils.plurialize(${sddOutputBeanClass}))
#set ($sddOutputBeanVariable = $commonUtils.getJavaNameVariableFirstLetter($sddOutputBeanClass))
#set ($sddOutputBeanImport = $commonUtils.getEntityLevelTemplateFullPath($model, $query.getOutputBean(), $template, $templateSDDOutputBean))
#set ($sddOutputBeanCollectionClass = $commonUtils.getTemplateClassName($query.getOutputBean(), $model, $templateSDDOutputBeanCollection))
#set ($sddOutputBeanCollectionVariable = $commonUtils.getJavaNameVariableFirstLetter($sddOutputBeanCollectionClass))
#set ($sddOutputBeanCollectionImport = $commonUtils.getEntityLevelTemplateFullPath($model, $query.getOutputBean(), $template, $templateSDDOutputBeanCollection))
#end

#macro(templateCommonDefinition)
#set ($templateSDDInputBean  = "SDDInputBean")
#set ($templateSDDOutputBean = "SDDOutputBean")
#set ($templateSDDInputCompositeBean  = "SDDInputCompositeBean")
#set ($templateSDDOutputCompositeBean = "SDDOutputCompositeBean")
#set ($templateSDDOutputBeanCollection = "SDDOutputBeanCollection")
#end

#macro (putImportSDDInputBean)
#templateCommonDefinition()
#set ($sddInputBeanClass = $commonUtils.getTemplateClassName($table, $model, $templateSDDInputBean))
#set ($sddInputBeanVariable = $commonUtils.getJavaNameVariableFirstLetter($sddInputBeanClass))
#set ($sddInputBeanImport = $commonUtils.getEntityLevelTemplateFullPath($model, $table, $template, $templateSDDInputBean))
#end

#macro(exposeWebXmlSpecific)
#set($webXmlVersion=$template.getPropertyValue("web-xml-version","3.0"))
#end

#macro(putColumnDefaultValue)
#foreach($column in ${table.columns})
#putColumnParamNaming()
#if(!$isForeignKey && !$isPrimaryKey)
#if($hasDefaultValue && ($columnUtils.isString($column) || $columnUtils.isNumeric($column)))
#set($defaultConstant = "__DEFAULT_$formatUtils.getUppercaseUnderscore($column.alias)")
#if ($columnUtils.isString($column))
#set($defaultType="String")
#else
#set($defaultType=$columnType)
#end
	public static final $defaultType $defaultConstant = $defaultValue;
#end
#end
#end
#end

#* 
#macro(putColumnDefaultValueGetter)
#set($defaultConstant = "__DEFAULT_$formatUtils.getUppercaseUnderscore($column.alias)")
    public $columnType get$columnClass() {
        return ($columnVar!=null)?$columnVar:$defaultConstant;
    }
#end
*#

#macro(putColumnDefaultValueAffectation)
#foreach ($column in ${table.columns})
#putColumnParamNaming()
#if(!$isForeignKey && !$isPrimaryKey)
#if($hasDefaultValue && ($columnUtils.isString($column) || $columnUtils.isNumeric($column)) && !$isEnum)
#set($defaultConstant = "__DEFAULT_$formatUtils.getUppercaseUnderscore($column.alias)")
        if ($columnVar==null) $columnVar=$defaultConstant;
#end
#end
#end
#end

#macro(putOrmForeignKeyColumn)
#if($columnUtils.isForeignKey($column) || $columnUtils.isPartOfCompositePrimaryKey($column))
#set($columnClass="${columnClass}_")
#set($columnVar="${columnVar}_")
#end
#end

#macro(putOrmForeignAndPrimaryKeyColumn)
#if($columnUtils.isForeignKey($column))
#set($columnClass="${columnClass}_")
#set($columnVar="${columnVar}_")
#if($column.isPrimaryKey())
##set($columnClass="${columnClass}_")
##if(!$columnUtils.isForeignKey($primaryKeyFirstColumn))
#set($primaryKeyJavaNameClass="${primaryKeyJavaNameClass}_")
##end
#elseif($columnUtils.isForeignKey($primaryKeyFirstColumn))
#set($primaryKeyJavaNameClass = "${primaryKeyJavaNameClass}_")
#end
#end
##if($columnUtils.isForeignKey($primaryKeyFirstColumn))
##set($primaryKeyJavaNameClass = "${primaryKeyJavaNameClass}_")
##end
#end

#macro (putSddJdbcLookup)
#exposeQueryUpdatedAreas("SDD_EXECUTE_JDBC")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
	public List<$sddOutputBeanClass> executeJDBC(
#if($isNotVoidInput)
		$sddInputBeanClass $sddInputBeanVariable
#end
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkName=$javaUtils.getJavaVariableNaming($queryChunk.name))
#if(!$isNotVoidInput && $velocityCount==1) 
        String $chunkName 
#else
        ,String $chunkName 
#end
#end
		) {
#if($isNotVoidInput)
		if ($sddInputBeanVariable==null)
			$sddInputBeanVariable = new $sddInputBeanClass();
#end
		List<$sddOutputBeanClass> list = new ArrayList<$sddOutputBeanClass>();
		PreparedStatement pstmt = null;
#if (!$query.isWrite())
		ResultSet rs = null;
#end
		Connection conn = null;
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(
						getStatement(
#if($isNotVoidInput) 
							$sddInputBeanVariable
#end
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkName=$javaUtils.getJavaVariableNaming($queryChunk.name))
#if(!$isNotVoidInput && $velocityCount==1) 
        					$chunkName 
#else
        					, $chunkName 
#end
#end
						));
			int index = 1;
#foreach($column in $inputBean.columns)
#if($isTransientDefinition)
#if (!$column.isTransient() && $column.isPrimaryKey()) 
#injectSDDParameter()
#end
#else
##TODO use setFilter to add the filter group $column.isFilter() <filter
#if (!$column.isFilter())
#injectSDDParameter()
#else
			if (isFilter${column.filterName}Active(#if($isNotVoidInput) $sddInputBeanVariable#end)) {
#injectSDDParameter()
			}
#end	
#end
#end
#if ($query.isWrite())
			pstmt.executeUpdate();
#else
			rs = pstmt.executeQuery();
#end
#if ($statementUtils.hasResult($outputBean))
			while (rs.next()) {
				$sddOutputBeanClass $sddOutputBeanVariable = new $sddOutputBeanClass();
#foreach($column in $outputBean.columns)
#putColumnParamNaming()
#set($columnType = $statementUtils.getJdbcType($column))
				${sddOutputBeanVariable}.set$columnClass(rs.get${columnType}($velocityCount)); 
#end
				list.add(${sddOutputBeanVariable});
	        }
#end
		} catch (Exception e) {
		      e.printStackTrace();
	    } finally {
	      try {
#if (!$query.isWrite())
	        rs.close();
#end
	        pstmt.close();
	        conn.close();
	      } catch (Exception e) {
	        e.printStackTrace();
	      }
	    }
		return list;
	}

#foreach ($filter in $query.queryFilters)
	public boolean isFilter${filter.name}Active(#if($isNotVoidInput)$sddInputBeanClass $sddInputBeanVariable#end) {
#foreach ($param in $filter.queryParams.queryParams)
#set($paramName=$formatUtils.getJavaName(${param.name}))
		if (${sddInputBeanVariable}.get${paramName}() == null) return false;
#end
		return true;	
	}
#end

	public String getStatement(
#if($isNotVoidInput)
			$sddInputBeanClass $sddInputBeanVariable
#end
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkName=$javaUtils.getJavaVariableNaming($queryChunk.name))
#if(!$isNotVoidInput && $velocityCount==1) 
        	String $chunkName 
#else
        	,String $chunkName 
#end
#end
		) {
		String query = QUERY_NATIVE;
		boolean isWhereDone = false;//
#foreach($column in $inputBean.columns)
#if($column.isArray())
#putColumnParamNaming()
	   StringBuffer inSb$columnVar = new StringBuffer();
	   for (int i = 0; i < ${sddInputBeanVariable}.get$columnClass().size(); i++) {
	   	  inSb${columnVar}.append("?");
	   	  if (i+1!=${sddInputBeanVariable}.get$columnClass().size())
	   	  	inSb${columnVar}.append(",");
	   }
	   query = StringUtils.replace (query, "?...", inSb${columnVar}.toString());
#end
#end
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkNameString=$javaUtils.getJavaVariableNaming($queryChunk.name))
		query = StringUtils.replace (query, "$"+"$chunkNameString", get${chunkNameString}(${chunkNameString}));  
#end
#*  
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkNameString=$javaUtils.getJavaVariableNaming($queryChunk.name))
#foreach($queryChunkValue in $queryChunk.queryChunkValues)
#set($chunkValueName=$javaUtils.getJavaVariableNaming($queryChunkValue.name))
		query = StringUtils.replace (query, "$"+"$chunkNameString", get${chunkNameString}(${chunkValueName}));  
#end
#end
#if (!$column.isArray())
               pstmt.set$columnType(index, ${sddInputBeanVariable}.get$columnClass()); 
#else
			   for (${columnType} element : ${sddInputBeanVariable}.get$columnClass()) {
			      pstmt.set$columnType(index, element);
			      index ++;
			   }
#end
*#
#foreach ($filter in $query.queryFilters)
		if (
##TODO Case none
#foreach ($param in $filter.queryParams.queryParams)
#set($paramName=$formatUtils.getJavaName(${param.name}))
			#if ($velocityCount>1) && #end ${sddInputBeanVariable}.get${paramName}() != null
#end
			) {
			String connectionWord = " AND ";
#if ($filter.isWhere())
			if (!isWhereDone) {
				connectionWord = " WHERE ";
			}
#end
			query = StringUtils.replace (query, "$"+"$filter.name", connectionWord + CHUNK_$filter.name ); 
			isWhereDone = true;
		} else {
			query = StringUtils.replace (query, "$"+"$filter.name","");
		}
#end
		return query;
	}
#end
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkName=$javaUtils.getJavaVariableNaming($queryChunk.name))
	String get${chunkName}(String ${chunkName}) {
#foreach($queryChunkValue in $queryChunk.queryChunkValues)
#set($chunkValueName=$javaUtils.getJavaVariableNaming($queryChunkValue.name))
#set($chunkValue=$formatUtils.performDisplayReadableFirstUpperOnlyName($queryChunkValue.name))
		if ("${chunkValueName}".equals(${chunkName}) || "${chunkValue}".equals(${chunkName}))
			return CHUNK_${chunkName}_${chunkValueName};
#end
		return "";
	}  
#end
$!updatedAreaEnd
#end

#macro(injectSDDParameter)
#putColumnParamNaming()
#set($columnType = $statementUtils.getJdbcType($column))
            if (${sddInputBeanVariable}.get$columnClass()==null) {
#if (!$column.isArray())
               pstmt.setNull(index, java.sql.Types.${column.type});
#else
			   for (${columnType} element : ${sddInputBeanVariable}.get$columnClass()) {
			      pstmt.setNull(index, java.sql.Types.${column.type});
			      index ++;
			   }
#end
            } else {
#if(${column.hasProperty("like-mode")})
#set($likeMode = ${column.getPropertyValue("like-mode")})
#if($likeMode =="startsWith")
               $columnType var = ${sddInputBeanVariable}.get$columnClass() + "%";
#elseif ($likeMode =="endsWith")
               $columnType var = "%" + ${sddInputBeanVariable}.get$columnClass();
#elseif ($likeMode =="contains")
               $columnType var = "%" + ${sddInputBeanVariable}.get$columnClass() + "%";
#else
			   //TODO update your minuteproject config to set property like-mode to startsWith
               // endsWith or contains
               $columnType var = ${sddInputBeanVariable}.get$columnClass();
#end
               pstmt.set$columnType(index, var); 
#else
#if($columnUtils.isTimeColumn($column))
               pstmt.set$columnType(index, new java.sql.Date(${sddInputBeanVariable}.get$columnClass().getTime())); 
#else
#if (!$column.isArray())
               pstmt.set$columnType(index, ${sddInputBeanVariable}.get$columnClass()); 
#else
			   for (${columnType} element : ${sddInputBeanVariable}.get$columnClass()) {
			      pstmt.set$columnType(index, element);
			      index ++;
			   }
#end
#end
#end
            }
            index ++;
#end
	

#macro (putSemanticReference $element)
	  StringBuffer sb = new StringBuffer();
#set($count=0)
#foreach($column in $presentationUtils.getPotentialDisplayableColumns($table))
#if (!$column.hasBeenDuplicated())
#putColumnParamNaming()
#if(!$isForeignKey)
#if($columnUtils.isPartOfCompositePrimaryKey($column))
#set($columnClass = "${columnClass}_")
#end
#set($count=$count+1)
      if (${element}.get$columnClass()!=null)
         sb.append (${element}.get$columnClass()#if($count<$velocityCount) +" - "); 
#else +" " ); 
#end 
#end
#end
#end
      return sb.toString();
#end


#macro (addMavenDependencyJdbcDriver)
        <!-- JDBC driver --> 
#if($hasDriver)		
	    <!-- 
		if driver is not on a maven repository 
		download it manually and run the following command	   
		mvn install:install-file -Dfile=${driver.artifactId}.jar -Dpackaging=jar -DgroupId=${driver.groupId} -DartifactId=${driver.artifactId} -Dversion=$driver.version
		
		remark:
		this command assumes that your jar name is the same as your groupId name
		-->
        <dependency>
            <groupId>$driver.groupId</groupId>
            <artifactId>$driver.artifactId</artifactId>
            <version>$driver.version</version>        
        </dependency>    
#else
	    <!-- add jdbc driver : it is not provided in the configuration -->
#exposeModelUpdatedAreas("jdbc-driver-dependency")
#end
#end

#macro(exposeBackendTechnology)
#set ($isSpringBackend=$template.hasPropertyValue("add-backend-implementation","spring"))
#set ($isEJBBackend=$template.hasPropertyValue("add-backend-implementation","ejb"))
#end

#macro (putTargetServerDefinition)
#set($isWeblogicTargetServer=$template.hasPropertyValue("target-server","weblogic"))
#set($isTomcatTargetServer=$template.hasPropertyValue("target-server","tomcat"))
#set($isGlassfishTargetServer=$template.hasPropertyValue("target-server","glassfish"))
#set($isJBossTargetServer=$template.hasPropertyValue("target-server","jboss"))
#end

#macro (groovify)
#if($groovify)
#set($annotationListTagBeginning="([")
#set($annotationListTagEnding="])")
#set($accessor="")
#else
#set($annotationListTagBeginning="({")
#set($annotationListTagEnding="})")	
#set($accessor="private")
#end
#end

#macro (exposeSourcecode)
#set($isGithub=$template.hasPropertyValue("sourcecode-host","github"))
#set($sourcecodeUrl=$template.getPropertyValue("sourcecode-url","none"))
#end