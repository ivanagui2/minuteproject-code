#macro(putReadmeText)
$!commonUtils.getReadMeText($template)
#end

#macro(exposeVariableFunctionSpecific)
#exposeVariableEntitySpecific()
#exposeFunction()
#set ($functionNameUpperCase=$routineUtils.getFunctionCallName($function))
#set ($functionCall=$routineUtils.getFunctionCall($function))
#end

#macro(exposeQuerySpecific)
#set ($packageName = $commonUtils.getPackageName($query, $template))
#set ($className = $commonUtils.getClassName($query, $template))
#set ($classVariableName = $formatUtils.firstLowerCase(${className}))
#set ($inputBean = $query.inputBean)
#set ($outputBean = $query.outputBean)
#end

#macro(exposeStatementParam)
#set($javaType=$statementUtils.getJavaType($param))	
#set($javaVariable=$statementUtils.getJavaVariableName($param))	
#set($setterType=$statementUtils.getJdbcSetter($param))	
#set($getterType=$statementUtils.getJdbcGetter($param))	
#end

#macro (exposeFunction)
#exposeFunctionTemplate()
#set ($in = $commonUtils.getDirection("IN"))
#set ($out = $commonUtils.getDirection("OUT"))
#set ($input = $function.getEntity($in))
#set ($output = $function.getEntity($out))
#set ($functionInputClass = $commonUtils.getTemplateClassName($input, $model, $templateFunctionInput))
#set ($functionInputVariable = $commonUtils.getJavaNameVariableFirstLetter($functionInputClass))
#set ($functionInputImport = $commonUtils.getEntityLevelTemplateFullPath($model, $input, $template, $templateFunctionInput))
#set ($functionOutputClass = $commonUtils.getTemplateClassName($output, $model, $templateFunctionOutput))
#set ($functionOutputVariable = $commonUtils.getJavaNameVariableFirstLetter($functionOutputVariable))
#set ($functionOutputImport = $commonUtils.getEntityLevelTemplateFullPath($model, $output, $template, $templateFunctionOutput))
#set ($functionInterfaceClassName = $commonUtils.getTemplateClassName($output, $model, $templateFunctionInterface))
#set ($functionInterfaceVariableName = $commonUtils.getJavaNameVariableFirstLetter($functionInterfaceClassName))
#set ($functionInterfaceImport = $commonUtils.getEntityLevelTemplateFullPath($model, $output, $template, $templateFunctionInterface))
#end

#macro (exposeFunctionTemplate)
#set ($templateFunctionInput = "StoredProcedureInputBean")
#set ($templateFunctionOutput = "StoredProcedureOutputBean")
#set ($templateFunctionInterface = $template.getPropertyValue("functionInterface","DaoInterfaceStoreProcedure"))
#end

#macro (putGetterSetter $class $variable)
    public ${class} get${class} () {
        return ${variable};
    }

    public void set${class} (${class} ${variable}) {
        this.${variable} = ${variable};
    }

#end

#macro(exposeVariableTriggerSpecific)
#set($triggerColumnName =$trigger.columnName)
#set($triggerVar =$triggerUtils.getTriggerAlias($trigger))
#set($triggerType =$triggerUtils.getTriggerAlias($trigger))
#set($triggerJavaExpressionChunk =$triggerUtils.getJavaDisplayChunk($trigger))
#end

#macro (putGetterAdder $classList $listVariable $class $variable)
#set ($listClasses = $i18nUtils.plurialize(${class}))
#if($addXmlBinding)
    @XmlTransient
#end
    public List<${class}> get${listClasses} () {
        if (${listVariable}==null)
            ${listVariable} = new ArrayList<$class>();
        return ${listVariable};
    }

    public void add${class} (${class} ${variable}) {
        get${listClasses} ().add(${variable});
    }

#end

#macro (putSetterGetterAdder $classList $listVariable $class $variable)
#set ($listClasses = $i18nUtils.plurialize(${class}))
    public void set${listClasses} (List<${class}> ${listVariable}) {
        this.${listVariable} = ${listVariable};
    }

#putGetterAdder($classList $listVariable $class $variable)
#end

#macro (putImportSDDBean)
#set ($templateJavaBean=$template.getPropertyValue("JavaBeanTemplate","JavaBeanTemplate"))
#set ($beanClass = $commonUtils.getTemplateClassName($table, $model, $templateJavaBean))
#set ($beanVariable = $commonUtils.getJavaNameVariableFirstLetter($beanClass))
#set ($beanImport = $commonUtils.getEntityLevelTemplateFullPath($model, $table, $template, $templateJavaBean))
#set ($listVariable = $i18nUtils.plurialize(${beanVariable}))
#set ($addXmlBinding=$template.getPropertyValue("add-xmlbinding",false))
#set ($xmlFormat=$template.getPropertyValue("add-xml-format","none"))
#end

#macro (putImportQuerySDDBean)
#templateCommonDefinition()
#set ($sddInputBeanClass = $commonUtils.getTemplateClassName($query.getInputBean(), $model, $templateSDDInputBean))
#set ($sddInputBeanVariable = $commonUtils.getJavaNameVariableFirstLetter($sddInputBeanClass))
#set ($sddInputBeanImport = $commonUtils.getEntityLevelTemplateFullPath($model, $query.getInputBean(), $template, $templateSDDInputBean))
#set ($sddOutputBeanClass = $commonUtils.getTemplateClassName($query.getOutputBean(), $model, $templateSDDOutputBean))
#set ($sddOutputBeanClasses = $i18nUtils.plurialize(${sddOutputBeanClass}))
#set ($sddOutputBeanVariable = $commonUtils.getJavaNameVariableFirstLetter($sddOutputBeanClass))
#set ($sddOutputBeanImport = $commonUtils.getEntityLevelTemplateFullPath($model, $query.getOutputBean(), $template, $templateSDDOutputBean))
#set ($sddOutputBeanCollectionClass = $commonUtils.getTemplateClassName($query.getOutputBean(), $model, $templateSDDOutputBeanCollection))
#set ($sddOutputBeanCollectionVariable = $commonUtils.getJavaNameVariableFirstLetter($sddOutputBeanCollectionClass))
#set ($sddOutputBeanCollectionImport = $commonUtils.getEntityLevelTemplateFullPath($model, $query.getOutputBean(), $template, $templateSDDOutputBeanCollection))
#end

#macro(templateCommonDefinition)
#set ($templateSDDInputBean = "SDDInputBean")
#set ($templateSDDOutputBean = "SDDOutputBean")
#set ($templateSDDOutputBeanCollection = "SDDOutputBeanCollection")
#end

#macro(exposeWebXmlSpecific)
#set($webXmlVersion=$template.getPropertyValue("web-xml-version","3.0"))
#end
