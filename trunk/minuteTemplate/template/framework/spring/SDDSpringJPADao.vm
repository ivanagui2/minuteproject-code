#exposeBackendTechnology()
#exposeQuerySpecific()
#exposeSDDSpring()
#putImportQuerySDDBean()
#addedAreas()
#exposeJPASpecifics()
#exposeJPA2Specifics()
package $packageName;

$!updatedAreaImport

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

#if($jpa2ImplementationIsHibernate)
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.engine.jdbc.connections.spi.ConnectionProvider;
import org.hibernate.engine.spi.SessionFactoryImplementor;
#end
#if ($isSpringBackend)
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
#end
import $sddOutputBeanCollectionImport;
import $sddOutputBeanImport;
import $sddDaoInterfaceImport;
#if($isNotVoidInput)
import $sddInputBeanImport;
#end
/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: SDD DAO Spring JPA implementation </p>
 *
 */
#if ($isSpringBackend)
@Repository ("$sddDaoInterfaceVariable")
@Transactional(propagation = Propagation.REQUIRED) 
public class ${className} implements $sddDaoInterfaceClass {
#else
@javax.ejb.Stateless ##(name="$sddDaoInterfaceVariable")
public class ${className} { ## CDI apparently does not work with implement $sddDaoInterfaceClass
#end

#set ($fullQuery = $queryUtils.getFullQueryQuestionMark($query))
	public static final String QUERY_NATIVE = "$fullQuery";

	@PersistenceContext(unitName = "$persistenceUnitName")  
    EntityManager entityManager;  
#exposeQueryUpdatedAreas("SDD_EXECUTE_GET")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    public $sddOutputBeanCollectionClass execute (#if($isNotVoidInput)$sddInputBeanClass $sddInputBeanVariable#end) {
		$sddOutputBeanCollectionClass $sddOutputBeanCollectionVariable = new $sddOutputBeanCollectionClass();
		List<$sddOutputBeanClass> list = executeJDBC (#if($isNotVoidInput)$sddInputBeanVariable#end);
		${sddOutputBeanCollectionVariable}.set$sddOutputBeanClasses (list);
        return ${sddOutputBeanCollectionVariable};
    }
#end
$!updatedAreaEnd

#putSddJdbcLookup()
#if($jpa2ImplementationIsEclipseLink)
    public Connection getConnection() throws SQLException {
        return entityManager.unwrap(Connection.class);
    }
#else
//if JPA2 implementation is hibernate
#*	@SuppressWarnings("deprecation")   
   	public Connection getConnection() throws HibernateException {  
		Session session = getSession();  
		Connection connection = session.connection();  
		return connection;  
   	} 
*#	
    public Connection getConnection() throws SQLException, HibernateException {
        Session session = getSession();
        SessionFactoryImplementor sfi = (SessionFactoryImplementor) session.getSessionFactory();
        ConnectionProvider cp = sfi.getConnectionProvider();
        Connection connection = cp.getConnection();
        return connection;
    }
    	
   	private Session getSession() {  
   		Session session = (Session) entityManager.getDelegate();  
   		return session;  
   	}
#end	
$!updatedAreaImplementation

}