#exposeVariableEntitySpecific()
#exposeJPASpecifics()
package $packageName;

$!updatedAreaImport
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.FormParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import javax.xml.bind.JAXBElement;

import $importDomainObjectUML;
import $EJBDaoImplImport;

/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: remote interface for ${className} service </p>
 *
 */
@RequestMapping ("$restXmlServerUrl")
//@Produces ({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
//@Consumes ({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
@Controller 
public class ${className} #if($implementInterface)implements $EJBDaoRemoteInterfaceClass#end {

	@Autowired
	@Qualifier("$bslaDaoVariable")
	${bslaDaoClass} $bslaDaoVariable;

	@Autowired
	@Qualifier("$bslaDaoExtVariable")
	${bslaDaoExtClass} $bslaDaoExtVariable;

	@RequestMapping(value = "/{id}/{name}/{surname}/{job}", method = RequestMethod.POST)
	@Transactional(propagation=Propagation.REQUIRED, rollbackFor=Exception.class)
    public $tableClassName create (
#foreach ($column in ${table.columns})
#putColumnParams()
#columnJavaNaming()
        @RequestParam("$columnVar") $columnType $columnVar,
#end
        HttpServletResponse servletResponse
        ) throws IOException {
        $tableClassName _$tableVariableName = new $tableClassName (
#foreach ($column in ${table.columns})
#putColumnParams()
#columnJavaNaming()
           $columnVar#if ($velocityCount!=$table.columnCount),
#end
#end	   
);
        return create(_$tableVariableName);
    }

	public $tableClassName create ($tableClassName $tableVariableName) {
		return ${bslaDaoVariable}.create($tableVariableName);
	}

    @POST
    @Produces ({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})	
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)

	
	
	/////////////
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
 @ResponseBody
 public EmployeeDTO findEmployee(@PathVariable("id") long employeeId) {
  return employeeService.findEmployee(employeeId);
 }

 @RequestMapping(value = "/{id}/{name}/{surname}/{job}", method = RequestMethod.POST)
 @Transactional(propagation=Propagation.REQUIRED, rollbackFor=Exception.class)
 public String saveEmployee(@PathVariable("id") long employeeId, @PathVariable String name, @PathVariable String surname, @PathVariable("job") String jobDescription) throws Exception {
  employeeService.saveEmployee(employeeId, name, surname, jobDescription);
  return "redirect:/restServices/employeeService/" + employeeId;
 }

 @RequestMapping(value = "/{id}/{name}/{surname}/{job}", method = RequestMethod.PUT)
 @Transactional(propagation=Propagation.REQUIRED, rollbackFor=Exception.class)
 public String updateEmployee(@PathVariable("id") long employeeId, @PathVariable String name, @PathVariable String surname,  @PathVariable("job") String jobDescription) throws Exception {
  employeeService.updateEmployee(employeeId, name, surname, jobDescription);
  return "redirect:/restServices/employeeService/" + employeeId;
 }

 @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
 @Transactional(propagation=Propagation.REQUIRED, rollbackFor=Exception.class)
 @ResponseBody
 public String deleteEmployee(@PathVariable("id") long employeeId) throws Exception {
  employeeService.deleteEmployee(employeeId);
  return "OK";
 }

}


    public List<$tableClassName> findAll ($tableClassName $tableVariableName) {
        return ${EJBDaoImplVariable}.findAll($tableVariableName);
    }

#exposeEntityUpdatedAreas("FIND_ALL")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    @GET
    @Produces ({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})	
    public List<$tableClassName> findAll () {
        return ${EJBDaoImplVariable}.findAll();
    }
#end
$!updatedAreaEnd

#if ($hasOnlyOnePrimaryKey)
#exposeEntityUpdatedAreas("FIND_BY_ID")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else	
    @GET
    @Path("{$primaryKeyVariable}")
    @Produces ({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})		
    public $tableClassName findById (@PathParam ("$primaryKeyVariable") $primaryKeyFullType $primaryKeyVariable) {
        return ${EJBDaoImplVariable}.findById($primaryKeyVariable);
    }
#end
$!updatedAreaEnd

    @DELETE
    @Path("{$primaryKeyVariable}")
    public void delete (@PathParam ("$primaryKeyVariable") $primaryKeyType $primaryKeyVariable) {
        $tableClassName $tableVariableName = new $tableClassName ();
        ${tableVariableName}.set$primaryKeyJavaNameClass($primaryKeyVariable);
        ${EJBDaoImplVariable}.delete($tableVariableName);
    }
#end
#if ($hasSemanticReference)
    public $tableClassName findBySemanticReference ($primaryKeyFullType $primaryKeyVariable) {
        return ${EJBDaoImplVariable}.findById($primaryKeyVariable);
    }
	
#end

    public $tableClassName create ($tableClassName $tableVariableName) {
        return ${EJBDaoImplVariable}.create($tableVariableName);
    }

    @POST
    @Produces ({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})	
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public $tableClassName create (
#foreach ($column in ${table.columns})
#putColumnParams()
#columnJavaNaming()
        @FormParam("$columnVar") $columnType $columnVar,
#end	
        @Context HttpServletResponse servletResponse
        ) throws IOException {
        $tableClassName _$tableVariableName = new $tableClassName (
#foreach ($column in ${table.columns})
#putColumnParams()
#columnJavaNaming()
           $columnVar#if ($velocityCount!=$table.columnCount),
#end
#end	   
);
        return create(_$tableVariableName);
    }

    @PUT
    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
    public $tableClassName save(JAXBElement<$tableClassName> jaxb$tableClassName) {
        $tableClassName $tableVariableName = jaxb${tableClassName}.getValue();
        if (${tableVariableName}.get${primaryKeyJavaNameClass}()!=null)
            return ${EJBDaoImplVariable}.update($tableVariableName);
        return create($tableVariableName);
    }

$!updatedAreaImplementation
		
}