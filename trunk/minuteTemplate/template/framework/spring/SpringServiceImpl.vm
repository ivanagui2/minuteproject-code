#putJPA2TemplateDefinition()
#exposeVariableEntitySpecific()
#exposeSpringServiceDomainObject()
#exposeSpringBslaDomainObject()
#exposeJPA2DomainObject($table)
#putImportParamsUML()
#addedAreas()
#exposeTableMetadata()
#set($passivationBehavior = $behaviorUtils.getPassivationBehavior($table, $template))
#set($tableVariableName = $formatUtils.getJavaNameVariableConvertReservedWord($tableVariableName))
package $packageName;

import java.util.List;
import java.util.Iterator;
import java.util.Arrays;
import java.util.ArrayList;

import net.sf.minuteProject.model.data.criteria.QueryData;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import net.sf.minuteProject.model.data.criteria.constant.QuerySortOrder;

import $importDomainObjectUML;
import $SpringServiceInterfaceImport;
import $BslaDaoInterfaceImport;
import $BslaDaoExtInterfaceImport;

import org.springframework.transaction.annotation.Transactional;

import net.sf.minuteProject.model.data.criteria.constant.EntityMatchType;
import net.sf.minuteProject.model.data.criteria.constant.OperandType;
#exposeJPA2Import()

$!updatedAreaImport

/**
 *
 * <p>Title: $className</p>
 *
 * <p>Description: Service layer Interface 
 * It offers coarse grain methods over the fine grain DAO layer:
 * It performs input and business validation.
 * </p>
 *
 */
@Service ("$SpringServiceInterfaceVariable")
@Transactional
public class $className implements $SpringServiceInterfaceClass {

    @Autowired
    @Qualifier("$BslaDaoInterfaceVariable")	
	$BslaDaoInterfaceClass $BslaDaoInterfaceVariable;

    @Autowired
    @Qualifier("$BslaDaoExtInterfaceVariable")	
	$BslaDaoExtInterfaceClass $BslaDaoExtInterfaceVariable;
	
    /**
     * Inserts a $tableClassName entity $tCN 
     * @param $tableClassName $tableVariableName
     */
    public void create ($tableClassName $tableVariableName) {
		${BslaDaoInterfaceVariable}.insert$tableClassName($tableVariableName);
	}

    /**
     * Updates a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public $tableClassName update($tableClassName $tableVariableName) {
        return ${BslaDaoInterfaceVariable}.update$tableClassName($tableVariableName);
    }

#if ($hasOnlyOnePrimaryKey)
    public $tableClassName findById ($primaryKeyFullType $primaryKeyVariable) {
        return ${BslaDaoInterfaceVariable}.load$tableClassName($primaryKeyVariable);
    }

	public $tableClassName findById ($tableClassName c) {
#if($columnUtils.isPartOfCompositePrimaryKey($primaryKeyFirstColumn))
        // not fully supported! cannot transform row in composite pk
#set($primaryKeyVariable = $formatUtils.firstUpperCase($primaryKeyVariable))
        return ${BslaDaoInterfaceVariable}.load$tableClassName(c.get${primaryKeyVariable}_());
#else
		return ${BslaDaoInterfaceVariable}.load$tableClassName(c.get${primaryKeyJavaNameClass}());
#end
	}

    public $tableClassName load ($primaryKeyFullType $primaryKeyVariable) {
        $tableClassName entity = findById($primaryKeyVariable);
#foreach ($reference in $table.parents)
#putReferenceParams2()
#set($localColumnClass = $commonUtils.getColumnAliasClass($table, $reference))
        if (entity.get${localColumnClass}()!=null)
#set ($fTable = $tableUtils.asUML($linktableDB))
#set ($fprimaryKeyFirstColumn = $commonUtils.getPrimaryKeyFirstColumn($fTable))
#set ($fprimaryKeyJavaNameClass = $commonUtils.getColumnClassName($fprimaryKeyFirstColumn))
#if ($tableUtils.isCompositePrimaryKeyNotMany2Many($table))
##	       entity.get${localColumnClass}().get${fprimaryKeyJavaNameClass}().get${fprimaryKeyJavaNameClass}_();//improve with partialparent loading
	       entity.get${localColumnClass}().get${fprimaryKeyJavaNameClass}();//improve with partialparent loading
#else
	       entity.get${localColumnClass}().get${fprimaryKeyJavaNameClass}();//improve with partialparent loading
#end
#end
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
#exposeImportParamsUML($targetTable)
        for ($importDomainObjectUML element : entity.get${childrenListClass}()){
           element.toString();//eager load
        }
#end
        return entity;
    }
	
	public void delete ($tableClassName ${tableVariableName}) {
#if ($tableUtils.isCompositePrimaryKeyNotMany2Many($table))
##	    $tableClassName var = findById (${tableVariableName}.get$primaryKeyJavaNameClass().get${primaryKeyJavaNameClass}_());
	    $tableClassName var = findById (${tableVariableName}.get${primaryKeyJavaNameClass}_());
#else
	    $tableClassName var = findById (${tableVariableName}.get$primaryKeyJavaNameClass());
#end
#if($passivationBehavior.hasPassivation())
#set($column = $passivationBehavior.column)
#putColumnParamNaming()
##if($isEnum)
##	    var.set$columnClass(${enumImport}.${passivationBehavior.value});
##else
	    var.set$columnClass("$passivationBehavior.value");
##end
	    ${BslaDaoInterfaceVariable}.update$tableClassName(var);
#else
		${BslaDaoInterfaceVariable}.delete$tableClassName (var);
#end
	}	

#end
     /**
     * Saves a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public void save($tableClassName $tableVariableName){
		${BslaDaoInterfaceVariable}.save$tableClassName (${tableVariableName});
	}
	
	public List<$tableClassName> findAll ($tableClassName $tableVariableName) {
		List<$tableClassName> list = ${BslaDaoInterfaceVariable}.searchPrototype$tableClassName ($tableVariableName);
        return convert(list);
	}
	
	public List<$tableClassName> findAny ($tableClassName $tableVariableName) {
		List<$tableClassName> list = ${BslaDaoInterfaceVariable}.searchPrototypeAny$tableClassName ($tableVariableName);
        return convert(list);
	}

    public List<$tableClassName> find ($tableClassName $tableVariableName, EntityMatchType matchType, OperandType operandType, Boolean caseSensitivenessType) {
        List<$tableClassName> list = ${BslaDaoInterfaceVariable}.find ($tableVariableName, matchType, operandType, caseSensitivenessType);
        return convert(list);
    }
	
    private List<$tableClassName> convert(List<$tableClassName> list) {
        List<$tableClassName> ret = new ArrayList<$tableClassName>();   
         for ($tableClassName a : list) {
            $tableClassName b = a.clone();
            ret.add(b);
        }
        return ret;
    }
    
//	@Override
	public void find(QueryData<$tableClassName> data) {
		${BslaDaoExtInterfaceVariable}.find (data);
	}
	
##if($isMasterData || $isReferenceData)
##if ($tableUtils.isAdminContentType($table))
    /**
     * return a list of $tableClassName entities 
     */
    //@Cachable
    public List<$tableClassName> getList () {
        $tableClassName sortMask = new $tableClassName();
#set($ordering=$orderingUtils.getFirstOrdering($table))
#set($column=$ordering.column)
#set($order=$ordering.order)
#putColumnParamNaming()
#if (!$columnUtils.isPartOfCompositePrimaryKey($column))
#set($defaultStuffing = $columnUtils.getDefaultStuffingForColumn($column, $useTemporal))
#if($columnUtils.isForeignKey($column))
#set($columnClass = "${columnClass}_")
#end
        sortMask.set$columnClass($defaultStuffing);
#end
        return ${BslaDaoExtInterfaceVariable}.getList(sortMask, QuerySortOrder.$order);
    }

#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
	public void add${childrenListClass}($tableClassName c, $targetTableClassName ... element) {
#if ($hasOnlyOnePrimaryKey)
		$tableClassName cc = findById (c);
        cc.get${childrenListClass}().addAll(Arrays.asList(element));
        save(cc);
#end
	}
	
	public void remove${childrenListClass}($tableClassName c, $targetTableClassName ... element) {
#if ($hasOnlyOnePrimaryKey)
		$tableClassName cc = findById (c);
        for (Iterator<$targetTableClassName> iterator = cc.get${childrenListClass}().iterator(); iterator.hasNext();) {
            $targetTableClassName e = iterator.next();
            iterator.remove();
        }
        save(cc);
#end
	}
	
#end

$!updatedAreaImplementation

}
