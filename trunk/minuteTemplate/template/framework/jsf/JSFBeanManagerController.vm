#exposeJSFEntitySpecific()
#if($isSpringBackend)
#exposeSpringDomainObjectSpecific()
#exposeSpringServiceDomainObject()
#set ($EJBDaoImplClass = $SpringServiceInterfaceClass)
#set ($EJBDaoImplVariable = $SpringServiceInterfaceVariable)
#elseif($isEJBBackend)
#exposeEJBDomainObjectSpecific()
#end
package $packageName;

$!updatedAreaImport
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

#if($isSpringBackend)
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.enterprise.context.RequestScoped;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;

import $SpringServiceInterfaceImport;

#elseif($isEJBBackend)
import javax.enterprise.context.RequestScoped;
import javax.enterprise.inject.Default;
import javax.inject.Inject;
import javax.inject.Named;

import $importDomainObjectUML;

#end
import $importDomainObjectUML;
/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: JSF controller ${className} </p>
 *
 */
#if($isSpringBackend)
@ManagedBean (name="${entityControllerJSFVariable}")
@RequestScoped
#elseif($isEJBBackend)
@Named(value = "$entityControllerJSFVariable")
@Default
@RequestScoped
#end
public class ${className} {

#if($isSpringBackend)
	@ManagedProperty("#{${EJBDaoImplVariable}}")
    ${EJBDaoImplClass} $EJBDaoImplVariable;
#elseif($isEJBBackend)
	@Inject 
    private $EJBDaoImplClass $EJBDaoImplVariable;
#end
	
	private $tableClassName $tableVariableName = new $tableClassName();
	private $tableClassName selected$tableClassName;
	
##if($isEJBBackend)
    public List<$tableClassName> findAll () {
		return ${EJBDaoImplVariable}.findAll($tableVariableName);
	}

#if ($hasOnlyOnePrimaryKey)
	public $tableClassName findById ($primaryKeyFullType $primaryKeyVariable) {
		return ${EJBDaoImplVariable}.findById($primaryKeyVariable);
	}

	public void delete ($tableClassName ${tableVariableName}) {
		${EJBDaoImplVariable}.delete (${tableVariableName});
	}
	
	public void delete () {
		${EJBDaoImplVariable}.delete (selected$tableClassName);
	}
	
#end

#if ($hasSemanticReference)
##	public $tableClassName findBySemanticReference ($primaryKeyFullType $primaryKeyVariable) {
##		return ${EJBDaoImplVariable}.findBySemanticReference (${tableClassName}.class, $primaryKeyVariable);
##	}
##	
#end

	public String create () {
		${EJBDaoImplVariable}.create($tableVariableName);
		return "success";
	}
	
	public $tableClassName update () {
		return ${EJBDaoImplVariable}.update (${tableVariableName});
	}
	
	public $tableClassName get$tableClassName() {
	    return $tableVariableName;
	}
	
	public void set$tableClassName ($tableClassName $tableVariableName) {
	    this.$tableVariableName = $tableVariableName;
	}	
	
	public $tableClassName getSelected$tableClassName() {
	    return selected$tableClassName;
	}
	
	public void setSelected$tableClassName ($tableClassName $tableVariableName) {
	    this.selected$tableClassName = $tableVariableName;
	}		
	
	//TODO put in upperclass
    public String displayInput () {
		return "success";
	}	

#putGetterSetter ($EJBDaoImplClass $EJBDaoImplVariable)

$!updatedAreaImplementation
}