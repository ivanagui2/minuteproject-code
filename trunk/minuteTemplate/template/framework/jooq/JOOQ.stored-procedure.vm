#exposeVariableEntitySpecific()
#exposeEnvironmentParams()
#set($hasReturn = $jooqUtils.hasReturn($table))
/**
 * This class is generated by jOOQ
 */
package $packageName;

import org.jooq.Field;
import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.0.2"},
                            comments = "This class is generated by jOOQ")
public class $className extends AbstractRoutine<$returnType> {

	private static final long serialVersionUID = $serialValue;
    
#if($hasReturn)
    /**
     * An uncommented item
     */
    public static final Parameter<$returnType> RETURN_VALUE = createParameter("RETURN_VALUE", $jooqReturnColumnFullType);

#end
#foreach($column in ${table.columns})
##if($jooqUtils.ge
#putJOOQColumnParam()
    /**
     * An uncommented item
     */
    public static final Parameter<$jooqColumnFullType> $columnVariableUpperCase = createParameter("$column.name", $jooqFullType); //$jooqFullType

#end

    /**
     * Create a new routine call instance
     */
    public $className() {
        super($jooqDialect, "$table.name", $jooqModelConstant, $jooqReturnColumnFullType);
#if($hasReturnValue)
        setReturnParameter(RETURN_VALUE);
#end
#foreach($column in ${table.columns})
#putJOOQColumnParam()
        addInParameter($columnVariableUpperCase);
#end
    }

#foreach($column in ${table.columns})
#putJOOQColumnParam()
    /**
     * Set the <code>$column.name</code> parameter to the routine
     */
    public void set$columnClass($jooqColumnFullType value) {
        setValue($columnVariableUpperCase, value);
    }

    /**
     * Set the <code>$column.name</code> parameter to the function
     * <p>
     * Use this method only, if the function is called as a {@link org.jooq.Field} in a {@link org.jooq.Select} statement!
     */
    public void set$columnClass(Field<$jooqColumnFullType> field) {
        setField($columnVariableUpperCase, field);
    }
    
#end

}
