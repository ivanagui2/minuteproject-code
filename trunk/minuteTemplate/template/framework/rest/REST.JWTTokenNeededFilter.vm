#exposeVariableModelSpecific()
package $packageName;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.exception.ExceptionUtils;

import javax.annotation.Priority;
import javax.ws.rs.Priorities;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.Provider;
import java.io.IOException;

// inspired by https://antoniogoncalves.org/2016/10/03/securing-jax-rs-endpoints-with-jwt/
@Provider
@JWTTokenNeeded
@Priority(Priorities.AUTHENTICATION)
@Slf4j
public class $className implements ContainerRequestFilter {

    //@Inject
    //To fix not working
    //private KeyGenerator keyGenerator;

    @Override
    public void filter(ContainerRequestContext requestContext) throws IOException {

        // Get the HTTP Authorization header from the request
        String authorizationHeader = requestContext.getHeaderString(HttpHeaders.AUTHORIZATION);

        // Extract the token from the HTTP Authorization header
        String token = authorizationHeader.substring("Bearer".length()).trim();

        try {

            // Validate the token
##            KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
##             Key key = keyGenerator.generateKey();
##            Jwts.parser().setSigningKey(key).parseClaimsJws(token);
            JWTUtils.validateToken(token);
##            //TODO get user out of token

        } catch (Exception e) {
            //log.error(">> invalid token : " + token);
            log.error(">> invalid token exception : " + e);
            //log.error(">> invalid token exception stack : " + ExceptionUtils.getStackTrace(e));
            requestContext.abortWith(Response.status(Response.Status.UNAUTHORIZED).build());
        }
    }
}