#exposeVariableModelSpecific()
#exposeRESTModelCache()
package $packageName;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import java.io.IOException;
import java.util.Properties;

import $modelRestCacheableImport;

@Path("${model.name}/applicationinfo")
@Produces(MediaType.APPLICATION_JSON)
@Data
@Slf4j
public class ApplicationInfoResource {

	@Context
	HttpServletRequest req;

	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@${modelRestCacheableClass}(cc = "public, max-age=36000")
    public ApplicationInfo getApplicationInfo() throws IOException{
        return getApplicationInfoDetails();
    }
    
    @Data
    class ApplicationInfo {
    	private String environment;
    	private String buildNumber;
    	private String buildTime;
    	private String buildId;
    	private String applicationVersion;
    	private String vcsRevision;
    }

    public ApplicationInfo getApplicationInfoDetails() {
        ApplicationInfo applicationInfo = new ApplicationInfo();
        try {
            Properties props = new Properties();
            props.load(getClass().getResourceAsStream("/application.properties"));
            
            applicationInfo.buildNumber = props.getProperty("build.number");
            applicationInfo.buildTime = props.getProperty("build.time");
            applicationInfo.buildId = props.getProperty("build.id");
            applicationInfo.applicationVersion = props.getProperty("application.version");
            applicationInfo.vcsRevision = props.getProperty("vcs.version");
            
            //TODO environment is found from the file referenced by system properties passed as a runtime parameter
            //via system prop -Denv="PROTO" or -Denvironment="PROTO" System.getProperty("environment")
			String environment = System.getProperty("environment");
            if (environment == null) {
				environment = System.getProperty("env");
			}
            if (environment == null) {
				environment = "TBD";
			} 
            applicationInfo.environment = environment;
        } catch (IOException ioe) {
            log.error("cannot load application.properties");
        }
        return applicationInfo;
    }

}