#exposeQuerySpecific()
#exposeSDDSpring()
#putImportQuerySDDBean()
#addedAreas()
#exposeJPASpecifics()
package $packageName;

$!updatedAreaImport
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

import javax.annotation.Resource;
import javax.ejb.Stateful;
import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceContextType;
import javax.transaction.UserTransaction;

import $sddOutputBeanCollectionImport;
import $sddOutputBeanImport;
import $sddInputBeanImport;
import $sddDaoInterfaceImport;

/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: remote interface for ${className} service </p>
 *
 */
@Stateless
public class ${className} {

	@PersistenceContext(unitName = "$unitName", type = PersistenceContextType.EXTENDED)
    private EntityManager em;

#set ($fullQuery = $queryUtils.getFullQueryQuestionMark($query))
    public static final String QUERY_NATIVE = "$fullQuery";

    @PersistenceContext(unitName = "$persistenceUnitName")  
    EntityManager entityManager;  
#exposeQueryUpdatedAreas("SDD_EXECUTE_GET")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    public $sddOutputBeanCollectionClass execute ($sddInputBeanClass $sddInputBeanVariable) {
        $sddOutputBeanCollectionClass $sddOutputBeanCollectionVariable = new $sddOutputBeanCollectionClass();
        List<$sddOutputBeanClass> list = executeJDBC ($sddInputBeanVariable);
        ${sddOutputBeanCollectionVariable}.set$sddOutputBeanClasses (list);
        return ${sddOutputBeanCollectionVariable};
    }
#end
$!updatedAreaEnd

#exposeQueryUpdatedAreas("SDD_EXECUTE_JDBC")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    public List<$sddOutputBeanClass> executeJDBC($sddInputBeanClass $sddInputBeanVariable) {
        List<$sddOutputBeanClass> list = new ArrayList<$sddOutputBeanClass>();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        Connection conn = null;
        try {
            conn = getConnection();
            pstmt = conn.prepareStatement(QUERY_NATIVE);
#foreach($column in $inputBean.columns)
#putColumnParamNaming()
#set($columnType = $statementUtils.getJdbcType($column))
            pstmt.set$columnType($velocityCount, ${sddInputBeanVariable}.get$columnClass()); 
#end            
            rs = pstmt.executeQuery();
            while (rs.next()) {
                $sddOutputBeanClass $sddOutputBeanVariable = new $sddOutputBeanClass();
#foreach($column in $outputBean.columns)
#putColumnParamNaming()
#set($columnType = $statementUtils.getJdbcType($column))
                ${sddOutputBeanVariable}.set$columnClass(rs.get${columnType}($velocityCount)); 
#end
                list.add(${sddOutputBeanVariable});
            }
        } catch (Exception e) {
              e.printStackTrace();
        } finally {
          try {
            rs.close();
            pstmt.close();
            conn.close();
          } catch (Exception e) {
            e.printStackTrace();
          }
        }
        return list;
    }
#end
$!updatedAreaEnd

//if JPA2 implementation is hibernate
    @SuppressWarnings("deprecation")   
    public Connection getConnection() throws HibernateException {  
        Session session = getSession();  
        Connection connection = session.connection();  
        return connection;  
    } 
    
    private Session getSession() {  
        Session session = (Session) entityManager.getDelegate();  
        return session;  
    }
    
$!updatedAreaImplementation

$!updatedAreaImplementation
}