#exposeEJBDomainObjectSpecific()
#exposeJPASpecifics()
#exposeEJBProperties()
package $packageName;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;

import javax.annotation.Resource;
import javax.ejb.Stateful;
import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceContextType;
import javax.transaction.UserTransaction;

#if($isRestified)
#exposeRESTURLServer()
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import javax.xml.bind.JAXBElement;
#end

import $importDomainObjectUML;
#if($implementInterface)
import $EJBDaoRemoteInterfaceImport;
#end
/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: remote interface for ${className} service </p>
 *
 */
#if($isRestified)
@Path ("$restXmlServerUrl")
@Produces ({"application/xml", "application/json"})
@Consumes ({"application/xml", "application/json"})
#end
@Stateless ##(name="$EJBDaoImplVariable")
public class ${className} #if($implementInterface)implements $EJBDaoRemoteInterfaceClass#end {
 
#if($isRestified)
	@Context
	private UriInfo uriInfo;
#end
	@PersistenceContext(unitName = "$persistenceUnitName")
    private EntityManager em;

    public List<$tableClassName> findAll ($tableClassName $tableVariableName) {
		Query query = em.createQuery("select $tableVariableName from $tableClassName $tableVariableName");
		return query.getResultList();
	}

#if($isRestified)
	@GET
	@Produces (MediaType.APPLICATION_XML)	
#end
    public List<$tableClassName> findAll () {
		Query query = em.createQuery("select $tableVariableName from $tableClassName $tableVariableName");
		return query.getResultList();
	}
	
#if ($hasOnlyOnePrimaryKey)
#if($isRestified)
	@GET
	@Path("{$primaryKeyVariable}")
	@Produces (MediaType.APPLICATION_XML)	
#end	
	public $tableClassName findById (@PathParam ("$primaryKeyVariable") $primaryKeyFullType $primaryKeyVariable) {
		return em.find (${tableClassName}.class, $primaryKeyVariable);
	}

#end
#if ($hasSemanticReference)
	public $tableClassName findBySemanticReference ($primaryKeyFullType $primaryKeyVariable) {
		return em.find (${tableClassName}.class, $primaryKeyVariable);
	}
	
#end
#if($isRestified)
	@POST
#end
	public $tableClassName create ($tableClassName $tableVariableName) {
		em.persist (${tableVariableName});
		return $tableVariableName;
	}
	
	public $tableClassName update ($tableClassName $tableVariableName) {
		em.merge (${tableVariableName});
		return $tableVariableName;
	}
	
	public void delete ($tableClassName $tableVariableName) {
		em.remove (${tableVariableName});
	}
		
}