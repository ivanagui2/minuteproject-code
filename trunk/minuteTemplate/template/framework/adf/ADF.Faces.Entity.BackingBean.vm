#exposeADFFacesEntitySpecific()
#exposeADFFacesDataControlEntitySpecific()
#exposeFrontEndBackendBindingType()
#exposeADFFacesSpringModelBindingSpecific()
#set($thisTable=$table)
#set($beanVOADFFacesVariable = $formatUtils.getJavaNameVariableConvertReservedWord($beanVOADFFacesVariable))
package $packageName;

import $beanVOADFFacesImport;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;

import javax.faces.component.UIComponent;
import javax.faces.event.ActionEvent;
import javax.faces.application.FacesMessage;
import javax.faces.component.UISelectItems;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

import oracle.adf.model.BindingContext;
import oracle.adf.view.rich.component.rich.layout.RichPanelTabbed;
import oracle.adf.view.rich.component.rich.layout.RichShowDetailItem;
import oracle.adf.view.rich.component.rich.nav.RichCommandLink;
import oracle.adf.view.rich.component.rich.input.RichSelectManyShuttle;

import javax.faces.model.SelectItem;

import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import org.apache.myfaces.trinidad.event.LaunchEvent;

import eu.adf.fwk.query.QueryRequest;
import eu.adf.fwk.utils.TablePaginationUtils;
import eu.adf.fwk.utils.EntityPaginator;

import $beanVOADFFacesImport;
import $beanVOADFFacesQueryResponseImport;
import $beanVOADFFacesQueryRequestImport;

#exposeADFFacesEntityImport()
import $beanADFFacesSpringServiceClass;
#exposeADFFacesSpringBindingSpecific4Entity($table)
#foreach ($reference in $table.parents)
#set($foreignTable=$reference.foreignTable)
#if ($tableUtils.isAdminContentType($foreignTable))
#exposeADFFacesSpringBindingSpecific4Entity($foreignTable)
import $beanADFFacesSpringServiceImport;
#end
#end

import $beanADFFacesSpringAppContextLoaderImport;

public class $className {
    
    private EntityPaginator<$beanVOADFFacesQueryRequestClass> ${domainVariableName}Table;
    private String ${domainVariableName}Name;
    private String ${domainVariableName}Reference;
    private RichPanelTabbed panelTab;
    private $beanVOADFFacesClass $beanVOADFFacesVariable = new $beanVOADFFacesClass();
    private $beanVOADFFacesClass search$beanVOADFFacesVariable = new $beanVOADFFacesClass();
    private Boolean displayResults = true;
    private Boolean displaySearch = false;
    private Boolean searchAny = false;
    private Boolean searchAll = true;
    private Boolean searchEquals = false;
    private Boolean searchContains = false;
    private Boolean searchLike = true;
    private Boolean searchCaseSensitive = false;

#exposeADFFacesSpringBindingSpecific4Entity($table)
    private $beanADFFacesSpringServiceClass $beanADFFacesSpringServiceVariable;
#foreach ($reference in $table.distinctParentsType)
#set($foreignTable=$reference.foreignTable)
#if ($tableUtils.isAdminContentType($foreignTable))
#exposeADFFacesSpringBindingSpecific4Entity($foreignTable)
    $beanADFFacesSpringServiceClass $beanADFFacesSpringServiceVariable;
#end
#end

    public $className() {
        ${domainVariableName}Table = new EntityPaginator<$beanVOADFFacesQueryRequestClass>(${beanVOADFFacesQueryRequestClass}.class, "list${domainClassName}");
#if($runTimeErrorSolved)
        ${domainVariableName}Table.refreshPagination();
#end
#exposeADFFacesSpringBindingSpecific4Entity($table)
        $beanADFFacesSpringServiceVariable = ($beanADFFacesSpringServiceClass)${beanADFFacesSpringAppContextLoaderClass}.getContextLoader().getAppContext().getBean("$beanADFFacesSpringServiceVariable");
#foreach ($reference in $table.distinctParentsType)
#set($foreignTable=$reference.foreignTable)
#if ($tableUtils.isAdminContentType($foreignTable))
#exposeADFFacesSpringBindingSpecific4Entity($foreignTable)
        $beanADFFacesSpringServiceVariable = ($beanADFFacesSpringServiceClass)${beanADFFacesSpringAppContextLoaderClass}.getContextLoader().getAppContext().getBean("$beanADFFacesSpringServiceVariable");
#end
#end
    }
#putGetterSetter ($beanVOADFFacesClass $beanVOADFFacesVariable)

#putGetterSetterAlt ($beanVOADFFacesClass "Search$beanVOADFFacesVariable" "search$beanVOADFFacesVariable")

#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
    List all${childrenListClass};
    List selected${childrenListClass};
    private RichSelectManyShuttle ${childrenListVariable}Sms;
    private UISelectItems ${childrenListVariable}Si;
	
    public List getAll${childrenListClass}() {
#exposeADFFacesSpringBindingSpecific4Entity($table)
      if (all${childrenListClass} == null) {
        all${childrenListClass} = new ArrayList<javax.faces.model.SelectItem>();
        for ($targetTableName entity : ${beanADFFacesSpringServiceVariable}.get${childrenListClass}()) {
           all${childrenListClass}.add(new javax.faces.model.SelectItem(entity));
        }
      }
      return all${childrenListClass};
    }
	
    public List getSelected${childrenListClass}() {
      if (selected${childrenListClass} == null) {
         selected${childrenListClass} = new ArrayList<javax.faces.model.SelectItem>();
      }
      return selected${childrenListClass};   
    }
   
    public void setSelected${childrenListClass}(List selectedItems) {
        this.selected${childrenListClass} = selectedItems;
    }

    public void set${childrenListClass}Sms(RichSelectManyShuttle ${childrenListVariable}Sms) {
        this.${childrenListVariable}Sms = ${childrenListVariable}Sms;
    }
	
    public RichSelectManyShuttle get${childrenListClass}Sms() {
        return ${childrenListVariable}Sms;
    }
	
    public void set${childrenListClass}Si(UISelectItems ${childrenListVariable}Si) {
        this.${childrenListVariable}Si = ${childrenListVariable}Si;
    }
	
    public UISelectItems get${childrenListClass}Si() {
        return ${childrenListVariable}Si;
    }
	
#end

    public void set${domainClassName}Table(EntityPaginator<$beanVOADFFacesQueryRequestClass> table) {
        this.${domainVariableName}Table = table;
    }

    public EntityPaginator<$beanVOADFFacesQueryRequestClass> get${domainClassName}Table() {
        return ${domainVariableName}Table;
    }

    public String get${domainClassName}Name() {
        return ${domainVariableName}Name;
    }

    public void set${domainClassName}Reference(String ${domainVariableName}Reference) {
        this.${domainVariableName}Reference = ${domainVariableName}Reference;
    }

    public String get${domainClassName}Reference() {
        return ${domainVariableName}Reference;
    }

    public void doSearch(ActionEvent actionEvent) {
        display(this.search$beanVOADFFacesVariable);        
    }

    public void displayAll(ActionEvent actionEvent) {
        displayAll();
#if($runTimeErrorSolved)
        ${domainVariableName}Table.refreshPagination();
#end
    }

    public void displayAll() {
        display(new $beanVOADFFacesClass());
    }
	
    public void display($beanVOADFFacesClass $beanVOADFFacesVariable) {
        BindingContext bindingCtx = BindingContext.getCurrent();
        BindingContainer bindings = bindingCtx.getCurrentBindingsEntry();
        $beanVOADFFacesQueryRequestClass request = new $beanVOADFFacesQueryRequestClass();
        request.set$beanVOADFFacesClass($beanVOADFFacesVariable);
        request.setMatchType(searchAny?QueryRequest.PrototypeMatchType.ANY:QueryRequest.PrototypeMatchType.ALL);
        request.setType(getPrototypeType());
        request.setCaseSensitiveness(searchCaseSensitive?QueryRequest.PrototypeCase.SENSITIVE:QueryRequest.PrototypeCase.INSENSITIVE);
        Map mapParam = new HashMap();
        mapParam.put("request", request); 
        OperationBinding ob = bindings.getOperationBinding("list$domainClassName");
        ob.getParamsMap().putAll(mapParam);
        ob.execute();
        $beanVOADFFacesQueryResponseClass result = ($beanVOADFFacesQueryResponseClass)ob.getResult();
        ${domainVariableName}Table.getRequest().getCriterias().clear();
        ${domainVariableName}Table.setPageNumber(1);
    }
	
	private QueryRequest.PrototypeType getPrototypeType() {
	    if (searchLike)
		   return QueryRequest.PrototypeType.LIKE;
	    if (searchContains)
		   return QueryRequest.PrototypeType.CONTAINS;
		return QueryRequest.PrototypeType.EQUALS;
	}

    public void handleLaunchEdit${entityADFClass}Dlg(LaunchEvent launchEvent) {
        RichCommandLink comp = (RichCommandLink)launchEvent.getComponent();
##works for one pk only
        String ${entityADFVariable}Reference = (String) comp.getAttributes().get("${entityADFVariable}Reference");
        //Pass the current value of the field into the dialog
		System.out.println(">>>>>>>>>>>> ${entityADFVariable}Reference "+${entityADFVariable}Reference);
        launchEvent.getDialogParameters().put("${entityADFVariable}Reference", ${entityADFVariable}Reference);
    }

    public void set${domainClassName}Name(String ${domainVariableName}Name) {
        this.${domainVariableName}Name = ${domainVariableName}Name;
    }

    public void setPanelTab(RichPanelTabbed panelTab) {
        this.panelTab = panelTab;
    }

    public RichPanelTabbed getPanelTab() {
        return panelTab;
    }

    public void create${domainClassName}(ActionEvent actionEvent) {
        BindingContext bindingCtx = BindingContext.getCurrent();
        BindingContainer bindings = bindingCtx.getCurrentBindingsEntry();
        Map mapParam = new HashMap();
        mapParam.put("${domainVariableName}", this.${beanVOADFFacesVariable}); //the variable name of the operation signature has to be passed
        OperationBinding ob = bindings.getOperationBinding("createOrUpdate${domainClassName}");
        ob.getParamsMap().putAll(mapParam);
        ob.execute();
		displayAll();
        ${beanVOADFFacesVariable} = new ${beanVOADFFacesClass}();
        List<UIComponent> childUIComponent = this.panelTab.getChildren();
        
        if (childUIComponent != null && childUIComponent.size() > 0) {
        
            for (int i = 0; i < childUIComponent.size(); i++) {
                if (childUIComponent.get(i) instanceof RichShowDetailItem) {
                    if (i == 0) {
                        ((RichShowDetailItem)childUIComponent.get(i)).setDisclosed(true);
                    } 
                    else {
                        ((RichShowDetailItem)childUIComponent.get(i)).setDisclosed(false);
                   }
                }
            }
        }
        
    }
	
#foreach ($reference in $table.parents)
#set($foreignTable=$reference.foreignTable)
#if ($tableUtils.isAdminContentType($foreignTable))
#exposeADFFacesSpringBindingSpecific4Entity($foreignTable)
#putReferenceParams2()
#set($columnClass=$referenceUtils.getColumnClassNameForLinkTable($database, $linkedColumn))
    public List<SelectItem> get${localColumnClass}List() {
        List<SelectItem> list = new ArrayList<SelectItem>();
        for ($domainClassImport element : ${beanADFFacesSpringServiceVariable}.getList()) {
            list.add(new SelectItem(element.get$columnClass(),element.get$columnClass()));
        }
        return list;
    }
#end
#end

    public void setDisplayResults(Boolean displayResults) {
        this.displayResults = displayResults;
    }

    public Boolean getDisplayResults() {
        return displayResults;
    }

    public void setDisplaySearch(Boolean displaySearch) {
        this.displaySearch = displaySearch;
    }

    public Boolean getDisplaySearch() {
        return displaySearch;
    }
	
    public void setSearchAny(Boolean searchAny) {
        this.searchAny = searchAny;
    }

    public Boolean getSearchAny() {
        return searchAny;
    }

    public void setSearchAll(Boolean searchAll) {
        this.searchAll = searchAll;
    }

    public Boolean getSearchAll() {
        return searchAll;
    }
	
    public void setSearchEquals(Boolean searchEquals) {
        this.searchEquals = searchEquals;
    }

    public Boolean getSearchEquals() {
        return searchEquals;
    }

    public void setSearchContains(Boolean searchContains) {
        this.searchContains = searchContains;
    }

    public Boolean getSearchContains() {
        return searchContains;
    }

    public void setSearchLike(Boolean searchLike) {
        this.searchLike = searchLike;
    }

    public Boolean getSearchLike() {
        return searchLike;
    }

    public void setSearchCaseSensitive(Boolean searchCaseSensitive) {
        this.searchCaseSensitive = searchCaseSensitive;
    }

    public Boolean getSearchCaseSensitive() {
        return searchCaseSensitive;
    }
	
    public void setSearchCaseInsensitive(Boolean searchCaseSensitive) {
        this.searchCaseSensitive = !searchCaseSensitive;
    }

    public Boolean getSearchCaseInsensitive() {
        return !searchCaseSensitive;
    }
}
