#exposeQuerySpecific()
#exposeSDDSpring()
#putImportQuerySDDBean()
#addedAreas()
package $packageName;

$!updatedAreaImport
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.io.*;
import java.sql.*;

import javax.servlet.http.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;


import oracle.adf.view.rich.component.rich.data.RichTable;
import oracle.adf.view.rich.context.AdfFacesContext;
import oracle.adf.view.rich.event.QueryEvent;

import org.apache.myfaces.trinidad.event.RangeChangeEvent;
import org.apache.myfaces.trinidad.event.RowDisclosureEvent;

import net.sf.minuteproject.adf.utils.ADFUtils;

import java.awt.event.ActionEvent;

import java.util.HashMap;
import java.util.Map;

#exposeChartSpecific()
#if ($isChartLayout)
#end

import $sddOutputBeanCollectionImport;
import $sddOutputBeanImport;
#if($isNotVoidInput)
import $sddInputBeanImport;
#end
##import $sddDaoInterfaceImport;
import $sddServiceInterfaceImport;
/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: remote interface for ${className} service </p>
 *
 */
public class ${className} {

    ${sddServiceInterfaceClass} $sddServiceInterfaceVariable;

#if($isNotVoidInput)
    private $sddInputBeanClass $sddInputBeanVariable = new $sddInputBeanClass();
#end
    private $sddOutputBeanCollectionClass $sddOutputBeanCollectionVariable;
    private $sddOutputBeanClass selected$sddOutputBeanClass;

#if ($isChartLayout)
#if($isBarChart)
##    private CartesianChartModel categoryModel;  
##
##    public CartesianChartModel getCategoryModel() {  
##        return categoryModel;  
##    }  
##
##    public CartesianChartModel createCategoryModel() {  
##        execute();
##        categoryModel = new CartesianChartModel();  
#foreach($column in $dimensions)
#putColumnParamNaming()
#set($dimVar = "${columnVar}$velocityCount")
##        ChartSeries $dimVar = new ChartSeries();  
##        ${dimVar}.setLabel("$columnClass");
##        for ($sddOutputBeanClass var : getOutputList()) {
##            ${dimVar}.set(var.get$outputBeanDimension1(), var.get$outputBeanDimensionValue());
##        }
##        categoryModel.addSeries(${dimVar});  
#end
##        return categoryModel;
##    }
##    
#end
#if($isPieChart)
##    private PieChartModel pieModel;
##    public PieChartModel getPieModel() {  
##        return pieModel;  
##    }  
##    
##    public PieChartModel createPieModel() {
##        execute();
##        pieModel = new PieChartModel();  
##        for ($sddOutputBeanClass var : getOutputList()) {
##            pieModel.set(var.get$outputBeanDimension1(), var.get$outputBeanDimensionValue());
##        }
##        return pieModel;
##    }
##
#end
#end

    public String search() {
       System.out.println("   >>> search !!!!");
       try {
         Map<String,Object> params = new HashMap<String,Object>();
         ADFUtils.invokeOperation("reviewOffTopic");     
         ADFUtils.refreshMainPage();
      } catch(Exception e){

      }

      return "";
    }
#exposeQueryUpdatedAreas("SDD_EXECUTE")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    public $sddOutputBeanCollectionClass execute () {
	    System.out.println(">>>>>> execute !!!");
        $sddOutputBeanCollectionVariable = ${sddServiceInterfaceVariable}.execute(#if($isNotVoidInput)${sddInputBeanVariable}#end);
        return $sddOutputBeanCollectionVariable;
    }
#end
$!updatedAreaEnd

#set ($table = $query.outputBean)
#putImportSDDBean()
    public List<$sddOutputBeanClass> getOutputList() {
        return ($sddOutputBeanCollectionVariable==null)?new ArrayList<$sddOutputBeanClass>():${sddOutputBeanCollectionVariable}.get${beanClass}s();
    }

#if($isNotVoidInput)
#putGetterSetter($sddInputBeanClass, $sddInputBeanVariable)
#end
#putGetterSetter($sddServiceInterfaceClass, $sddServiceInterfaceVariable)
#putGetterSetterAlt($sddOutputBeanClass, "Selected$sddOutputBeanClass", "selected$sddOutputBeanClass")

   //selection listner part
   
  public void selectionEvent(org.apache.myfaces.trinidad.event.SelectionEvent selectionEvent) {
    System.out.println("selection event!");

    /*
    getDetaillog().setVisible(false);
    getHeaderlog().setVisible(true);

  */
  }

  public void queryListener(QueryEvent queryEvent) {
     System.out.println("queryListener event!");
  }

  public void rangeChangeListener(RangeChangeEvent rangeChangeEvent) {
     System.out.println("rangeChangeListener event!");
  }
  
  public String selectCandidateForExclusion(ActionEvent event) {
    
    return "";
  }
  
  public void rowDisclosureListener(RowDisclosureEvent rowDisclosureEvent) {
    /*
    RichTable richTable = (RichTable)rowDisclosureEvent.getSource();
    FacesCtrlHierBinding.FacesModel cm =
      (FacesCtrlHierBinding.FacesModel)richTable.getValue();
    RowKeySet rowKeySet = richTable.getSelectedRowKeys();
    Object[] rowKeySetArray = rowKeySet.toArray();
    if(null != rowKeySetArray && rowKeySetArray.length >= 1){
      richTable.setRowKey(rowKeySetArray[0]);
      JUCtrlHierNodeBinding rowData = (JUCtrlHierNodeBinding)cm.getRowData();
    }*/
    $sddOutputBeanClass candidate = ADFUtils.getDisclosedTableRowValue(rowDisclosureEvent, ${sddOutputBeanClass}.class);    
    if(null != candidate){
      System.out.println("rowDisclosureListener event!"+candidate);
    }
  }
  
  public void rowDisclosureListenerWithPartialRefresh(RowDisclosureEvent rowDisclosureEvent) {
      rowDisclosureListener(rowDisclosureEvent);
      AdfFacesContext adfFacesContext = null;
      adfFacesContext = AdfFacesContext.getCurrentInstance();
      adfFacesContext.addPartialTarget(((RichTable)rowDisclosureEvent.getSource()).getParent());
  }

$!updatedAreaImplementation

}