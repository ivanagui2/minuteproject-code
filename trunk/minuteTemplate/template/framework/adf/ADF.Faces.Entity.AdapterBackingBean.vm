#exposeADFFacesEntitySpecific()
#exposeADFFacesDataControlEntitySpecific()
#exposeFrontEndBackendBindingType()
#exposeADFFacesSpringModelBindingSpecific()
#set($thisTable=$table)
#set($thisClassName=$className)
#set($thisDomainVariableName=$domainVariableName)
#set($thisDomainClassName=$domainClassName)
#set($thisBeanVOADFFacesClass=$beanVOADFFacesClass)
#set($thisBeanVOADFFacesVariable = $beanVOADFFacesVariable)
#set($thisPrimaryKeyType=$primaryKeyType)
package $packageName;

import $beanVOADFFacesImport;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Date;
import java.util.ArrayList;

import javax.faces.component.UIComponent;
import javax.faces.event.ActionEvent;
import javax.faces.application.FacesMessage;
import javax.faces.component.UISelectItems;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

import oracle.adf.model.BindingContext;
import oracle.adf.view.rich.component.rich.layout.RichPanelTabbed;
import oracle.adf.view.rich.component.rich.layout.RichShowDetailItem;
import oracle.adf.view.rich.component.rich.nav.RichCommandLink;
import oracle.adf.view.rich.component.rich.input.RichSelectManyShuttle;

import javax.faces.model.SelectItem;

import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import org.apache.myfaces.trinidad.event.LaunchEvent;

import net.sf.minuteproject.adf.query.QueryRequest;
import net.sf.minuteproject.adf.utils.TablePaginationUtils;
import net.sf.minuteproject.adf.utils.EntityPaginator;

import oracle.adf.view.rich.component.rich.data.RichTable;

import $beanVOADFFacesImport;
import $beanVOADFFacesQueryResponseImport;
import $beanVOADFFacesQueryRequestImport;
#set($ADFFEBEConverterImport=$commonUtils.getEntityLevelTemplateFullPath($model, $template, $templateADFFEBEConverterUtils))
import static $ADFFEBEConverterImport.*;

#exposeADFFacesEntityImport()
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
#exposeADFFacesSpringBindingSpecific4Entity($targetTable)
import $beanADFFacesSpringServiceImport;
#end
#foreach ($reference in $table.parents)
#set($foreignTable=$reference.foreignTable)
#if ($tableUtils.isAdminContentType($foreignTable))
#exposeADFFacesSpringBindingSpecific4Entity($foreignTable)
import $beanADFFacesSpringServiceImport;
#end
#end
#foreach ($reference in $table.distinctChildrenType)
#putReferenceParams2()
#if(!$linktableDB.isManyToMany())
#set($foreignTable=$reference.foreignTable)
#exposeADFFacesSpringBindingSpecific4Entity($foreignTable)
import $beanADFFacesSpringServiceImport;
#exposeADFFacesDataControlEntitySpecificForTable($foreignTable)
import $beanVOADFFacesQueryResponseImport;
import $beanVOADFFacesQueryRequestImport;
import $beanVOADFFacesImport;
#end
#end
import $beanADFFacesSpringAppContextLoaderImport;

public class $thisClassName {
    
    private String ${thisDomainVariableName}Name;
    private String ${thisDomainVariableName}Reference;
    private RichPanelTabbed panelTab;
    private $thisBeanVOADFFacesClass _$thisBeanVOADFFacesVariable = new $thisBeanVOADFFacesClass();
    private Boolean displayResults = true;
    private Boolean displaySearch = false;
    private Boolean searchAny = false;
    private Boolean searchAll = true;
    private Boolean searchEquals = false;
    private Boolean searchContains = false;
    private Boolean searchLike = true;
    private Boolean searchCaseSensitive = false;

	protected $thisPrimaryKeyType get${thisDomainVariableName}Param() { return null; }
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
#exposeADFFacesSpringBindingSpecific4Entity($targetTable)
    ${beanADFFacesSpringServiceClass} _$beanADFFacesSpringServiceVariable;
#end
#foreach ($reference in $table.distinctChildrenType)
#putReferenceParams2()
#if(!$linktableDB.isManyToMany())
#set($foreignTable=$reference.foreignTable)
#exposeADFFacesSpringBindingSpecific4Entity($foreignTable)
    $beanADFFacesSpringServiceClass ${beanADFFacesSpringServiceVariable}_;
#exposeADFFacesDataControlEntitySpecificForTable($foreignTable)
    EntityPaginator<$beanVOADFFacesQueryRequestClass> ${childrenListVariable}Table_;
    public EntityPaginator<$beanVOADFFacesQueryRequestClass> get${childrenListClass}Table_() {
        return ${childrenListVariable}Table_;
    }
    private RichTable ${childrenListVariable}TableUIComp = new RichTable();
#putGetterSetterAlt ("RichTable" "${childrenListClass}TableUIComp" "${childrenListVariable}TableUIComp")

    public List<${beanVOADFFacesClass}> get${childrenListClass}() {
        List<${beanVOADFFacesClass}> list = new ArrayList<${beanVOADFFacesClass}>();
        $domainClassImport i = new $domainClassImport();
        // set foreign key 
        i.set${linkedColumnClass}_(get${thisDomainVariableName}Param());
        List<$domainClassImport> elements = ${beanADFFacesSpringServiceVariable}_.findAll(i);
        //convert back
        for ($domainClassImport element : elements) {
           ${beanVOADFFacesClass} var = new ${beanVOADFFacesClass}();
           convert(element, var);
           list.add(var);
        }
        return list;
    }
#end
#end
#foreach ($reference in $thisTable.distinctParentsType)
#set($foreignTable=$reference.foreignTable)
#if ($tableUtils.isAdminContentType($foreignTable))
#exposeADFFacesSpringBindingSpecific4Entity($foreignTable)
##    $beanADFFacesSpringServiceClass $beanADFFacesSpringServiceVariable;
#end
#end

    public $thisClassName() {
        super();
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
#exposeADFFacesSpringBindingSpecific4Entity($targetTable)
        _$beanADFFacesSpringServiceVariable = ($beanADFFacesSpringServiceClass)${beanADFFacesSpringAppContextLoaderClass}.getContextLoader().getAppContext().getBean("$beanADFFacesSpringServiceVariable");
#end
#foreach ($reference in $table.distinctChildrenType)
#putReferenceParams2()
#if(!$linktableDB.isManyToMany())
#set($foreignTable=$reference.foreignTable)
#exposeADFFacesSpringBindingSpecific4Entity($foreignTable)
        ${beanADFFacesSpringServiceVariable}_ = ($beanADFFacesSpringServiceClass)${beanADFFacesSpringAppContextLoaderClass}.getContextLoader().getAppContext().getBean("$beanADFFacesSpringServiceVariable");
#exposeADFFacesDataControlEntitySpecificForTable($foreignTable)
        ${childrenListVariable}Table_ = new EntityPaginator<$beanVOADFFacesQueryRequestClass>(${beanVOADFFacesQueryRequestClass}.class, "list${domainClassName}");
#end
#end
    }

    public ${thisDomainClassName} getConsolidated (${thisDomainClassName} entity) {
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
#exposeADFFacesSpringBindingSpecific4Entity($targetTable)
#set($beanVOADFFacesTargetClass=$commonUtils.getTemplateClassName($targetTable, $template, $templateBeanVOADFFaces))
#set($column=$tableUtils.getPrimaryFirstColumn($targetTable))
#putColumnParams()
        for ($columnType item : getSelected${childrenListClass}()) {
            $beanVOADFFacesTargetClass element = new $beanVOADFFacesTargetClass();
            element.set$columnClass(item);
            entity.add${targetTableName}(element);
        }
#end
        return entity;
    }
	
    public ${thisDomainClassName} getConsolidated () {
        return getConsolidated(_${thisBeanVOADFFacesVariable});
    }
	
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
#exposeADFFacesSpringBindingSpecific4Entity($targetTable)
#set($firstPkColumn=$tableUtils.getPrimaryFirstColumn($targetTable))
#set($firstPkColumnClass=$formatUtils.getJavaName(${firstPkColumn.alias}))
#set($column=$tableUtils.getPrimaryFirstColumn($targetTable))
#putColumnParams()
    List<SelectItem> all${childrenListClass};
    List<$columnType> selected${childrenListClass};
    private RichSelectManyShuttle ${childrenListVariable}Sms;
    private UISelectItems ${childrenListVariable}Si;
	
    public List<SelectItem> getAll${childrenListClass}() {
       if (all${childrenListClass} == null) {
         all${childrenListClass} = new ArrayList<SelectItem>();
         for ($domainClassImport entity : _${beanADFFacesSpringServiceVariable}.getList()) {
            all${childrenListClass}.add(new SelectItem(entity.get${columnClass}()));
         }
       }
       return all${childrenListClass};
    }
	
    public List<$columnType> getSelected${childrenListClass}() {
      if (selected${childrenListClass} == null) {
         selected${childrenListClass} = new ArrayList<$columnType>();
      }
      return selected${childrenListClass};   
    }
   
    public void setSelected${childrenListClass}(List selectedItems) {
        this.selected${childrenListClass} = selectedItems;
    }

    public void set${childrenListClass}Sms(RichSelectManyShuttle ${childrenListVariable}Sms) {
        this.${childrenListVariable}Sms = ${childrenListVariable}Sms;
    }
	
    public RichSelectManyShuttle get${childrenListClass}Sms() {
        return ${childrenListVariable}Sms;
    }
	
    public void set${childrenListClass}Si(UISelectItems ${childrenListVariable}Si) {
        this.${childrenListVariable}Si = ${childrenListVariable}Si;
    }
	
    public UISelectItems get${childrenListClass}Si() {
        return ${childrenListVariable}Si;
    }
	
#end
    public void setDisplayResults(Boolean displayResults) {
        this.displayResults = displayResults;
    }

    public Boolean getDisplayResults() {
        return displayResults;
    }

    public void setDisplaySearch(Boolean displaySearch) {
        this.displaySearch = displaySearch;
    }

    public Boolean getDisplaySearch() {
        return displaySearch;
    }
	
    public void setSearchAny(Boolean searchAny) {
        this.searchAny = searchAny;
    }

    public Boolean getSearchAny() {
        return searchAny;
    }

    public void setSearchAll(Boolean searchAll) {
        this.searchAll = searchAll;
    }

    public Boolean getSearchAll() {
        return searchAll;
    }
	
    public void setSearchEquals(Boolean searchEquals) {
        this.searchEquals = searchEquals;
    }

    public Boolean getSearchEquals() {
        return searchEquals;
    }

    public void setSearchContains(Boolean searchContains) {
        this.searchContains = searchContains;
    }

    public Boolean getSearchContains() {
        return searchContains;
    }

    public void setSearchLike(Boolean searchLike) {
        this.searchLike = searchLike;
    }

    public Boolean getSearchLike() {
        return searchLike;
    }

    public void setSearchCaseSensitive(Boolean searchCaseSensitive) {
        this.searchCaseSensitive = searchCaseSensitive;
    }

    public Boolean getSearchCaseSensitive() {
        return searchCaseSensitive;
    }
	
    public void setSearchCaseInsensitive(Boolean searchCaseSensitive) {
        this.searchCaseSensitive = !searchCaseSensitive;
    }

    public Boolean getSearchCaseInsensitive() {
        return !searchCaseSensitive;
    }
}
