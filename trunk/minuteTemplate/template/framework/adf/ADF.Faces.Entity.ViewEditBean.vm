#exposeADFFacesEntitySpecific()
package $packageName;

import $beanVOADFFacesImport;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCBindingContainer;
import oracle.adf.view.rich.context.AdfFacesContext;

import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import pages.cases.caseType.ViewEditCaseTypeBean;

public class $className {
    
    private ${beanVOADFFacesClass} ${beanVOADFFacesVariable};
    private String ${domainVariableName}CodeParam;
    
    public $className () {
        ${domainVariableName}CodeParam = (String)AdfFacesContext.getCurrentInstance().getDialogService().getInitialDialogParameters().get("${domainClassName}Code");
    }

    public void delete${domainClassName}(DCBindingContainer bindings) {
        this.${domainClassName} = null;
        Map ${domainClassName}Param = new HashMap();
        ${domainClassName}Param.put("${domainClassName}Ref", getCurrent${domainClassName}(bindings));
        OperationBinding ob = bindings.getOperationBinding("delete${domainClassName}");
        ob.getParamsMap().putAll(${domainClassName}Param);
        ob.execute();
    }
    
    public void rollback${domainClassName}() {
        this.${domainClassName} = null;
    }
    
    public void save${domainClassName}(DCBindingContainer bindings) {
        Map ${domainClassName}Param = new HashMap();
        ${domainClassName}Param.put("${domainClassName}", this.${domainClassName});
        OperationBinding ob = bindings.getOperationBinding("createOrUpdate${domainClassName}");
        ob.getParamsMap().putAll(${domainClassName}Param);
        ob.execute();
    }
    
    public void set${domainClassName}($beanVOADFFacesClass ${beanVOADFFacesVariable}) {
        this.${beanVOADFFacesVariable} = ${beanVOADFFacesVariable};
    }

    public ${beanVOADFFacesClass} get${domainClassName}() {
        
        if (${domainClassName}==null) {
            BindingContext bindingCtx = BindingContext.getCurrent();
            BindingContainer bindings = bindingCtx.getCurrentBindingsEntry();
            ${domainClassName} = getCurrent${domainClassName}(bindings);
        }
        return ${domainClassName};
    
    }
    
    private ${beanVOADFFacesClass} getCurrent${domainClassName}(BindingContainer bindings){
#if($tocomment)
        ReferenceDTO ref = new ReferenceDTO();
        ref.setKey(${domainClassName}CodeParam);
        OperationBinding ob = bindings.getOperationBinding("get${domainClassName}");
        ob.getParamsMap().put("reference", ref);
        this.${beanVOADFFacesVariable} = (${beanVOADFFacesClass})ob.execute();
        return ${beanVOADFFacesVariable};
#end
	    return null;
    }

}
