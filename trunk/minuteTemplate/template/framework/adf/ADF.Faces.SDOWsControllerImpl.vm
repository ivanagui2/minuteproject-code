#exposeADFFacesModelSpecific()
#exposeADFFacesDataControlModelSpecific()
#exposeFrontEndBackendBindingType()
#set($thisClassName=$className)
package $packageName;

import eu.adf.fwk.query.QueryRequest;
import eu.adf.fwk.query.QueryResponse;

import $ADFSDOWsDcFaceImport;

#foreach($table in $entities)
#exposeADFFacesEntitySpecific()
#exposeADFFacesDataControlEntitySpecific()
#if(!$isMany2Many)
import $beanVOADFFacesImport;
import $beanVOADFFacesQueryResponseImport;
import $beanVOADFFacesQueryRequestImport;
#end
#end
#if($isBindingSpring)
#foreach($table in $entities)
#exposeVariableEntitySpecific()
#exposeADFFacesSpringBindingSpecific()
#if(!$isMany2Many)
import $beanADFFacesSpringServiceImport;
#end
#end
#end

import java.lang.reflect.InvocationTargetException;

import java.util.List;

import org.apache.commons.beanutils.BeanUtils;

public class $thisClassName implements $ADFSDOWsDcFaceClass {

#if($isBindingSpring)
#foreach($table in $entities)
#exposeVariableEntitySpecific()
#exposeADFFacesSpringBindingSpecific()
#if(!$isMany2Many)
    private $beanADFFacesSpringServiceClass $beanADFFacesSpringServiceVariable;
#end
#end
#end
    public $thisClassName() {
        System.out.println(">>>>>>>>>>> constructor before loading config");
#if($isBindingSpring)
#foreach($table in $entities)
#exposeVariableEntitySpecific()
#exposeADFFacesSpringBindingSpecific()
#if(!$isMany2Many)
        $beanADFFacesSpringServiceVariable = ($beanADFFacesSpringServiceClass)AppContextLoader.getContextLoader().getAppContext().getBean("$beanADFFacesSpringServiceVariable");;
#end
#end
#end
    }
   public void convert(Object input, Object output) {
      try {
         BeanUtils.copyProperties(output, input);
      } catch (IllegalAccessException e) {
      } catch (InvocationTargetException e) {
      }   
   }
   
#foreach($table in $entities)
#exposeADFFacesEntitySpecific()
#exposeADFFacesDataControlEntitySpecific()
#exposeADFFacesSpringBindingSpecific()
#if(!$isMany2Many)
##if ($hasSearch)
  /**
   * @return $beanVOADFFacesQueryResponseClass
   */
  public $beanVOADFFacesQueryResponseClass list$domainClassName($beanVOADFFacesQueryRequestClass request) {
     System.out.println(">>>> list$domainClassName");
     $beanVOADFFacesClass input = request.get${beanVOADFFacesClass}();
     System.out.println(">>>> input "+input);
     if (input==null)
        input = new $beanVOADFFacesClass();
     ${domainClassImport} var = new ${domainClassImport} ();
     convert(var, input);
     List<$domainClassImport> list = ${beanADFFacesSpringServiceVariable}.findAll(var);
	 
     $beanVOADFFacesQueryResponseClass ret = new $beanVOADFFacesQueryResponseClass();
     for($domainClassImport element : list) {
        $beanVOADFFacesClass output = new $beanVOADFFacesClass();
        convert(output, element);
        ret.add$beanVOADFFacesClass(output);
     }
     return ret;
  }
##end

   /**
    * @return $beanVOADFFacesClass
   */
   public $beanVOADFFacesClass get$domainClassName ($beanVOADFFacesClass $beanVOADFFacesVariable) {
      System.out.println(">>>> get$domainClassName");
	  return new $beanVOADFFacesClass();
   }
  
   public $beanVOADFFacesClass createOrUpdate$domainClassName ($beanVOADFFacesClass $beanVOADFFacesVariable){
      System.out.println(">>>> createOrUpdate$domainClassName");
#if($isBindingSpring)
      ${domainClassImport} var = new ${domainClassImport} ();
      convert(var, $beanVOADFFacesVariable);
      ${beanADFFacesSpringServiceVariable}.create(var);
#end
      return $beanVOADFFacesVariable;
   }
  
   public void delete$domainClassName ($beanVOADFFacesClass $beanVOADFFacesVariable){
      System.out.println(">>>> delete$domainClassName");
   }

#end
#end

}
