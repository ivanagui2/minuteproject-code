#generatorSpecific()
#exposeVariableEntitySpecific()
#addedAreas()
#set ($useTemporal = true)
package $packageName;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;

import org.apache.commons.lang.StringUtils;
##if ($model.hasCmisModel())
#set ($applicationJsonDateSerializerImport = $commonUtils.getModelLevelTemplateFullPath($model, $template, "REST.jackson.serializer.date"))
#set ($applicationJsonDateSerializerClass  = $commonUtils.getTemplateClassName($model, $template, "REST.jackson.serializer.date"))
import $applicationJsonDateSerializerImport;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
##end
$!updatedAreaImport
/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: Java Bean containing a collection of ${domainClassName} </p>
 *
 */
public class ${className} {

#foreach($column in ${table.columns})
#if (!$column.hasBeenDuplicated())
#putColumnParamNaming()
#if($hasDefaultValue)
#set($defaultConstant = "__DEFAULT_$formatUtils.getUppercaseUnderscore($column.alias)")
    private final $columnType $defaultConstant = $defaultValue;
#end
#end
#end
#foreach($column in ${table.columns})
#if (!$column.hasBeenDuplicated())
#if (!$column.isArray())
#putColumnParamNaming()
#if($columnUtils.isTimeStampColumn($column))
	@JsonSerialize (using=${applicationJsonDateSerializerClass}.class)
#elseif ($columnUtils.isTimeColumn($column))
#end
    private $columnType $columnVar;
#else
    private List<$columnType> $columnVar;
#end
#end
#end

    /**
    * Default constructor
    */
    public ${className}() {
    }
	
#foreach($column in ${table.columns})
#if (!$column.hasBeenDuplicated())
#if (!$column.isArray())
#putColumnParamNaming()
#if($hasDefaultValue)
#set($defaultConstant = "__DEFAULT_$formatUtils.getUppercaseUnderscore($column.alias)")
    public $columnType get$columnClass() {
        return ($columnVar!=null)?$columnVar:$defaultConstant;
    }
#else
    public $columnType get$columnClass() {
        return $columnVar;
    }
#end
    public void set$columnClass ($columnType $columnVar) {
        this.$columnVar =  $columnVar;
    }
#else
    public List<${columnType}> get${columnClass} () {
        if (${columnVar}==null)
            ${columnVar} = new ArrayList<$columnType>();
        return ${columnVar};
    }

    public void add${columnClass} (${columnType} element) {
        get${columnClass} ().add(element);
    }
    
    public void set$columnClass (String $columnVar) {
    	for (${columnType} element : StringUtils.split($columnVar, ",")) {
        	add${columnClass} (element);
        }
    }
#end
#end
#end

#toString()

$!updatedAreaImplementation
}
