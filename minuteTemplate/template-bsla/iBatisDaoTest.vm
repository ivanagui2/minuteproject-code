#exposeVariableEntitySpecific()
#putImportParams()
package $packageName;

import $importDomainObject;
import $importDaoInterface;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.test.AbstractTransactionalDataSourceSpringContextTests;

public class $className extends AbstractTransactionalDataSourceSpringContextTests {

#set ($springConfig = $bslaLibraryUtils.getModelLevelTemplateFullClassPath($model, $template, "BslaSpringConfig") )
	private BeanFactory beanFactory;
	protected $daoInterfaceClassName $daoInterfaceVariableName;
	private final String config = "${springConfig}.xml";
	
    protected String[] getConfigLocations() {
	// TODO Auto-generated method stub
	    return new String [] {config};
    }
	
	/*
	* Do the insert first.
	* To do the insert do on all mandatory fields;
	* If a mandatory field is a fk => insert the mandatory entity and give the entity value to populate the fk.
	* Then perform load update, delete, loadfirstlevel
	*/
	protected void init() {
		beanFactory = new ClassPathXmlApplicationContext (config);
		$daoInterfaceVariableName = ($daoInterfaceClassName)beanFactory.getBean("$daoInterfaceVariableName");
	}

	public void testInsert$domainClassName () {
    	init();
        $domainClassName ${domainVariableName} = populate$domainClassName ();
    	${daoInterfaceVariableName}.insert${domainClassName}(${domainVariableName});
	}

    public $domainClassName testLoad$domainClassName () {
    	init();
  #set ($method = $testUtils.getTestLookUpMethod($primaryKeyType)) 	
    	$domainClassName ${domainVariableName} = ${daoInterfaceVariableName}.load${domainClassName}($method);
	    return ${domainVariableName};
	}
	
	public void testUpdate$domainClassName () {
    	init();
    	$domainClassName ${domainVariableName} = testLoad$domainClassName ();    	
	    update$domainClassName (${domainVariableName});	
	    ${daoInterfaceVariableName}.update${domainClassName}(${domainVariableName});
	}

    protected $domainClassName update$domainClassName ($domainClassName ${domainVariableName}) {
#foreach ($column in ${table.columns})
#putColumnParams()
#if ($!isPrimaryKey && $!isForeignKey)
       ${domainVariableName}.set$columnClass ($TestUtils.getTestPopulateFieldMethod($column.type,$column.size));
#end
#end
#foreach ($reference in ${parentReferences})
#putReferenceParams()
#getTestDependencies()
$importIbatisTestClass
$ibatisTestClass
       ${domainVariableName}.set$varclass ($TestUtils.getTestPopulateFieldMethod($column.type,$column.size));
#end
       return $domainVariableName;
    }
    
    protected $domainClassName populate$domainClassName () {
       $domainClassName $domainVariableName = new $domainClassName();
#foreach ($column in ${table.columns})
#putColumnParams()
#if ($isMandatory && !$isPrimaryKey && !$isForeignKey)
       ${domainVariableName}.set$columnClass ($TestUtils.getTestPopulateFieldMethod($column.type,$column.size));
#end
#end
       return $domainVariableName;
    }
    
    protected String getString (int length) {
       return StringUtils.substring ("This is a test string",0,length);
    }

    protected Integer getInteger () {
       return new Integer (100);
    }
    
    protected Long getLong () {
       return new Long (100);
    }

    protected Boolean getBoolean () {
       return new Boolean (false);
    }

    protected Date getDate () {
       return new Date();
    }

    protected Timestamp getTimestamp () {
       return new Timestamp(getDate().getTime());
    }
        
}