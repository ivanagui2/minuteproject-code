#exposeVariableEntitySpecific()
#putImportParams()
package $packageName;

import $importDomainObject;
import $importDaoInterface;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import net.sf.minuteProject.architecture.bsla.unittest.AbstractTransactionalDataSourceSpringContextBslaDaoTests;
import org.springframework.context.support.ClassPathXmlApplicationContext;
// parent dependency dao test class
#foreach ($reference in ${parentReferences})
#putReferenceParams()
#putDependencies()
import $dependentImportTestDaoClass;
#end
// parent dependency domain class
#foreach ($reference in ${parentReferences})
#putReferenceParams()
#putDependencies()
import $dependentImportDomainClassName;
#end


public class $className extends AbstractTransactionalDataSourceSpringContextBslaDaoTests {

#set ($springConfig = $bslaLibraryUtils.getModelLevelTemplateFullClassPath($model, $template, "BslaSpringConfig") )
	private BeanFactory beanFactory;
	protected $daoInterfaceClassName $daoInterfaceVariableName;

	private final String TEST_DATA_ACCESS_CONTEXT = "${springConfig}.xml";
	
    protected String[] getConfigLocations()
    {
        return new String[]
            {TEST_DATA_ACCESS_CONTEXT};
    }

	@Override
	public void onSetUpInBslaTestTransaction() {
	
	}	
	/*
	* Do the insert first.
	* To do the insert do on all mandatory fields;
	* If a mandatory field is a fk => insert the mandatory entity and give the entity value to populate the fk.
	* Then perform load update, delete, loadfirstlevel
	*/

    private void init() {
    	beanFactory = new ClassPathXmlApplicationContext(getConfigLocations());
    	${daoInterfaceVariableName} = ($daoInterfaceClassName)beanFactory.getBean("${daoInterfaceVariableName}");
    }
	
	public void testInsert$domainClassName () {
	    $domainClassName ${domainVariableName} = insert$domainClassName ();
	    assertNotNull(${domainVariableName});
	}
	
    public void testLoad$domainClassName () {
    	init();
    	$domainClassName ${domainVariableName} = insert$domainClassName();
    	$domainClassName ${domainVariableName}2 = load$domainClassName(${domainVariableName});
       // assertion
#foreach ($column in $table.columns) 
#putColumnParams()
     	assertTrue(${domainVariableName}.get$columnClass().equals(${domainVariableName}2.get$columnClass()));
#end
	}	
		
	public void testDelete$domainClassName () {
    	init();
    	$domainClassName ${domainVariableName} = insert$domainClassName();
    	${daoInterfaceVariableName}.delete$domainClassName(${domainVariableName});
    	$domainClassName ${domainVariableName}2 = load${domainClassName}(${domainVariableName});
        assertNull (${domainVariableName}2);
    }
	
	public void testUpdate$domainClassName () {
    	init();
    	$domainClassName ${domainVariableName} = insert$domainClassName();
    	$domainClassName ${domainVariableName}2 = load$domainClassName(${domainVariableName});  	
#foreach ($column in ${table.columns})
#putColumnParams()
#if (!$column.isPrimaryKey() && !$isForeignKey)
        ${domainVariableName}.set$columnClass ($TestUtils.getTestPopulateFieldMethod($column.type,$column.size,2));
#end
#end	
	    ${daoInterfaceVariableName}.update${domainClassName}(${domainVariableName});
    	$domainClassName ${domainVariableName}3 = load${domainClassName}(${domainVariableName});
        // assertion
#foreach ($column in $table.columns) 
#putColumnParams()
     	assertTrue(${domainVariableName}.get$columnClass().equals(${domainVariableName}3.get$columnClass()));
#end
	}
    
    protected $domainClassName insert$domainClassName () {
	    init();
        $domainClassName ${domainVariableName} = populate$domainClassName ();   	
    	${daoInterfaceVariableName}.insert${domainClassName}(${domainVariableName});
    	return ${domainVariableName};
	}

    public $domainClassName load$domainClassName ($domainClassName ${domainVariableName}) {
    	return ${daoInterfaceVariableName}.load${domainClassName}(
#foreach ($column in $table.primaryKeyColumns) 
#putColumnParams()
     	   ${domainVariableName}.get$columnClass()#if ($velocityCount!=$primaryKeyCount),#end
#end);
	}	

    protected $domainClassName populate$domainClassName () {
        $domainClassName $domainVariableName = new $domainClassName();
#foreach ($column in ${table.columns})
#putColumnParams()
#if (!$column.isPrimaryKey() && !$isForeignKey)
        ${domainVariableName}.set$columnClass ($TestUtils.getTestPopulateFieldMethod($column.type,$column.size,1));
#end
#end
#foreach ($reference in ${table.parents})
#putReferenceParams2()
#putDependencies()
        // fill associated parent $reference.foreignTableName
        $dependentTestDaoClass ${dependentTestDaoVariableName}_${localColumnClass} = new $dependentTestDaoClass();
        $dependentDomainClassName ${dependentDomainVariableName}_${localColumnClass} = ${dependentTestDaoVariableName}_${localColumnClass}.insert$linkedTableClass();
        ${domainVariableName}.set${linkedTableClass}_${localColumnClass} (${dependentDomainVariableName}_${localColumnClass});
        ${domainVariableName}.set$localColumnClass (${dependentDomainVariableName}_${localColumnClass}.get$linkedColumnClass());
#end
        return $domainVariableName;
    }
    
    protected String getString1 (int length) {
        return StringUtils.substring ("This is a test string",0,length);
    }

    protected Integer getInteger1 () {
        return new Integer (100);
    }
    
    protected Long getLong1 () {
        return new Long (100);
    }

    protected Boolean getBoolean1 () {
        return new Boolean (false);
    }

    protected String getString2 (int length) {
        return StringUtils.substring ("that is a second test string",0,length);
    }

    protected Integer getInteger2 () {
        return new Integer (200);
    }
    
    protected Long getLong2 () {
       return new Long (200);
    }

    protected Boolean getBoolean2 () {
       return new Boolean (true);
    }

    protected Date getDate () {
       return new Date();
    }

    protected Timestamp getTimestamp () {
       return new Timestamp(getDate().getTime());
    }
        
}