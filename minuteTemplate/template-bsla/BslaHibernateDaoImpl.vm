#exposeVariableEntitySpecific()
#putImportParamsUML()
package $packageName;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.sql.Timestamp;

import org.hibernate.Query;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import net.sf.minuteProject.architecture.bsla.bean.criteria.PaginationCriteria;
import $importDaoInterfaceUML;
import $importDomainObjectUML;

/**
 *
 * <p>Title: $className</p>
 *
 * <p>Description: Interface of a Data access object dealing with $className
 * persistence. It offers a set of methods which allow for saving,
 * deleting and searching $className objects</p>
 *
 */

public class $className extends HibernateDaoSupport implements $daoInterfaceNameUML {

	public $className () {}

    /**
     * Inserts a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public void insert$tableClassName($tableClassName $tableVariableName) {
      getHibernateTemplate().save($tableVariableName);
    }

    /**
     * Updates a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public void update$tableClassName($tableClassName $tableVariableName) {
      getHibernateTemplate().update($tableVariableName);
    }

	  /**
     * Updates a $tableClassName entity with only the attributes set into $tableClassName.
	   * The primary keys are to be set for this method to operate.
	   * This is a performance friendly feature, which remove the udibiquous full load and full update when an
	   * update is issued
     * Remark: The primary keys cannot be update by this methods, nor are the attributes that must be set to null.
     * @param $tableClassName $tableVariableName
     */ 
    public void updateNotNullOnly${tableClassName}($tableClassName $tableVariableName) {
        boolean isWhereSet = false;
        StringBuffer query = new StringBuffer();
        query.append (" update $tableClassName $tableVariableName ");
#foreach ($column in ${table.columns})
#if (!$column.isPrimaryKey())
#putColumnParams()
        if (${tableVariableName}.get$columnClass() != null) {
           query.append (getQueryCommaSet (isWhereSet));
           isWhereSet = true; 
           query.append(" ${tableVariableName}.${columnVar} = :${columnVar}");
        }
#end    
#end
		isWhereSet = false; 
#foreach ($column in $table.primaryKeyColumns)
#putColumnParams()
        if (${tableVariableName}.get$columnClass() != null) {
           query.append (getQueryWHERE_AND (isWhereSet));
           isWhereSet = true;
			query.append(" ${tableVariableName}.${columnVar} = :${columnVar}");
        }
#end   		
        Query hibernateQuery = getSession().createQuery(query.toString()).setProperties(${tableVariableName}); 
		hibernateQuery.executeUpdate();
    }

    private class ${tableClassName}CriteriaValue {
		   public $tableClassName $tableVariableName, prototypeCriteria;
	  }
	
    public void updateNotNullOnlyPrototype${tableClassName}($tableClassName $tableVariableName, $tableClassName prototypeCriteria) {
		${tableClassName}CriteriaValue ${tableVariableName}CriteriaValue = new ${tableClassName}CriteriaValue ();
		${tableVariableName}CriteriaValue.$tableVariableName = $tableVariableName;
		${tableVariableName}CriteriaValue.prototypeCriteria = prototypeCriteria;
		
        boolean isWhereSet = false;
        StringBuffer query = new StringBuffer();
        query.append (" update $tableClassName $tableVariableName ");
#foreach ($column in ${table.columns})
#putColumnParams()
        if (${tableVariableName}.get$columnClass() != null) {
           query.append (getQueryCommaSet (isWhereSet));
           isWhereSet = true; 
           query.append(" ${tableVariableName}.${columnVar} = :${tableVariableName}CriteriaValue.${tableVariableName}.${columnVar}");
        }
#end
		isWhereSet = false; 
#foreach ($column in $table.columns)
#putColumnParams()
        if (prototypeCriteria.get$columnClass() != null) {
           query.append (getQueryWHERE_AND (isWhereSet));
           isWhereSet = true;
		   query.append(" ${tableVariableName}.${columnVar} = :${tableVariableName}CriteriaValue.prototypeCriteria.${columnVar}");
        }
#end   		
        Query hibernateQuery = getSession().createQuery(query.toString()).setProperties(${tableVariableName}CriteriaValue); 
		hibernateQuery.executeUpdate();
    }

     
     /**
     * Saves a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public void save$tableClassName($tableClassName $tableVariableName) {
      getHibernateTemplate().saveOrUpdate($tableVariableName);
    }
       
    /**
     * Deletes a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public void delete$tableClassName($tableClassName $tableVariableName) {
      getHibernateTemplate().delete($tableVariableName);
    }
    
    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName
     * @param Long id
     * @return $tableClassName The $tableClassName entity
     
    public $tableClassName load$tableClassName(Long id) {
    	return ($tableClassName)getHibernateTemplate().get(${tableClassName}.class, id);
    }
*/
    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName
     * @param $primaryKeyFullType $primaryKey
     * @return $tableClassName The $tableClassName entity
     */
    public $tableClassName load$tableClassName($primaryKeyFullType $primaryKeyVariable) {
    	return ($tableClassName)getHibernateTemplate().get(${tableClassName}.class, $primaryKeyVariable);
    }    

    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName and its dependent one to many objects
     * @param Long id
     * @return $tableClassName The $tableClassName entity
     */
    public $tableClassName loadFullFirstLevel$tableClassName($primaryKeyFullType $primaryKeyVariable) {
        List list = getHibernateTemplate().find(
                     " FROM $tableClassName $tableVariableName "
#foreach ($reference in $table.children)
#putReferenceParams2()
                     + " LEFT JOIN FETCH ${tableVariableName}.${linkedTableVariable}${linkedColumnClass}s "   
#end                      
                     + " WHERE ${tableVariableName}.${primaryKeyVariable} = "+$primaryKeyVariable
               );
         if (list!=null && !list.isEmpty())
            return ($tableClassName)list.get(0);
         return null;
    	//return null;//($tableClassName) getHibernateTemplate().queryForObject("loadFullFirstLevel$tableClassName", id);
    }

    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName
     * @param $tableClassName $tableVariableName
     * @return $tableClassName The $tableClassName entity
     */
    public $tableClassName loadFullFirstLevel$tableClassName($tableClassName $tableVariableName) {
        boolean isWhereSet = false;
        StringBuffer query = new StringBuffer();
        query.append ("FROM $tableClassName $tableVariableName ");
#foreach ($reference in $table.children)
#putReferenceParams2()
        query.append (" LEFT JOIN FETCH ${tableVariableName}.${linkedTableVariable}${linkedColumnClass}s ");
#end    
#foreach ($column in $table.primaryKeyColumns)
#putColumnParams()
        if (${tableVariableName}.get$columnClass() != null) {
           query.append (getQueryWHERE_AND (isWhereSet));
           isWhereSet = true;
#if ($sqlUtils.isQuotedColumn($column))        
           query.append(" ${tableVariableName}.${columnVar} = '"+ ${tableVariableName}.get$columnClass()+"' ");
#else
           query.append(" ${tableVariableName}.${columnVar} = "+ ${tableVariableName}.get$columnClass() + " ");
#end
         }
	#end                   
        	List list = getHibernateTemplate().find(query.toString());
        if (list!=null && !list.isEmpty())
           return ($tableClassName)list.get(0);    
        return null;
    }  
     
    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName and its dependent objects one to many
     * @param Long id
     * @return $tableClassName The $tableClassName entity
     */
    public $tableClassName loadFull$tableClassName(Long id) {
    	return null;//($tableClassName)getHibernateTemplate().queryForObject("loadFull$tableClassName", id);
    }

    /**
     * Searches a list of $tableClassName entity 
     * @param $tableClassName $tableVariableName
     * @return List
     */
    public List<$tableClassName> search$tableClassName($tableClassName $tableVariableName) {      
	   return getHibernateTemplate().find(get${tableClassName}SearchEqualQuery ($tableVariableName));            
    }    
    
    /**
    * return a hibernate hql search on a ${tableClassName} prototype
    */
    private String get${tableClassName}SearchEqualQuery ($tableClassName $tableVariableName) {
        boolean isWhereSet = false;
        StringBuffer query = new StringBuffer();
        query.append (" FROM $tableClassName $tableVariableName ");
#foreach ($column in ${table.columns})
#putColumnParams()
        if (${tableVariableName}.get$columnClass() != null) {
           query.append (getQueryWHERE_AND (isWhereSet));
           isWhereSet = true;
#if ($sqlUtils.isQuotedColumn($column))        
           query.append(" ${tableVariableName}.${columnVar} = '"+ ${tableVariableName}.get$columnClass()+"' ");
#else
           query.append(" ${tableVariableName}.${columnVar} = "+ ${tableVariableName}.get$columnClass() + " ");
#end
        }
	#end      
	        return query.toString();
    }
    /**
     * Load a paginated list of $tableClassName entity dependent of pagination criteria
     * @param PaginationCriteria paginationCriteria
     * @return List
     */
    public List loadPaginated$tableClassName ($tableClassName $tableVariableName, PaginationCriteria paginationCriteria) {
    	// this implementation is not the best for sure
    	// but here pagination is done agains the database	
    	List<Long> page = loadPaginated${tableClassName}IdentitiesFromStartPositionId($tableVariableName, paginationCriteria);
    	
    	if (page!=null && page.size()>0) {
	       StringBuffer query = new StringBuffer();
	       //query.append (" FROM $tableClassName $tableVariableName ");
	       // throws an hibernate null pointer ex...
	       query.append ("select new ${tableClassName}( ");
#foreach ($column in ${table.columns})
#putColumnParams()
           query.append (" $columnVar #if ($velocityCount!=$table.columnCount),#end");
#end   
           query.append (") FROM $tableClassName $tableVariableName ");
	          
	       query.append(" where ${tableVariableName}.$primaryKeyVariable in (");
	       // iterate on multiple pk column TODO
	       for (Iterator iter = page.iterator(); iter.hasNext();) {
		      $primaryKeyType My$primaryKeyVariable = ($primaryKeyType) iter.next(); ##My$primaryKeyVariable is for not entering in conflict with tablename
#if ($sqlUtils.isPKQuotedColumn($table)) ## works only for one pk not multiple pk
			  query.append("'");
#end
			  query.append(My${primaryKeyVariable}.toString());
#if ($sqlUtils.isPKQuotedColumn($table)) ## works only for one pk not multiple pk
			  query.append("'");
#end              
			  if (iter.hasNext())
				 query.append(",");
		   }
	       query.append(") ");
	       return getHibernateTemplate().find(query.toString()); 
    	} else
           return new ArrayList<$tableClassName>();
    }      

    private List<Long> loadPaginated${tableClassName}IdentitiesFromStartPositionId ($tableClassName $tableVariableName, PaginationCriteria paginationCriteria) {
       boolean isWhereSet = false;
       StringBuffer query = new StringBuffer();
       query.append ("select ${tableVariableName}.$primaryKeyVariable ");
       query.append (get${tableClassName}SearchEqualQuery ($tableVariableName));
	       // the start position id
	       if (paginationCriteria.getStartPositionIdentity() != null) {
	          query.append (getQueryWHERE_AND (isWhereSet));
	          isWhereSet = true;
	          //TODO the primaryKey Type is to be strong typed
	          query.append(" ${tableVariableName}.$primaryKeyVariable > "+ (($primaryKeyType)paginationCriteria.getStartPositionIdentity()) + " ");
	       }
       //
	       if (paginationCriteria.getOrderList()!=null) {
	    	      query.append(" order by "+paginationCriteria.getOrderList());
	       }
	       getHibernateTemplate().setMaxResults(paginationCriteria.getNumberOfRowsReturned());
	       		List<Long> set = getHibernateTemplate().find(query.toString());
	       		return set;
    }
    
    private List<Long> loadPaginated${tableClassName}A ($tableClassName $tableVariableName, PaginationCriteria paginationCriteria) {
##select <uniqueId> from <View> where <searchCriteria> order by <orderCriteria> first X after (n+1)X     
       boolean isWhereSet = false;
       StringBuffer query = new StringBuffer();
       query.append ("select ${tableVariableName}.$primaryKeyVariable "); //check when more than one pk
       query.append (get${tableClassName}SearchEqualQuery ($tableVariableName));
       if (paginationCriteria.getOrderList()!=null) {
    	      query.append(" order by "+paginationCriteria.getOrderList());
       }
       int pageNb = paginationCriteria.getPageNumber();
       int rowPerPage = paginationCriteria.getNumberOfRowsReturned();
       int firstPagesNumberOfRowReturned = rowPerPage*pageNb;
       int maxNumberOfRowsReturned = rowPerPage*(1+pageNb);
       getHibernateTemplate().setMaxResults(maxNumberOfRowsReturned);
       List<Long> set = getHibernateTemplate().find(query.toString());
       // return subset from the nX position if exists
       int size = set.size();
       if (size < firstPagesNumberOfRowReturned)
       	  return new ArrayList<Long>();
       else
          return set.subList (firstPagesNumberOfRowReturned, size);
    }
    
    private List<Long> loadPaginated${tableClassName}A2 ($tableClassName $tableVariableName, PaginationCriteria paginationCriteria) {
       boolean isWhereSet = false;
       StringBuffer query = new StringBuffer();
       query.append (" FROM $tableClassName $tableVariableName ");
       //query.append ("select ${tableVariableName}.$primaryKeyVariable "); //check when more than one pk
       query.append (get${tableClassName}SearchEqualQuery ($tableVariableName));
       if (paginationCriteria.getOrderList()!=null) {
    	      query.append(" order by "+paginationCriteria.getOrderList());
       }
       int pageNb = paginationCriteria.getPageNumber();
       int rowPerPage = paginationCriteria.getNumberOfRowsReturned();
       int firstPagesNumberOfRowReturned = rowPerPage*pageNb;
       int maxNumberOfRowsReturned = rowPerPage*(1+pageNb);
       getHibernateTemplate().setMaxResults(maxNumberOfRowsReturned);
       List<Long> set = getHibernateTemplate().find(query.toString());
       // return subset from the nX position if exists
       int size = set.size();
       if (size < firstPagesNumberOfRowReturned)
       	  return new ArrayList<Long>();
       else
          return set.subList (firstPagesNumberOfRowReturned, size);
    }    
    
    private String getQueryWHERE_AND (boolean isWhereSet) {
       if (isWhereSet)
          return " AND ";
       return " WHERE ";
    }

    private String getQueryCommaSet (boolean isWhereSet) {
       if (isWhereSet)
          return " , ";
       return " SET ";
    }	    
    
}
