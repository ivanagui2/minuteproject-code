#macro (exposeVariableEntitySpecific)
## model, table, reference (towards this table must be available), commonUtils, formatUtils, template
#set ($database = $table.database)
#set ($model = $table.package.businessPackage.businessModel.model)
#set ($tableDB = $table)
##set ($database = $model.dataModel.database)
#set ($configuration = $model.configuration)
#set ($tableVariableName = $commonUtils.getTableVariableName($table))
#set ($packageName = $commonUtils.getPackageName($model, $template, $table))
#set ($packageDirName = $commonUtils.getPackageDirName($model, $template, $table))
##set ($businessPackageName = $commonUtils.getBusinessPackage($model, $table))
#set ($businessPackageName = $commonUtils.getBusinessPackageName($model, $table))
#set ($className = $commonUtils.getClassName2($table, $template))
#set ($tCN = $commonUtils.getTcn($table))
#set ($tableClassName = $tCN)
#set ($domainClassName = $tableClassName)
#set ($domainVariableName = $tableVariableName)
#set ($variableName = $commonUtils.getVariableName($tableDB, $template))
##set ($parentReferences = $table.getParents())##$modelUtils.getParents($database, $table))
##set ($childReferences = $table.getChildren())##$modelUtils.getChildren($database,$table))
#set ($parentReferences = $modelUtils.getParents($database, $table))
#set ($childReferences = $modelUtils.getChildren($database,$table))
#set ($primaryKey = $commonUtils.getPrimaryKey($table))
#set ($primaryKeyType = $commonUtils.getPrimaryKeyType($table))
#set ($primaryKeyVariable = $formatUtils.getJavaNameVariable($commonUtils.getPK($table)))
#set ($primaryKeyJavaNameClass = $formatUtils.getJavaName($commonUtils.getPK($table)))
#set ($primaryKeyFullType = $commonUtils.getPrimaryKeyFullType($table))
#set ($pK = $commonUtils.getPK($table))
#set ($primaryKeyFirstColumn = $commonUtils.getPrimaryKeyFirstColumn($table))
#set ($hasPrimaryKey = $commonUtils.hasPrimaryKey($table))
#set ($isPkUserProvided = $commonUtils.isPkUserProvided($table))
#set ($bundle = $bslaLibraryUtils.getBundle($table))
#set ($primaryKeyCount = $commonUtils.getPrimaryKeyCount($table))
#set ($isMany2Many = $tableUtils.isMany2Many($table))
#end

#macro(exposeVariableComponentSpecific)
#set ($packageName = $commonUtils.getPackageName($component, $template))
#set ($packageDirName = $commonUtils.getPackageDirName($model, $template, $component))
#end

#macro (exposeVariableModelSpecific)
#exposeVariableModelDetailSpecific()
#end

#macro(exposeVariableModelDetailSpecific)
#set ($database = $model.dataModel.database)
#set ($configuration = $model.configuration)
#set ($businessPackages = $model.businessModel.businessPackage.packages)
#set ($businessPackageViews = $model.businessModel.businessPackage.packageViews)
#set ($className = $commonUtils.getClassName($model, $template))
#set ($packageName = $commonUtils.getPackageName($model, $template))
#end

#macro(exposeVariablePackageSpecific)
#set ($model = $package.businessPackage.businessModel.model)
#exposeVariableModelSpecific()
#end

#macro (exposeVariableApplicationSpecific)
#exposeVariableModelDetailSpecific()
#set ($distinctTemplateTargetList = $commonUtils.getDistinctTemplateTargetList($model))
#end


## -- put reference paramenters:
## putReferenceParams goes with reference accessed via parentReferences, childReferences

#macro (putReferenceParams)
## this macro is used when accessing the entity reference via parentReferences or childReferences
## this macro is deprecated used putReferenceParams2 instead
#set ($linktable = ${reference.tableName})
#set ($columnDB = $reference.column)
#set ($linktableDB = ${reference.table})
#set ($linkclass = $formatUtils.getJavaName(${reference.tableName}))
#set ($link = $formatUtils.getJavaNameVariable(${reference.tableName}))
#set ($columnclass = $formatUtils.getJavaName(${reference.columnName}))
#set ($column = $formatUtils.getJavaNameVariable(${reference.columnName}))
#set ($columnType = $commonUtils.getJavaType($columnDB))
#set ($columnFullType = $commonUtils.getFullType2($columnDB))
#set ($localColumnName = $formatUtils.getJavaNameVariable(${reference.localColumn.name}))
#set ($varclass = "${linkclass}_$columnclass")
#set ($var = "${link}_$columnclass") 
#set ($associatedPackageName = $commonUtils.getAssociatedBusinessPackageName($model, $reference.tableName))
## resource bundle
#set ($resource = "${table.name}.$var")
#set ($parentLink = $referenceUtils.getParentLink(${reference.tableName},${reference.columnName}))
#end


#macro (putReferenceParams2old)
##set ($linkedTableClass = $formatUtils.getJavaName(${reference.foreignTableName}))
##set ($linkedTableVariable = $formatUtils.getJavaNameVariable(${reference.foreignTableName}))
##set ($linkedColumnClass = $formatUtils.getJavaName(${reference.foreignColumn.name}))
##set ($linkedColumnVariable = $formatUtils.getJavaNameVariable(${reference.foreignColumn.name}))
##set ($localColumnVariable = $formatUtils.getJavaNameVariable(${reference.localColumnName}))
##set ($localColumnType = $commonUtils.getType($reference.localColumn))
##set ($localTableVariable = $formatUtils.getJavaNameVariable(${reference.localTableName}))
##set ($localTableClass = $formatUtils.getJavaNameVariable(${reference.localTableName}))
##set ($localColumnClass = $formatUtils.getJavaName(${reference.localColumn.name}))
##set ($linkedParentVariable = '$linkedTableVariable$localColumnVariable')
##set ($linkedList = ${linkedTableVariable}${linkedColumnClass}s)
#end

## putReferenceParams2 goes with reference accessed via domainObjectUML.parents, domainObjectUML.childReferences

#macro (putReferenceParams2)
## this macro is use when a reference is accessed via parent.references or child.references
#set ($linkedTableClass = $formatUtils.getJavaName(${reference.foreignTableName}))
#set ($linkedTableVariable = $formatUtils.getJavaNameVariable(${reference.foreignTableName}))
#set ($localColumnVariable = $formatUtils.getJavaNameVariable(${reference.localColumnName}))
#set ($localTableVariable = $formatUtils.getJavaNameVariable(${reference.localTableName}))
#set ($localTableClass = $formatUtils.getJavaName(${reference.localTableName}))
#set ($localColumnClass = $formatUtils.getJavaName(${reference.localColumnName}))
#set ($localColumnName = ${reference.localColumnName})
#set ($localColumnType = $commonUtils.getJavaType($reference.localColumn))
#set ($localColumn = $reference.localColumn)
#set ($isLengthPrecisionColumnLocalColumn = $columnUtils.isLengthPrecisionColumn($localColumn))
##set ($linkedList = ${linkedTableVariable}${linkedColumnClass}s)
#set ($linkedColumnClass = $formatUtils.getJavaName(${reference.foreignColumnName}))
#set ($linkedColumnName = ${reference.foreignColumnName})
#set ($linkedColumnVariable = $formatUtils.getJavaNameVariable(${reference.foreignColumnName}))
#set ($linktableDB = ${reference.foreignTable})
##set ($parentLinkUML = $referenceUtils.getParentLinkUML(${reference.foreignTableName},${reference.localColumnName}))
##set ($parentLink = $referenceUtils.getParentLink(${reference.tableName},${reference.columnName}))
#set ($parentLinkUML = "${linkedTableClass}${localColumnClass}")
#set ($parentLink = "${linkedTableClass}_${localColumnClass}")
#set ($importDomainObjectUMLForeignTable = $bslaLibraryUtils.getDomainObjectUMLImport($model, $reference.foreignTable, $template))
#end

## putColumnParams are for the decorating the entity attribute 
#macro (putColumnParams)
#set ($isForeignKey = $columnUtils.isForeignKey($column))
#set ($columnType = $commonUtils.getJavaType($column))
#set ($columnClass = $formatUtils.getJavaName($column.name))
#set ($columnVar = $formatUtils.getJavaNameVariable($column.name))
#set ($isColumnUnique = $tableUtils.isUnique($table, $column))
#set ($isMandatory = $column.isRequired())
#set ($isPrimaryKey = $column.isPrimaryKey())
#set ($resource = "${table.name}.$columnVar")
#set ($isLengthPrecisionColumn = $columnUtils.isLengthPrecisionColumn($column))
#set ($columLengthPrecisionSize = $column.getSizeAsInt())
#set ($columnFullType = $commonUtils.getFullType2($column))
#largeFormat()
#end

#macro (largeFormat)
#set ($isLargeFormat = ($column.type == "CLOB" || $column.type == "BLOB"))
#end

## ----- import params
## -- import params imports the params regarding the other template for a domainObject

#macro (putImportParams)
#distinctTemplateAlias()
#set ($tableDB = $table)
#set ($importDomainObject = $bslaLibraryUtils.getDomainObjectImport($model, $tableDB, $template))
##set ($importDomainObjectUML = $bslaLibraryUtils.getDomainObjectUMLImport($model, $tableDB, $template))
#set ($daoInterfaceName = $bslaLibraryUtils.getDaoInterfaceName($tableDB, $template))
##set ($daoInterfaceNameUML = $bslaLibraryUtils.getDaoInterfaceUMLName($tableDB, $template))
#set ($daoInterfaceVariableName = $bslaLibraryUtils.getDaoInterfaceVariableName($tableDB, $template))
#set ($daoInterfaceClassName = $bslaLibraryUtils.getDaoInterfaceClassName($tableDB, $template))
#set ($daoInterfaceVariableName = $bslaLibraryUtils.getDaoInterfaceVariableName($tableDB, $template))
##set ($daoInterfaceClassNameUML = $bslaLibraryUtils.getDaoInterfaceClassUMLName($tableDB, $template))
#set ($importDaoInterface = $bslaLibraryUtils.getDaoInterfaceImport($model, $tableDB, $template))
##set ($importDaoInterfaceUML = $bslaLibraryUtils.getDaoInterfaceUMLImport($model, $tableDB, $template))
#set ($importIbatisDaoSqlImplName = $bslaLibraryUtils.getIbatisDaoSqlImplImport($model, $tableDB, $template))
##set ($importHibernateImplName = $bslaLibraryUtils.getHibernateImplNameImport($model, $tableDB, $template))
#end

## -- import params imports the params regarding the other template for a domainObjectUML

#macro (putImportParamsUML)
#set ($tableDB = $table)
#set ($importDomainObject = $bslaLibraryUtils.getDomainObjectImport($model, $tableDB, $template))
#set ($importDomainObjectUML = $bslaLibraryUtils.getDomainObjectUMLImport($model, $tableDB, $template))
#set ($daoInterfaceName = $bslaLibraryUtils.getDaoInterfaceName($tableDB, $template))
#set ($daoInterfaceNameUML = $bslaLibraryUtils.getDaoInterfaceUMLName($tableDB, $template))
#set ($daoInterfaceVariableName = $bslaLibraryUtils.getDaoInterfaceVariableName($tableDB, $template))
#set ($daoInterfaceClassName = $bslaLibraryUtils.getDaoInterfaceClassName($tableDB, $template))
#set ($daoInterfaceVariableNameUML = $bslaLibraryUtils.getDaoInterfaceVariableUMLName($tableDB, $template))
#set ($daoInterfaceClassNameUML = $bslaLibraryUtils.getDaoInterfaceClassUMLName($tableDB, $template))
#set ($importDaoInterface = $bslaLibraryUtils.getDaoInterfaceImport($model, $tableDB, $template))
#set ($importDaoInterfaceUML = $bslaLibraryUtils.getDaoInterfaceUMLImport($model, $tableDB, $template))
#set ($importIbatisDaoSqlImplName = $bslaLibraryUtils.getIbatisDaoSqlImplImport($model, $tableDB, $template))
#set ($importHibernateImplName = $bslaLibraryUtils.getHibernateImplNameImport($model, $tableDB, $template))
#set ($importJPAImplName = $bslaLibraryUtils.getJPAImplNameImport($model, $tableDB, $template))
#end

#macro (exposeImportParams $tableDB)
#set ($importDomainObject = $bslaLibraryUtils.getDomainObjectImport2($model, $tableDB, $template))
##set ($importDomainObjectUML = $bslaLibraryUtils.getDomainObjectUMLImport($model, $tableDB, $template))
#end

#macro (exposeImportParamsUML $tableDB)
#set ($importDomainObject = $bslaLibraryUtils.getDomainObjectImport2($model, $tableDB, $template))
#set ($importDomainObjectUML = $bslaLibraryUtils.getDomainObjectUMLImport($model, $tableDB, $template))
#end


#macro (exposeVariableEntitySpecificSqlMapConfig)
#set ($template = $commonUtils.getTemplate($configuration,"BslaIbatisDaoSqlMapXml"))
#exposeVariableEntitySpecific()
##exposeFileName($template $tableClassName)
#exposeFileName($template $table)
#end

#macro (exposeVariableEntitySpecificHibernateMapConfig)
#set ($template = $commonUtils.getTemplate($configuration,"HibernateMap"))
##exposeVariableEntitySpecific()
#exposeArtifactRelativePathDirAndFullName($template $table)
#end

#macro (exposeVariableEntityViewSpecificHibernateMapConfig)
#set ($template = $commonUtils.getTemplate($configuration,"HibernateMap"))
#exposeArtifactRelativePathDirAndFullName($template $view)
#end

#macro (exposeArtifactRelativePathDirAndFullName $template $table)
#set ($artifactRelativePathDirAndFullName = $commonUtils.getArtifactRelativePathDirAndFullName($template, $table))
#end

#macro (exposeVariableEntitySpecificBslaDaoIbatis)
#set ($template = $commonUtils.getTemplate($configuration,"BslaIbatisDaoSqlImpl"))
#putImportParams()
#end

#macro (exposeVariableEntitySpecificBslaDomainObject)
#set ($template = $commonUtils.getTemplate($configuration,"BslaDomainObject"))
#end

#macro (exposeFileName $template $table)
#set ($filename = $commonUtils.getFileName($template, $table))
#set ($classpathName = $commonUtils.getclasspathName($template, $table))
#end

#macro (exposeEnvironmentParams)
#set ($PKLookUpString = $databaseUtils.providePrimaryKeyLookUpString($table))
#set ($PKSequence = $databaseUtils.provideSequence($table))
#set ($isPrimaryKeyPolicySequence = $databaseUtils.isPrimaryKeyPolicySequence($table))
#set ($isPrimaryKeyPolicyIdentity = $databaseUtils.isPrimaryKeyPolicyIdentity($table))
#set ($isPrimaryKeyPolicyIncrement = $databaseUtils.isPrimaryKeyPolicyIncrement($table))
#end

#macro (exposeArchitectureParams)
#set ($ibatisTemplateName = "sqlMapClient${model.name}Template")
#set ($hibernateFactoryName = "hibernate${model.name}Factory")
#set ($JPAFactoryName = "JPA${model.name}Factory")
#end

#macro (exposeArchitecturePackageParams)
#set ($JPApath = $bslaLibraryUtils.getPackageLevelTemplateFullClassPath($model, $package, $template, "BslaSpringConfigDaoJPA") )
#end

#macro (exposeSpringJPAArchitectureParams) 
#set ($pathDaoJPA = $bslaLibraryUtils.getModelLevelTemplateFullClassPath($model, $template, "BslaSpringConfigDaoJPA2") )
#set ($pathJPAPersistenceConfig = $bslaLibraryUtils.getModelLevelTemplateFullClassPath($model, $template, "JPAPersistenceConfig") )
#set ($databaseConfig = $bslaLibraryUtils.getModelLevelTemplateFullClassPath($model, $template, "BslaSpringDatabase") )
#set ($persistenceXmlLocation = "classpath:${pathJPAPersistenceConfig}.xml" )
#end

#macro(exposeJPASpecifics)
#set ($persistenceUnitName = $model.name)
#end

#macro (exposeJstlScopeItems $instance $attribute)
#exposeJstlCombinaison($instance $attribute)
#set($items = $combi)
#end

#macro (exposeJstlEntity $instance $attribute)
#exposeJstlCombinaison($instance $attribute)
#set($entity = $combi)
#end

#macro (exposeJstlSingle $element)
#set ($itemsFirst = '${')
#set ($itemsLast = '}')
#set ($element = "${itemsFirst}${element}${itemsLast}")
#end

#macro (exposeJstlCombinaison $element1 $element2)
#set ($itemsFirst = '${')
#set ($itemsSeparator = '.')
#set ($itemsLast = '}')
#set ($combi = "${itemsFirst}${element1}${itemsSeparator}${element2}${itemsLast}")
#end



#macro (exposeJdbcParam $param)
#set ($itemsFirst = '${')
#set ($itemsLast = '}')
#set ($paramResult = "${itemsFirst}${param}${itemsLast}")
#end

#macro(exposeJdbc)
#set ($jdbc = "jdbc.${model.name}")
#set ($jdbcDriverClassName = "${jdbc}.driverClassName")
#set ($jdbcUrl = "${jdbc}.url")
#set ($jdbcUsername = "${jdbc}.username")
#set ($jdbcPassword = "${jdbc}.password")
#set ($jdbcJNDI = "${jdbc}.jndi")
#end

#macro (exposeWebProperties)
#set ($defaultRootURLBeginner = $WebUtils.getDefaultRootURLBeginner($model))
#set ($sitemeshMainDecoratorFile = $WebUtils.getSitemeshMainDecorator($model))
#set ($sitemeshMainDecoratorDir = $WebUtils.getSitemeshMainDecoratorDir($model))
#set ($projectDefaultServletName = $WebUtils.getProjectDefaultServletName($model))
#set ($projectDefaultServletClasspath = $WebUtils.getProjectDefaultServletClasspath($model))
#set ($defaultHomePageContent = $WebUtils.getDefaultHomePageContent($model))
#set ($springConfigMain = $WebUtils.getSpringConfigMainInRootClassPath($model))
#end

#macro (getTemplatePropertyValue $property)
#set ($value = $template.getPropertyValue($property))
#end

#macro (getTemplateExtensionValue )
#set ($value = $template.getFileExtension())
#end

#macro (putDependencies)
#distinctTemplateAlias()
#set ($dependentImportTestDaoClass = $commonUtils.getEntityLevelTemplateFullPath($model, $linktableDB, $template, $templateTestBslaDaoInterfaceAlias))
#set ($dependentTestDaoClass = $commonUtils.getTemplateClassName($linktableDB, $model, $templateTestBslaDaoInterfaceAlias))
#set ($dependentTestDaoVariableName = $commonUtils.getTemplateJavaVariableName($linktableDB, $model, $templateBslaDaoInterfaceAlias))
#set ($dependentImportDaoInterface = $commonUtils.getEntityLevelTemplateFullPath($model, $linktableDB, $template, $templateBslaDaoInterfaceAlias))
#set ($dependentDaoInterfaceClassName = $commonUtils.getTemplateClassName($linktableDB, $model, $templateBslaDaoInterfaceAlias))
#set ($dependentDaoInterfaceVariableName = $commonUtils.getTemplateJavaVariableName($linktableDB, $model, $templateBslaDaoInterfaceAlias))
#set ($dependentImportDomainClassName = $commonUtils.getEntityLevelTemplateFullPath($model, $linktableDB, $template, $templateDomainObjectAlias))
#set ($dependentDomainClassName = $commonUtils.getTemplateClassName($linktableDB, $model, $templateDomainObjectAlias))
#set ($dependentDomainVariableName = $commonUtils.getTemplateJavaVariableName($linktableDB, $model, $templateDomainObjectAlias))
#end

## distinct: distinguish between templates based on domainObject and 
## template made for domainObjectUML

#macro (distinctTemplateAlias)
#templateDefinition()
#getTemplatePropertyValue("uml")
#if (!$value.equals("true"))
#set ($templateDomainObjectAlias = $templateDomainObject)
#set ($templateBslaDaoInterfaceAlias = $templateBslaDaoInterface)
#else
#set ($templateDomainObjectAlias = $templateDomainObjectUML)
#set ($templateBslaDaoInterfaceAlias = $templateBslaDaoInterfaceUML)
#end
#set ($templateTestBslaDaoInterfaceAlias = "TestDao")
#end 

## distinct Back end import

#macro (distinctBEImport)
#distinctTemplateAlias()
#set ($importDomainObject = $bslaLibraryUtils.getEntityLevelTemplateFullPath($model, $tableDB, $template,$templateDomainObjectAlias))
#set ($importDaoInterface = $bslaLibraryUtils.getEntityLevelTemplateFullPath($model, $tableDB, $template,$templateBslaDaoInterfaceAlias))
#end 

#macro (distinctEntityProperty)
#distinctTemplateAlias()
#set ($importDomainObject = $bslaLibraryUtils.getEntityLevelTemplateFullPath($model, $tableDB, $template,$templateDomainObjectAlias))
#set ($importDaoInterface = $bslaLibraryUtils.getEntityLevelTemplateFullPath($model, $tableDB, $template,$templateBslaDaoInterfaceAlias))
#set ($importViewServiceInterface = $bslaLibraryUtils.getEntityLevelTemplateFullPath($model, $tableDB, $template,$templateViewServiceInterface))
#set ($daoInterfaceClassName = $commonUtils.getTemplateClassName($tableDB, $model, $templateBslaDaoInterfaceAlias))
#set ($daoInterfaceVariableName = $commonUtils.getJavaNameVariableFirstLetter($tableDB, $model, $templateBslaDaoInterfaceAlias))
#set ($viewServiceInterfaceVariableName = $commonUtils.getJavaNameVariableFirstLetter($tableDB, $model, $templateViewServiceInterface))
#set ($viewServiceInterfaceClassName = $commonUtils.getTemplateClassName($tableDB, $model, $templateViewServiceInterface))
#set ($domainClassName = $commonUtils.getTemplateClassName($tableDB, $model, $templateDomainObjectAlias))
#set ($domainVariableName = $commonUtils.getTemplateJavaVariableName($tableDB, $model, $templateDomainObjectAlias))
#end 

#macro (importBackEnd)
#foreach ($package in ${businessPackages})
#foreach ($table in ${package.listOfTables})
#putImportParams()
import $importDomainObject;
import $importDaoInterface;
#end
	#end
#end

#macro (importBackEndUML)
#foreach ($package in ${businessPackages})
#foreach ($table in ${package.listOfTables})
#putImportParamsUML()
import $importDomainObjectUML;
import $importDaoInterfaceUML;
#end
	#end
#end

## set the definition of the template against there logical fonction

#macro (templateDefinition)
#set ($templateDomainObject="BslaDomainObject")
#set ($templateDomainObjectUML="DomainObjectUML")
#set ($templateBslaDaoInterface="BslaDaoInterface")
#set ($templateBslaDaoInterfaceUML="BslaDaoInterfaceUML")
#set ($templateViewServiceInterface="ServiceInterface")
##set ($daoInterfaceVariableNameUML = $bslaLibraryUtils.getDaoInterfaceVariableUMLName($tableDB, $template))
#end

#macro (exposeComponentSpecific)
#set ($parentExist = $componentUtils.hasParent($component))
#end
