#exposeBackendTechnology()
#exposeDbApiRestQuerySpecific()
#exposeSDDSpring()
#exposeRESTSDDURLServer()
#putImportQuerySDDBean()
#addedAreas()
#set ($sizeColumn = $inputBean.columns.size())
#set ($sizeChunk = $query.getQueryChunks().size())
#set ($size = $sizeColumn + $sizeChunk)
#macro(resourceSignature $param)
#foreach($column in $inputBean.columns)
#if (!$column.hasBeenDuplicated())
#putColumnParamNaming()
#if($columnUtils.isTime($column))
#set($columnType=$dateParamImport)
#end
#if($velocityCount>1),#end            @ApiParam(value = "$columnVar", required = ${column.isRequired()}) @${param} ("$columnVar") $columnType $columnVar
#end
#end
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkName=$javaUtils.getJavaVariableNaming($queryChunk.name))
#if($velocityCount>1 || $sizeColumn!=0),#end            @ApiParam(value = "$chunkName", required=true, allowableValues = "km, miles"#if($queryChunk.getDistinctValues()), defaultValue = "${queryChunk.getDefaultValue().getName()}"#end) @${param} ("$chunkName") String $chunkName 
#end
#end
#macro (daoParameters)
        	${sddInputBeanVariable}
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkName=$javaUtils.getJavaVariableNaming($queryChunk.name))
            ,$chunkName 
#end
#end
#macro (resourceParameters)
#foreach($column in $inputBean.columns)
#if (!$column.hasBeenDuplicated())
#putColumnParamNaming()
#if($columnUtils.isTime($column))
#set($columnType=$dateParamImport)
#end
#if($velocityCount>1),#end $columnVar
#end
#end
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkName=$javaUtils.getJavaVariableNaming($queryChunk.name))
#if($velocityCount>1 || $sizeColumn!=0),#end $chunkName 
#end
#end

package $packageName;
$!updatedAreaImport
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.wordnik.swagger.annotations.*;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.io.*;
import java.sql.*;
import java.io.IOException;
import javax.servlet.http.*;
import java.util.List;
import java.util.ArrayList;
#if($isSpringBackend)
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
#elseif($isEJBBackend)
import javax.enterprise.context.RequestScoped;
import javax.enterprise.inject.Default;
import javax.inject.Inject;
import javax.inject.Named;
import javax.ejb.EJB;
import $EJBDaoImplImport;
#end
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.QueryParam;
import javax.ws.rs.FormParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import javax.xml.bind.JAXBElement;
import $sddOutputBeanCollectionImport;
import $sddOutputBeanImport;
#if($isNotVoidInput)
import $sddInputBeanImport;
#end
import $sddDaoInterfaceImport;
/**
*
* <p>Title: ${className}</p>
*
* <p>Description: class for ${className} service </p>
*
*/
@Path("/sdd/${sddInputBeanClass}")
@Produces(MediaType.APPLICATION_JSON)
@Api(value="/sdd/${sddInputBeanClass}", description = "operation about ${sddInputBeanClass}")
public class ${className} {
#if ($isSpringBackend)
    @Autowired
    @Qualifier("$sddDaoInterfaceVariable")	
#elseif($isEJBBackend)
    @EJB ## (name="$BslaDaoInterfaceVariable")	
#end
${sddDaoInterfaceClass} $sddDaoInterfaceVariable;
#exposeQueryUpdatedAreas("SDD_EXECUTE_GET")
$!updatedAreaBegin
#if($isUpdated)
    $!updatedAreaSnippet
#else
    @GET
    @ApiOperation(value = "$query.name", notes = "$queryUtils.getDescription($query)", response = ${sddOutputBeanCollectionClass}.class)
    @ApiResponses(value = {
    	@ApiResponse(code = 200, message = "ok")
    })
    public $sddOutputBeanCollectionClass execute (
#resourceSignature("QueryParam")
    ) {
#if($isNotVoidInput)
        $sddInputBeanClass $sddInputBeanVariable = new $sddInputBeanClass ();
#foreach($column in $inputBean.columns)
#if (!$column.hasBeenDuplicated())
#putColumnParamNaming()
#if($columnUtils.isTime($column))
		if (${columnVar}!=null && ${columnVar}.getDate()!=null)
			${sddInputBeanVariable}.set$columnClass (${columnVar}.getDate());
#else
		${sddInputBeanVariable}.set$columnClass ($columnVar);
#end
#end
#end
        return ${sddDaoInterfaceVariable}.execute(
#daoParameters()
        );
#else
        return ${sddDaoInterfaceVariable}.execute(
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkName=$javaUtils.getJavaVariableNaming($queryChunk.name))
            #if($velocityCount>1),#end $chunkName 
#end
        );
#end
    }
#end

#exposeQueryUpdatedAreas("SDD_EXECUTE_POST")
$!updatedAreaBegin
#if($isUpdated)
    $!updatedAreaSnippet
#else
    @POST
    @ApiOperation(value = "$query.name", notes = "$queryUtils.getDescription($query)", response = ${sddOutputBeanCollectionClass}.class)
    @ApiResponses(value = {
    	@ApiResponse(code = 200, message = "ok")
    })
    public $sddOutputBeanCollectionClass post (
#resourceSignature("FormParam")
    ) {
#if($isNotVoidInput)
        $sddInputBeanClass $sddInputBeanVariable = new $sddInputBeanClass ();
#foreach($column in $inputBean.columns)
#if (!$column.hasBeenDuplicated())
#putColumnParamNaming()
#if($columnUtils.isTime($column))
		if (${columnVar}!=null && ${columnVar}.getDate()!=null)
			${sddInputBeanVariable}.set$columnClass (${columnVar}.getDate());
#else
		${sddInputBeanVariable}.set$columnClass ($columnVar);
#end
#end
#end
        return ${sddDaoInterfaceVariable}.execute(
#daoParameters()
        );
#else
        return ${sddDaoInterfaceVariable}.execute(
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkName=$javaUtils.getJavaVariableNaming($queryChunk.name))
            #if($velocityCount>1),#end $chunkName 
#end
        );
#end
    }
#end

#foreach ($pivot in $query.pivots)
#set($pivotClass = $formatUtils.firstUpperCase($pivot.name))
#set($pivotClasses = $i18nUtils.plurialize($pivotClass))
    @GET
    @Path ("/get${pivotClasses}")
    @ApiOperation(value = "get${pivotClasses}", notes = "get${pivotClasses}", response = ${pivotClass}.class)
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "ok")
    })
    public List<$pivotClass> get${pivotClasses} (
#resourceSignature("QueryParam")
    ) {
        $sddOutputBeanCollectionClass list = execute(
#resourceParameters()
			);
        return get${pivotClasses}(list);
    }
#end

#foreach ($pivot in $query.pivots)
#set($pivotClass = $formatUtils.firstUpperCase($pivot.name))
#set($pivotClasses = $i18nUtils.plurialize($pivotClass))
	private class $pivotClass {
#foreach ($column in $pivot.getColumnList())
#putColumnParamNaming()
		$columnType $columnVar;
    	public $columnType get$columnClass() {
        	return $columnVar;
    	}
#end
#foreach ($sibling in $pivot.getSiblings())	
#set($siblingClass = $formatUtils.firstUpperCase($sibling.name))
#set($siblingName = $i18nUtils.plurialize($sibling.name))
#set($siblingClasses = $i18nUtils.plurialize($siblingClass))
		@JsonSerialize(include= JsonSerialize.Inclusion.NON_NULL)	
		List<${siblingClass}> $siblingName;
		public void add${siblingClass}(${siblingClass} e) {
			get${siblingClasses}().add(e);
		}
		public List<${siblingClass}> get${siblingClasses}() {
			if (${siblingName}==null)
				${siblingName} = new ArrayList<${siblingClass}>();
			return ${siblingName};
		}
#end
	}
	
	public List<$pivotClass> get${pivotClasses} ($sddOutputBeanCollectionClass input) {
        List<$pivotClass> ret = new ArrayList<$pivotClass>();
#set($pivotColumnClassType = $commonUtils.getJavaType($pivot.getPivotColumn()))
        Map<$pivotColumnClassType, $pivotClass> map = new HashMap<$pivotColumnClassType, $pivotClass>();
        //todo pivotActorFilmOuts might be null
        for ($sddOutputBeanClass pivot : input.get${sddOutputBeanClass}s()) {
#set($pivotColumnClass = $commonUtils.getColumnClassName($pivot.getPivotColumn()))
            $pivotClass p = map.get(pivot.get$pivotColumnClass());

            if (p==null) {
                p = new $pivotClass();
#foreach ($column in $pivot.getColumnList())
#putColumnParamNaming()
                p.${columnVar} = pivot.get${columnClass}();
#end
                map.put(pivot.get$pivotColumnClass(), p);
            }
#foreach ($sibling in $pivot.getSiblings())	
#set($siblingClass = $formatUtils.firstUpperCase($sibling.name))
##set($siblingName = $i18nUtils.plurializeUppercase($sibling.name))
            ${siblingClass} s = new ${siblingClass}();
#foreach ($column in $sibling.getColumnList())
#putColumnParamNaming()
            s.${columnVar} = pivot.get${columnClass}();
#end
            p.add${siblingClass}(s);
#end
        }
        for ($pivotClass e : map.values()) {
            ret.add(e);
        }
        return ret;
    }
	
#end
$!updatedAreaEnd
$!updatedAreaImplementation
}