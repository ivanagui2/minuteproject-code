#generatorSpecific()
#exposeBackendTechnology()
#putJPA2TemplateDefinition()
#exposeVariableModelSpecific()
#exposeSpringModelSpecific()
#exposeSDDSpring()
#addedAreas()
#set($thisClassName="$className")
package $packageName;

$!updatedAreaImport

import java.util.List;
import java.util.ArrayList;


import eu.europa.ec.decide.cisnet.sdd.out.cabinet.CabinetCnsMailOutList;
import eu.europa.ec.decide.cisnet.service.face.cabinet.CabinetCnsMailService;
import jxl.Cell;
import jxl.CellView;
import jxl.Workbook;
import jxl.format.CellFormat;
import jxl.write.*;
import jxl.write.Number;	
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.servlet.ServletContext;
import java.io.File;
import java.io.IOException;
import java.util.Properties;

#foreach($queryScheduler in $schedulerUtils.getSchedulerEntries($model))
#set ($sddServiceInterfaceImport = $commonUtils.getEntityLevelTemplateFullPath($queryScheduler.query, $template, $templateSDDServiceInterface))
#set ($sddDaoInterfaceImport = $commonUtils.getEntityLevelTemplateFullPath($queryScheduler.query, $template, $templateSDDDaoInterface))
import $sddDaoInterfaceImport;
#set ($query = $queryScheduler.query)
#putImportQuerySDDBean()
import $sddInputBeanImport;
import $sddOutputBeanImport;
import $sddOutputBeanCollectionImport;
#end  
/**
 *
 * <p>Title: $thisClassName</p>
 *
 * <p>Description: Scheduler of model $model.name
 * </p>
 *
 */
 
//             * "0 0 * * * *" = the top of every hour of every day.
//             * "*/10 * * * * *" = every ten seconds.
//             * "0 0 8-10 * * *" = 8, 9 and 10 o'clock of every day.
//             * "0 0/30 8-10 * * *" = 8:00, 8:30, 9:00, 9:30 and 10 o'clock every day.
//             * "0 0 9-17 * * MON-FRI" = on the hour nine-to-five weekdays
//             * "0 0 0 25 12 ?" = every Christmas Day at midnight
 
@Component 
##@Transactional
public class $thisClassName {

#foreach($queryScheduler in $schedulerUtils.getSchedulerEntries($model))
#set ($schedulerAlias = $queryScheduler.name)
#set ($query = $queryScheduler.query)
#putImportQuerySDDBean()
#exposeQuerySpecific()
#set ($sizeColumn = $inputBean.columns.size())
#set ($inputBeanAtLeastOneVisibleColumn=$queryUtils.hasInputBeanAtLeastOneVisibleColumn($inputBean))
#set ($sddServiceInterfaceClass = $commonUtils.getTemplateClassName($query, $template, $templateSDDServiceInterface))
#set ($sddServiceInterfaceVariable = $commonUtils.getJavaNameVariableFirstLetter($sddServiceInterfaceClass))
#set ($sddDaoInterfaceClass = $commonUtils.getTemplateClassName($query, $template, $templateSDDDaoInterface))
#set ($sddDaoInterfaceVariable = $commonUtils.getJavaNameVariableFirstLetter($sddDaoInterfaceClass))
    @Autowired
    $sddDaoInterfaceClass $sddDaoInterfaceVariable;

    @Scheduled(cron="$queryScheduler.cron")
    public void ${schedulerAlias}() {
    	String reportFileName = "${queryScheduler.name}.xls"; 

        $sddOutputBeanCollectionClass list = 
            callImplementation$schedulerAlias (
#foreach($column in $inputBean.columns)
#if (!$column.hasBeenDuplicated() && !$column.isImplicit())
#putColumnParamNaming()
#if($columnUtils.isTime($column))
#set($columnType=$dateParamImport)
#end
#if($velocityCount>1)              ,#end           $schedulerUtils.getParamValue($queryScheduler, $column.name)
#end
#end
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkName=$javaUtils.getJavaVariableNaming($queryChunk.name))
#if($inputBeanAtLeastOneVisibleColumn || $velocityCount>1)        ,#end $schedulerUtils.getChunkValue($queryScheduler, $chunkName)
#end
		);
#if($queryScheduler.hasThresholdNbRecordMin())
		if (list.size()>$queryScheduler.thresholdNbRecordMin)
			performReportAndMailSend${schedulerAlias} (list);
		}
#end
        writeReport${schedulerAlias} (reportFileName, list);
        String from = "$queryScheduler.reportFrom";
        String to = "$queryScheduler.reportTo";
        String host = "localhost";

        //Get the session object
        Properties properties = System.getProperties();
        properties.setProperty("mail.smtp.host", host);
        Session session = Session.getDefaultInstance(properties);

        //compose the message
        try{
            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(from));
            message.addRecipient(Message.RecipientType.TO,new InternetAddress(to));
            message.setSubject("${queryScheduler.name} report "+list.get${sddOutputBeanClass}s().size());
            message.setText("Here is the report "+list.get${sddOutputBeanClass}s().size());

            // attachment
            BodyPart messageBodyPart = new MimeBodyPart();

            // Now set the actual message
            messageBodyPart.setText("$queryScheduler.name");

            // Create a multipar message
            Multipart multipart = new MimeMultipart();

            // Set text message part
            multipart.addBodyPart(messageBodyPart);

            // Part two is attachment
            messageBodyPart = new MimeBodyPart();
            String filename = getReportPath(reportFileName);
            DataSource source = new FileDataSource(filename);
            messageBodyPart.setDataHandler(new DataHandler(source));
            messageBodyPart.setFileName(reportFileName);
            multipart.addBodyPart(messageBodyPart);

            // Send the complete message parts
            message.setContent(multipart);

            // Send message
            Transport.send(message);

        }catch (MessagingException mex) {mex.printStackTrace();}
    }
    
//
	public $sddOutputBeanCollectionClass callImplementation$schedulerAlias (
#resourceSignature("", true)
	) {
#executeSddImplementation()	
	}
	
    private void writeReport$schedulerAlias (String name, $sddOutputBeanCollectionClass list) {

        //1. Create an Excel file
        WritableWorkbook myFirstWbook = null;
        try {

            File file = new File(getReportPath(name));
            if (!file.exists()) {
                file.createNewFile();
            }
            myFirstWbook = Workbook.createWorkbook(file);

            // create an Excel sheet
            WritableSheet excelSheet = myFirstWbook.createSheet("Report date", 0);

            // add something into the Excel sheet
#foreach ($column in $query.getOutputBean().getColumns())
            excelSheet.addCell(new Label($velocityCount, 0, "$column.name", getHeaderFont()));
#end
			int cpt = 1;
			for ($sddOutputBeanClass c : list.get${sddOutputBeanClass}s()) {
#foreach ($column in $query.getOutputBean().getColumns())
#putColumnParamNaming()
#if($columnUtils.isTimeStampColumn($column))
            	excelSheet.addCell(new Label($velocityCount, cpt, c.get$columnClass().toString()));
#else
            	excelSheet.addCell(new Label($velocityCount, cpt, c.get$columnClass()));
#end
#end
				cpt++;
			}

			sheetAutoFitColumns(myFirstWbook.getSheet(0));
            myFirstWbook.write();


        } catch (IOException |  WriteException e) {
            e.printStackTrace();
        } finally {

            if (myFirstWbook != null) {
                try {
                    myFirstWbook.close();
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (WriteException e) {
                    e.printStackTrace();
                }
            }
        }
    }
	
#end

$!updatedAreaImplementation

#*
    @Autowired
    private ServletContext servletContext;
    private String getReportPathServlet (String name) {
        return servletContext.getRealPath("/")+"/"+name;
    }
*#
    private String getReportPath (String name) {
        return System.getProperty("java.io.tmpdir")+"/"+name;
    }
    
    private WritableCellFormat getHeaderFont () throws WriteException {
        WritableFont cellFont = new WritableFont(WritableFont.COURIER, 16);
        cellFont.setBoldStyle(WritableFont.BOLD);
        return new WritableCellFormat(cellFont);
    }
    

    private void sheetAutoFitColumns(WritableSheet sheet) {
        for (int i = 0; i < sheet.getColumns(); i++) {
            Cell[] cells = sheet.getColumn(i);
            int longestStrLen = -1;

            if (cells.length == 0)
                continue;

        /* Find the widest cell in the column. */
            for (int j = 0; j < cells.length; j++) {
                if ( cells[j].getContents().length() > longestStrLen ) {
                    String str = cells[j].getContents();
                    if (str == null || str.isEmpty())
                        continue;
                    longestStrLen = str.trim().length();
                }
            }

        /* If not found, skip the column. */
            if (longestStrLen == -1)
                continue;

        /* If wider than the max width, crop width */
            if (longestStrLen > 255)
                longestStrLen = 255;

            CellView cv = sheet.getColumnView(i);
            cv.setSize(longestStrLen * 256 + 100); /* Every character is 256 units wide, so scale it. */
            sheet.setColumnView(i, cv);
        }
    }
}
