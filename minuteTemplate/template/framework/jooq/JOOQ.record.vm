#exposeJOOQEntitySpecific()
#addedAreas()
/**
 * This class is generated by minuteproject 4 jOOQ
 */
package $packageName;

import org.jooq.impl.UpdatableRecordImpl;

import $entityClassImport;
import $modelClassImport;
import $keysClassImport;
#foreach ($reference in $table.children)
//import 
#end

$!updatedAreaImport

$!updatedAreaClassAnnotation
@javax.annotation.Generated(value    = {"http://www.jooq.org", "$jooqVersion"},
                            comments = "This class is generated by minuteproject 4 jOOQ")
public class $className extends UpdatableRecordImpl<$recordClassImport> {

	private static final long serialVersionUID = $serialValue;

#foreach($column in ${table.primaryKeyColumns})
#putJOOQColumnParam()
	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 */
	public void setId(${primaryKeyFullType} value) {
		setValue($classPkConstant, value);
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 */
	public ${primaryKeyFullType} get$primaryKeyVariable() {
		return getValue($classPkConstant);
	}
#end
#foreach ($reference in $table.children)
##putJOOQReferenceParam()
#putJOOQReferenceParamChildren()
	/**
	 * An uncommented item
	 * 
	 */
	public java.util.List<$linkedRecordClassImport> fetch${linkedTableVariable}List() {
		return create()
##			.selectFrom(my.jooq.mp.tables.Conference.CONFERENCE)
##			.where(my.jooq.mp.tables.Conference.CONFERENCE.ADDRESS_ID.equal(getValue(my.jooq.mp.tables.Address.ADDRESS.ID)))		
			.selectFrom($linkedClassConstant)
			.where({$linkedClassConstant}.equal(getValue($classPkConstant)))
			.fetch();
	}

#end
#foreach ($column in $table.attributes)
#putJOOQColumnParam()
	/**
	 * mapping $column.name
	 */
	public void set$columnVar($columnFullType value) {
		setValue($classFieldConstant, value);
	}

#end
#foreach ($reference in $table.parents)
#putJOOQReferenceParam()	
	/**
	 * setter and mapper in for $localColumnVariable
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [${localTableVariable}.${localColumnVariable}]
	 * REFERENCES ${linkedTableVariable} [${linkedTableVariable}.${linkedColumnVariable}]
	 * </pre></code>
	 */
	public void set$localColumnVariable($columnFullType value) {
		setValue($classFieldConstant, value);
	}
	

	/**
	 * getter and mapper out for $localColumnVariable
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [${localTableVariable}.${localColumnVariable}]
	 * REFERENCES ${linkedTableVariable} [${linkedTableVariable}.${linkedColumnVariable}]
	 * </pre></code>
	 */
	public $columnFullType set$localColumnVariable() {
		return getValue($classFieldConstant);
	}
	

	/**
	 * fetcher of associated $foreignTableVariable
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [conference.address.country_id]
	 * REFERENCES country [conference.country.id]
	 * </pre></code>
	 */
	public $linkedRecordClassImport fetch$foreignTableClass() {
		return create()
			.selectFrom($classConstant)
			.where(${linkedClassFieldConstant}.equal(getValue($classFieldConstant)))
			.fetchOne();
	}

#end
	/**
	 * Create a detached $className
	 */
	public $className() {
		super($classConstant);
	}

$!updatedAreaImplementation	
}
