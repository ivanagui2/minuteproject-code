#exposeJOOQEntitySpecific()
#addedAreas()
/**
 * This class is generated by minuteproject 4 jOOQ
 */
package $packageName;

import org.jooq.impl.UpdatableRecordImpl;

import $entityClassImport;
import $modelClassImport;
import $keysClassImport;
#foreach ($reference in $table.children)

#end

$!updatedAreaImport

$!updatedAreaClassAnnotation
@javax.annotation.Generated(value    = {"http://www.jooq.org", "$jooqVersion"},
                            comments = "This class is generated by minuteproject 4 jOOQ")
public class AddressRecord extends UpdatableRecordImpl<$recordClassImport> {

	private static final long serialVersionUID = $serialValue;

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 */
	public void setId(java.lang.Long value) {
		setValue(my.jooq.mp.tables.Address.ADDRESS.ID, value);
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 */
	public java.lang.Long getId() {
		return getValue(my.jooq.mp.tables.Address.ADDRESS.ID);
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 */
	public java.util.List<my.jooq.mp.tables.records.ConferenceRecord> fetchConferenceList() {
		return create()
			.selectFrom(my.jooq.mp.tables.Conference.CONFERENCE)
			.where(my.jooq.mp.tables.Conference.CONFERENCE.ADDRESS_ID.equal(getValue(my.jooq.mp.tables.Address.ADDRESS.ID)))
			.fetch();
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 */
	public java.util.List<my.jooq.mp.tables.records.ConferenceMemberRecord> fetchConferenceMemberList() {
		return create()
			.selectFrom(my.jooq.mp.tables.ConferenceMember.CONFERENCE_MEMBER)
			.where(my.jooq.mp.tables.ConferenceMember.CONFERENCE_MEMBER.ADDRESS_ID.equal(getValue(my.jooq.mp.tables.Address.ADDRESS.ID)))
			.fetch();
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 */
	public java.util.List<my.jooq.mp.tables.records.SponsorRecord> fetchSponsorList() {
		return create()
			.selectFrom(my.jooq.mp.tables.Sponsor.SPONSOR)
			.where(my.jooq.mp.tables.Sponsor.SPONSOR.ADDRESS_ID.equal(getValue(my.jooq.mp.tables.Address.ADDRESS.ID)))
			.fetch();
	}

	/**
	 * An uncommented item
	 */
	public void setStreet1(java.lang.String value) {
		setValue(my.jooq.mp.tables.Address.ADDRESS.STREET1, value);
	}

	/**
	 * An uncommented item
	 */
	public java.lang.String getStreet1() {
		return getValue(my.jooq.mp.tables.Address.ADDRESS.STREET1);
	}

	/**
	 * An uncommented item
	 */
	public void setStreet2(java.lang.String value) {
		setValue(my.jooq.mp.tables.Address.ADDRESS.STREET2, value);
	}

	/**
	 * An uncommented item
	 */
	public java.lang.String getStreet2() {
		return getValue(my.jooq.mp.tables.Address.ADDRESS.STREET2);
	}

	/**
	 * An uncommented item
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [conference.address.country_id]
	 * REFERENCES country [conference.country.id]
	 * </pre></code>
	 */
	public void setCountryId(java.lang.Integer value) {
		setValue(my.jooq.mp.tables.Address.ADDRESS.COUNTRY_ID, value);
	}

	/**
	 * An uncommented item
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [conference.address.country_id]
	 * REFERENCES country [conference.country.id]
	 * </pre></code>
	 */
	public java.lang.Integer getCountryId() {
		return getValue(my.jooq.mp.tables.Address.ADDRESS.COUNTRY_ID);
	}

	/**
	 * An uncommented item
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [conference.address.country_id]
	 * REFERENCES country [conference.country.id]
	 * </pre></code>
	 */
	public my.jooq.mp.tables.records.CountryRecord fetchCountry() {
		return create()
			.selectFrom(my.jooq.mp.tables.Country.COUNTRY)
			.where(my.jooq.mp.tables.Country.COUNTRY.ID.equal(getValue(my.jooq.mp.tables.Address.ADDRESS.COUNTRY_ID)))
			.fetchOne();
	}

	/**
	 * Create a detached AddressRecord
	 */
	public $className() {
		super(my.jooq.mp.tables.Address.ADDRESS);
	}
}
