#exposeQuerySpecific()
#putImportQuerySDDBean()
#addedAreas()
package $packageName;

import java.sql.*;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;

import org.apache.commons.lang.StringUtils;

import net.sf.minuteproject.fitnesse.fixture.DbSddFixture;
import net.sf.minuteproject.utils.database.DatabaseUtils;
import fit.ColumnFixture;
import fitnesse.fixtures.TableFixture;

public class ${className} extends DbSddFixture{

#set ($fullQuery = $queryUtils.getFullQueryQuestionMark($query))
#set ($coreQuery = $queryUtils.getQueryBodyQuestionMark($query))
	public static final String QUERY_NATIVE = "$coreQuery";
#set ($nbInputColumn = 0)
#foreach($column in $inputBean.columns)
#if (!$column.hasBeenDuplicated())
#putColumnParamNaming()
	public $columnType $formatUtils.getUppercaseUnderscore($column.name); //$columnVar; // 
#set ($nbInputColumn = $velocityCount)
#end
#end
// chunks
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkName=$javaUtils.getJavaVariableNaming($queryChunk.name))
	public String $chunkName; 
#end
// filters
#foreach ($filter in $query.queryFilters)
	public static final String CHUNK_$filter.name = "$filter.value";
#end

#set ($nbColumn = 0)
#foreach($column in $outputBean.columns)
#putColumnParamNaming()
	public $columnType ${formatUtils.getUppercaseUnderscore($column.name)}_; //$columnVar; // 
#set ($nbColumn = $velocityCount)
#end
	public static int NB_COLUMN = $nbColumn;
	public static int NB_INPUT_COLUMN = $nbInputColumn;
	private static Map<String,Integer> map = new HashMap<String,Integer>();

	static {
#foreach($column in $outputBean.columns)
		map.put("${formatUtils.getUppercaseUnderscore($column.name)}",$velocityCount);
#end
	}

	public int getIndex (String columnName) {
		String s = columnName.toUpperCase();
		return map.get(s);
	}
	
	protected int getNumberOfColumn() {
		return NB_COLUMN;
	}

	protected int getInputNumberOfColumn() {
		return NB_INPUT_COLUMN;
	}
	@Override
	protected void doStaticTable(int arg0) {
#if($query.isWrite())
		try {
			executeQuery();
		} catch (SQLException e) {
			e.printStackTrace();
		}
#else
  		try {
			resultSet = executeQueryAndGetResult();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		checkCount(resultSet.length+"");
		checkResultSet();
#end
	}
#if($query.isWrite())
	private void executeQuery() throws SQLException {
#else
	private Object[][] executeQueryAndGetResult() throws SQLException {
#end
		Connection connection = DatabaseUtils.getConnection();
		String query = getStatement (QUERY_NATIVE);
#if($query.isWrite())
		CallableStatement pstmt = connection.prepareCall(query);
#else
		PreparedStatement pstmt = connection.prepareStatement(query);
#end
		Map<String, String> map = getColumnValue();
#foreach($column in $inputBean.columns)
##TODO for output column pstmt.registerOutParameter(1, Types.INTEGER);
#if($column.isOutputParam())
		pstmt.registerOutParameter($velocityCount, java.sql.Types.${column.type});
#else
#putColumnParamNaming()
#set($columnType = $statementUtils.getJdbcType($column))
#set($column_name = ${formatUtils.getUppercaseUnderscore($column.name)})
#if ($columnUtils.isString($column))
        $column_name = map.get("$column_name");
#else
#if (!$column.hasBeenDuplicated())
        String ${column_name}_string = map.get("$column_name");
#else
##        ${column_name}_string = map.get("$column_name");
#end
#if ($columnUtils.isInteger($column))
        $column_name = (!StringUtils.isEmpty(${column_name}_string))?Integer.valueOf(${column_name}_string):null;
#elseif($columnUtils.isLong($column))
        $column_name = (!StringUtils.isEmpty(${column_name}_string))?Long.valueOf(${column_name}_string):null;
#end
#end
        if ($column_name==null) {
            pstmt.setNull($velocityCount, java.sql.Types.${column.type});
        } else {
            pstmt.set$columnType($velocityCount, $column_name);
        }
#end
#end
#if($query.isWrite())
		pstmt.executeQuery();
		pstmt.close();
		connection.close();
#else
		Object[][] ret =  getResultSet(pstmt.executeQuery());
		pstmt.close();
		connection.close();
		return ret;
#end
	}

##TODO replace by common_lib.vm public String getStatement(
	private String getStatement (String query) {
		boolean isWhereDone = false;
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkNameString=$javaUtils.getJavaVariableNaming($queryChunk.name))
		query = StringUtils.replace (query, "$"+"$chunkNameString", ${chunkNameString});  
#end
#foreach ($filter in $query.queryFilters)
		if (
##TODO Case none
#foreach ($param in $filter.queryParams.queryParams)
#set($paramName=$formatUtils.getJavaName(${param.name}))
			#if ($velocityCount>1) && #end map.get("$column_name") != null
#end
			) {
			String connectionWord = " AND ";
#if ($filter.isWhere())
			if (!isWhereDone) {
				connectionWord = " WHERE ";
			}
#end
			query = StringUtils.replace (query, "$"+"$filter.name", connectionWord + CHUNK_$filter.name ); 
			isWhereDone = true;
		} else {
			query = StringUtils.replace (query, "$"+"$filter.name","");
		}
#end
##injectGetStatementChunk()
##injectGetStatementFilter()
		return query;
	}
	
	@Override
	protected String getTable() {
		return "$query.name";
	}
}
