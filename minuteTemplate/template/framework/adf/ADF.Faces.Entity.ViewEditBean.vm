#exposeADFFacesEntitySpecific()
package $packageName;

import $beanVOADFFacesImport;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCBindingContainer;
import oracle.adf.view.rich.context.AdfFacesContext;

import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

public class $className {
    
    private ${beanVOADFFacesClass} ${beanVOADFFacesVariable};
##works for one pk only
    private $primaryKeyType ${domainVariableName}Param;
    
    public $className () {
        ${domainVariableName}Param = ($primaryKeyType)AdfFacesContext.getCurrentInstance().getDialogService().getInitialDialogParameters().get("${entityADFVariable}Reference");
    }

    public void delete${domainClassName}(DCBindingContainer bindings) {
        if (${beanVOADFFacesVariable}==null) {
            Map map = new HashMap();
##works one for one primary key
            ${beanVOADFFacesClass} ref = new ${beanVOADFFacesClass}();
            ref.set$primaryKeyJavaNameClass(${domainVariableName}Param);
            map.put("${beanVOADFFacesVariable}", ref);
            
##            BindingContext bindingCtx = BindingContext.getCurrent();
##            BindingContainer bindings = bindingCtx.getCurrentBindingsEntry();
            
            OperationBinding ob = bindings.getOperationBinding("delete$domainClassName");
            ob.getParamsMap().putAll(map);
            ob.execute();
            
//            reset(bindings);
        }
    }
    
    public void rollback${domainClassName}() {
	    System.out.println(">>>> rollback ");
        this.${beanVOADFFacesVariable} = null;
    }
    
    public void save${domainClassName}(DCBindingContainer bindings) {
        Map ${domainVariableName}Param = new HashMap();
        ${domainVariableName}Param.put("${beanVOADFFacesVariable}", this.${beanVOADFFacesVariable});
        System.out.println(">>>>> ${beanVOADFFacesVariable} "+this.${beanVOADFFacesVariable});
		OperationBinding ob = bindings.getOperationBinding("createOrUpdate${domainClassName}");
        ob.getParamsMap().putAll(${domainVariableName}Param);
        ob.execute();
    }
    
    public void set${domainClassName}($beanVOADFFacesClass ${beanVOADFFacesVariable}) {
        this.${beanVOADFFacesVariable} = ${beanVOADFFacesVariable};
    }

    public ${beanVOADFFacesClass} get${domainClassName}() {
        
        if (${beanVOADFFacesVariable}==null) {
            Map map = new HashMap();
##works one for one primary key
            ${beanVOADFFacesClass} ref = new ${beanVOADFFacesClass}();
            ref.set$primaryKeyJavaNameClass(${domainVariableName}Param);
            map.put("${beanVOADFFacesVariable}", ref);
			
            BindingContext bindingCtx = BindingContext.getCurrent();
            BindingContainer bindings = bindingCtx.getCurrentBindingsEntry();
			
            OperationBinding ob = bindings.getOperationBinding("get$domainClassName");
            ob.getParamsMap().putAll(map);
            this.${beanVOADFFacesVariable} = (${beanVOADFFacesClass})ob.execute();
        }
        return ${beanVOADFFacesVariable};
    
    }

#if($todo)
	public void reset () {
        Map mapParam = new HashMap();
        mapParam.put("${domainVariableName}", new $beanVOADFFacesClass()); //the variable name of the operation signature has to be passed
        OperationBinding ob = bindings.getOperationBinding("list$domainClassName");
        ob.getParamsMap().putAll(mapParam);
        ob.execute();
        $beanVOADFFacesQueryResponseClass result = ($beanVOADFFacesQueryResponseClass)ob.getResult();
        //displayResults=true;
        ${domainVariableName}Table.getRequest().getCriterias().clear();
        ${domainVariableName}Table.setPageNumber(1);
	}
#end	
}
