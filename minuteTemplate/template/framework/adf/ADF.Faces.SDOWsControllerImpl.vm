#exposeADFFacesModelSpecific()
#exposeADFFacesDataControlModelSpecific()
#exposeFrontEndBackendBindingType()
#set($thisClassName=$className)
package $packageName;

import eu.adf.fwk.query.QueryRequest;
import eu.adf.fwk.query.QueryResponse;

import $ADFSDOWsDcFaceImport;

#foreach($table in $entities)
#exposeADFFacesEntitySpecific()
#exposeADFFacesDataControlEntitySpecific()
import $beanVOADFFacesImport;
import $beanVOADFFacesQueryResponseImport;
import $beanVOADFFacesQueryRequestImport;
#end
#if($isBindingSpring)
#foreach($table in $entities)
#exposeADFFacesSpringBindingSpecific()
import $beanADFFacesSpringServiceImport;
#end
#end

import java.util.List;

public class $thisClassName implements $ADFSDOWsDcFaceClass {

    public $thisClassName() {
        System.out.println(">>>>>>>>>>> constructor before loading config");
#if($isBindingSpring)
#foreach($table in $entities)
#exposeADFFacesSpringBindingSpecific()
        $beanADFFacesSpringServiceClass $beanADFFacesSpringServiceVariable = ($beanADFFacesSpringServiceClass)AppContextLoader.getContextLoader().getAppContext().getBean("$beanADFFacesSpringServiceVariable");;
#end
#end
        System.out.println(">>>>>>>>>>> constructor after loading config "+langDao);
    }
	
#foreach($table in $entities)
#exposeADFFacesEntitySpecific()
#exposeADFFacesDataControlEntitySpecific()
#if ($hasSearch)
  /**
   * @return $beanVOADFFacesQueryResponseClass
   */
  public $beanVOADFFacesQueryResponseClass list$domainClassName($beanVOADFFacesQueryRequestClass request) {
     System.out.println(">>>> list$domainClassName");
	 return new $beanVOADFFacesQueryResponseClass();
  }
#end
   /**
    * @return $beanVOADFFacesClass
   */
   public $beanVOADFFacesClass get$domainClassName ($beanVOADFFacesClass $beanVOADFFacesVariable) {
      System.out.println(">>>> get$domainClassName");
	  return new $beanVOADFFacesClass();
   }
  
   public $beanVOADFFacesClass createOrUpdate$domainClassName ($beanVOADFFacesClass $beanVOADFFacesVariable){
      System.out.println(">>>> createOrUpdate$domainClassName");
#if($isBindingSpring)
	  ${domainClassImport} var = new ${domainClassImport} ();
        try {
            BeanUtils.copyProperties(var, $beanVOADFFacesVariable);
        } catch (IllegalAccessException e) {
        } catch (InvocationTargetException e) {
        }
	  ${beanADFFacesSpringServiceVariable}.create(var);
#end
	  return $beanVOADFFacesVariable;
   }
  
   public void delete$domainClassName ($beanVOADFFacesClass $beanVOADFFacesVariable){
      System.out.println(">>>> delete$domainClassName");
   }

#end

}
