#exposeADFFacesModelSpecific()
#exposeADFFacesDataControlModelSpecific()
#exposeFrontEndBackendBindingType()
#set($thisClassName=$className)
package $packageName;

import eu.adf.fwk.query.QueryRequest;
import eu.adf.fwk.query.QueryResponse;

import $ADFSDOWsDcFaceImport;

#foreach($table in $entities)
#exposeADFFacesEntitySpecific()
#exposeADFFacesDataControlEntitySpecific()
#if(!$isMany2Many)
import $beanVOADFFacesImport;
import $beanVOADFFacesQueryResponseImport;
import $beanVOADFFacesQueryRequestImport;
#end
#end
#if($isBindingSpring)
#foreach($table in $entities)
#exposeVariableEntitySpecific()
#exposeADFFacesSpringBindingSpecific()
#if(!$isMany2Many)
import $beanADFFacesSpringServiceImport;
#end
#end
#end

import java.lang.reflect.InvocationTargetException;

import java.util.List;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.PropertyUtils;

import java.sql.Timestamp;

public class $thisClassName implements $ADFSDOWsDcFaceClass {

#if($isBindingSpring)
#foreach($table in $entities)
#exposeVariableEntitySpecific()
#exposeADFFacesSpringBindingSpecific()
#set($domainTemplate = $commonUtils.getTargetTemplate($template, "DomainEntityJPA2Annotation"))
#if(!$isMany2Many)
    private $beanADFFacesSpringServiceClass $beanADFFacesSpringServiceVariable;
#end
#end
#end
    public $thisClassName() {
        System.out.println(">>>>>>>>>>> constructor before loading config");
#if($isBindingSpring)
#foreach($table in $entities)
#exposeVariableEntitySpecific()
#exposeADFFacesSpringBindingSpecific()
#if(!$isMany2Many)
        $beanADFFacesSpringServiceVariable = ($beanADFFacesSpringServiceClass)AppContextLoader.getContextLoader().getAppContext().getBean("$beanADFFacesSpringServiceVariable");;
#end
#end
#end
    }
/*   public void convert(Object output, Object input) {
      try {
         BeanUtils.copyProperties(output, input);
      } catch (IllegalAccessException e) {
      } catch (InvocationTargetException e) {
      }   
   }
*/   
   public void convert(Object output, Object input) {
      try {
         BeanUtils.copyProperties(output, input);
      } catch (IllegalAccessException e) {
      } catch (InvocationTargetException e) {
      } catch (Exception e) {
          //TODO handle
      System.out.println("e:"+e.getMessage());
      }
    }
#foreach($table in $entities)
#exposeADFFacesEntitySpecific()
#exposeADFFacesDataControlEntitySpecific()
#exposeADFFacesSpringBindingSpecific()
#set($tableHasOnlyOnePrimaryKey=$hasOnlyOnePrimaryKey)
#if(!$isMany2Many)
##if ($hasSearch)
	
  private void convert($beanVOADFFacesClass input, ${domainClassImport} output) {
#foreach ($column in ${table.columns})
#putColumnParamNaming()
#if(!$isForeignKey && !$tableUtils.isCompositePrimaryKeyNotMany2Many($table))
#set ($isEnum = $enumUtils.isEnumType($domainTemplate, $column))
#if($isEnum)
    output.set$columnClass(output.get$columnClass().fromValue(input.get$columnClass()));
#elseif(!$column.isLob())
    output.set$columnClass(input.get$columnClass());
#end
#end
#end
  }
	
  private void convert($domainClassImport input, ${beanVOADFFacesClass} output) {
#foreach ($column in ${table.columns})
#putColumnParamNaming()
#if(!$isForeignKey && !$tableUtils.isCompositePrimaryKeyNotMany2Many($table))
#set ($isEnum = $enumUtils.isEnumType($domainTemplate, $column))
#if($isEnum)
    output.set$columnClass(input.get$columnClass().toString());
#elseif($columnUtils.isTimeStampColumn($column))
    output.set$columnClass(new Timestamp(input.get$columnClass().getTime()));
#elseif(!$column.isLob())
    output.set$columnClass(input.get$columnClass());
#end
#end
#end
  }
  /**
   * @return $beanVOADFFacesQueryResponseClass
   */
  public $beanVOADFFacesQueryResponseClass list$domainClassName($beanVOADFFacesQueryRequestClass request) {
     System.out.println(">>>> list$domainClassName");
     $beanVOADFFacesClass input = request.get${beanVOADFFacesClass}();
     System.out.println(">>>> input "+input);
     if (input==null)
        input = new $beanVOADFFacesClass();
     ${domainClassImport} var = new ${domainClassImport} ();
     convert(input, var);
     var.assignNullToBlank();
     List<$domainClassImport> list;
     if (QueryRequest.PrototypeMatchType.ALL.equals(request.getMatchType()))
        list = ${beanADFFacesSpringServiceVariable}.findAll(var);
     else
        list = ${beanADFFacesSpringServiceVariable}.findAny(var);
     $beanVOADFFacesQueryResponseClass ret = new $beanVOADFFacesQueryResponseClass();
     for($domainClassImport element : list) {
        $beanVOADFFacesClass output = new $beanVOADFFacesClass();
        convert(element, output);
        ret.add$beanVOADFFacesClass(output);
     }
     return ret;
  }

   /**
    * @return $beanVOADFFacesClass
   */
   public $beanVOADFFacesClass get$domainClassName ($beanVOADFFacesClass $beanVOADFFacesVariable) {
      System.out.println(">>>> get$domainClassName");
#if($tableHasOnlyOnePrimaryKey)
      ${domainClassImport} var = ${beanADFFacesSpringServiceVariable}.findById(${beanVOADFFacesVariable}.get$primaryKeyJavaNameClass());
      convert(var, $beanVOADFFacesVariable);
#else
      // multiple primary key not supported yet
#end
	  return $beanVOADFFacesVariable;
   }
   
   public $beanVOADFFacesClass createOrUpdate$domainClassName ($beanVOADFFacesClass $beanVOADFFacesVariable){
      System.out.println(">>>> createOrUpdate$domainClassName"+$beanVOADFFacesVariable);
#if($isBindingSpring)
      ${domainClassImport} var = new ${domainClassImport} ();
      convert($beanVOADFFacesVariable, var);
      System.out.println(">>>> createOrUpdate$domainClassName var :"+var);
	  if (var.get$primaryKeyJavaNameClass()!=null)
		 ${beanADFFacesSpringServiceVariable}.update(var);
	  else
		 ${beanADFFacesSpringServiceVariable}.create(var);
#end
      return $beanVOADFFacesVariable;
   }
  
   public void delete$domainClassName ($beanVOADFFacesClass $beanVOADFFacesVariable){
      System.out.println(">>>> delete$domainClassName : "+$beanVOADFFacesVariable);
#if($tableHasOnlyOnePrimaryKey)
      ${domainClassImport} var = new ${domainClassImport} ();
      convert($beanVOADFFacesVariable, var);
	  System.out.println(">>>> delete "+var);
      ${beanADFFacesSpringServiceVariable}.delete(var);
#else
      // multiple primary key not supported yet
#end
   }

#end
#end

}
