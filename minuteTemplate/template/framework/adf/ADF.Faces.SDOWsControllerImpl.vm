#exposeADFFacesModelSpecific()
#exposeADFFacesDataControlModelSpecific()
#exposeFrontEndBackendBindingType()
#set($thisClassName=$className)
package $packageName;

import eu.adf.fwk.query.QueryRequest;
import eu.adf.fwk.query.QueryResponse;

import java.util.ArrayList;

import $ADFSDOWsDcFaceImport;
import static ${ADFFEBEConverterImport}.*;

#foreach($table in $entities)
#exposeADFFacesEntitySpecific()
#exposeADFFacesDataControlEntitySpecific()
#if(!$isMany2Many)
import $beanVOADFFacesImport;
import $beanVOADFFacesQueryResponseImport;
import $beanVOADFFacesQueryRequestImport;
#end
#end
#if($isBindingSpring)
#foreach($table in $entities)
#exposeVariableEntitySpecific()
#exposeADFFacesSpringBindingSpecific()
#if(!$isMany2Many)
import $beanADFFacesSpringServiceImport;
#end
#end
#end

#foreach ($query in $model.getStatementModel().getQueries().getQueries())
#exposeADFQuerySpecific()
#exposeSDDSpring()
#putImportQuerySDDBean()
import $sddOutputBeanCollectionImport;
#if($isNotVoidInput)
import $sddInputBeanImport;
#end
import $sddServiceInterfaceImport;
#end

import java.lang.reflect.InvocationTargetException;

import java.util.List;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.PropertyUtils;

import net.sf.minuteProject.model.data.criteria.constant.EntityMatchType;
import net.sf.minuteProject.model.data.criteria.constant.OperandType;

import java.sql.Timestamp;

public class $thisClassName implements $ADFSDOWsDcFaceClass {

#if($isBindingSpring)
#foreach($table in $entities)
#exposeVariableEntitySpecific()
#exposeADFFacesSpringBindingSpecific()
#set($domainTemplate = $commonUtils.getTargetTemplate($template, "DomainEntityJPA2Annotation"))
#if(!$isMany2Many)
    private $beanADFFacesSpringServiceClass $beanADFFacesSpringServiceVariable;
#end
#end
#end
// SDD
#foreach ($query in $model.getStatementModel().getQueries().getQueries())
#exposeADFQuerySpecific()
#exposeSDDSpring()
#putImportQuerySDDBean()
    ${sddServiceInterfaceClass} $sddServiceInterfaceVariable;
#end
    public $thisClassName() {
#if($isBindingSpring)
#foreach($table in $entities)
#exposeVariableEntitySpecific()
#exposeADFFacesSpringBindingSpecific()
#if(!$isMany2Many)
        $beanADFFacesSpringServiceVariable = ($beanADFFacesSpringServiceClass)AppContextLoader.getContextLoader().getAppContext().getBean("$beanADFFacesSpringServiceVariable");
#end
#end
#end
#foreach ($query in $model.getStatementModel().getQueries().getQueries())
#exposeADFQuerySpecific()
#exposeSDDSpring()
#putImportQuerySDDBean()
    $sddServiceInterfaceVariable  = (${sddServiceInterfaceClass})AppContextLoader.getContextLoader().getAppContext().getBean("$sddServiceInterfaceVariable");;
#end
    }
 
    private EntityMatchType getEntityMatchType(QueryRequest request) {
        if (QueryRequest.PrototypeMatchType.ALL.equals(request.getMatchType()))
            return EntityMatchType.ALL;
        if (QueryRequest.PrototypeMatchType.ANY.equals(request.getMatchType()))
            return EntityMatchType.ANY;
        return EntityMatchType.ALL;
    }
	
    private boolean isCaseSensitive(QueryRequest request) {
        return (QueryRequest.PrototypeCase.SENSITIVE.equals(request.getCaseSensitiveness()))?true:false;
    }
	
    private OperandType getOperandType(QueryRequest request) {
        if (QueryRequest.PrototypeType.EQUALS.equals(request.getType()))
            return OperandType.EQUALS;
        if (QueryRequest.PrototypeType.LIKE.equals(request.getType()))
            return OperandType.LIKE;
        if (QueryRequest.PrototypeType.CONTAINS.equals(request.getType()))
            return OperandType.CONTAINS; 
        return OperandType.EQUALS;
    } 
	

#foreach($table in $entities)
#exposeADFFacesEntitySpecific()
#exposeADFFacesDataControlEntitySpecific()
#exposeADFFacesSpringBindingSpecific()
#set($tableHasOnlyOnePrimaryKey=$hasOnlyOnePrimaryKey)
#if(!$isMany2Many)
#set($beanVOADFFacesVariable = $formatUtils.getJavaNameVariableConvertReservedWord($beanVOADFFacesVariable))
	
##  public static void convert($beanVOADFFacesClass input, ${domainClassImport} output) {
###putConverter()
###putConverterM2M4Bean()
##  }
##	
##  public static void convert($domainClassImport input, ${beanVOADFFacesClass} output) {
###putConverter()
###putConverterM2M4Domain()
##  }
  /**
   * @return $beanVOADFFacesQueryResponseClass
   */
  public $beanVOADFFacesQueryResponseClass list$domainClassName($beanVOADFFacesQueryRequestClass request) {
     $beanVOADFFacesClass input = request.get${beanVOADFFacesClass}();
     if (input==null)
        input = new $beanVOADFFacesClass();
     ${domainClassImport} var = new ${domainClassImport} ();
     convert(input, var);
     var.assignNullToBlank();
     List<$domainClassImport> list = ${beanADFFacesSpringServiceVariable}.find(var, getEntityMatchType(request), getOperandType(request), isCaseSensitive(request));
     $beanVOADFFacesQueryResponseClass ret = new $beanVOADFFacesQueryResponseClass();
     for($domainClassImport element : list) {
        $beanVOADFFacesClass output = new $beanVOADFFacesClass();
        convert(element, output);
        ret.add$beanVOADFFacesClass(output);
     }
     return ret;
  }

   /**
    * @return $beanVOADFFacesClass
   */
   public $beanVOADFFacesClass get$domainClassName ($beanVOADFFacesClass $beanVOADFFacesVariable) {
      System.out.println(">>>> get$domainClassName");
#if($tableHasOnlyOnePrimaryKey)
      ${domainClassImport} var = ${beanADFFacesSpringServiceVariable}.load(${beanVOADFFacesVariable}.get$primaryKeyJavaNameClass());
      convert(var, $beanVOADFFacesVariable);
#else
      // multiple primary key not supported yet
#end
	  return $beanVOADFFacesVariable;
   }
   
   public $beanVOADFFacesClass createOrUpdate$domainClassName ($beanVOADFFacesClass $beanVOADFFacesVariable){
#if($isBindingSpring)
      ${domainClassImport} var = new ${domainClassImport} ();
      convert($beanVOADFFacesVariable, var);
      System.out.println(">>>> createOrUpdate$domainClassName var :"+var);
#if (!$tableUtils.isCompositePrimaryKeyNotMany2Many($table))
	  if (var.get$primaryKeyJavaNameClass()!=null)
		 ${beanADFFacesSpringServiceVariable}.update(var);
	  else
		 ${beanADFFacesSpringServiceVariable}.create(var);
#end
#end
      return $beanVOADFFacesVariable;
   }
  
   public void delete$domainClassName ($beanVOADFFacesClass $beanVOADFFacesVariable){
      System.out.println(">>>> delete$domainClassName : "+$beanVOADFFacesVariable);
#if($tableHasOnlyOnePrimaryKey)
      ${domainClassImport} var = new ${domainClassImport} ();
      convert($beanVOADFFacesVariable, var);
	  System.out.println(">>>> delete "+var);
      ${beanADFFacesSpringServiceVariable}.delete(var);
#else
      // multiple primary key not supported yet
#end
   }

#if ($tableUtils.isAdminContentType($table))
    public List<$beanVOADFFacesClass> get${beanVOADFFacesClass}DropDownList() {
     List<$beanVOADFFacesClass> ret = new ArrayList<$beanVOADFFacesClass>();
	 for($domainClassImport element : ${beanADFFacesSpringServiceVariable}.getList()) {
        $beanVOADFFacesClass output = new $beanVOADFFacesClass();
        convert(element, output);
        ret.add(output);
     }
     return ret;
    }
		
#end
#end
#end

#foreach ($query in $model.getStatementModel().getQueries().getQueries())
#exposeADFQuerySpecific()
#putImportQuerySDDBean()
    public $sddOutputBeanCollectionClass get$sddOutputBeanCollectionClass (#if($isNotVoidInput)$sddInputBeanClass $sddInputBeanVariable#end) {
	    System.out.println(">>>> execute");
		return ${sddServiceInterfaceVariable}.execute (#if($isNotVoidInput)$sddInputBeanVariable#end);
    }
	
    public $sddOutputBeanClass get${sddOutputBeanClass}Detail ($sddOutputBeanClass $sddOutputBeanVariable) {
        System.out.println(">>>>>>>>> execute $sddOutputBeanClass "+$sddOutputBeanVariable);
        return $sddOutputBeanVariable;
    }
	
#end
}
