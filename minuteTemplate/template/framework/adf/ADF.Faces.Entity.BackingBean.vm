#exposeADFFacesEntitySpecific()
#exposeADFFacesDataControlEntitySpecific()
package $packageName;

import $beanVOADFFacesImport;
#if($hasCriteriaApi)
import mypackage.Criteria;

import mypackage.CriteriaExpression;

import mypackage.UnaryOperationCode;
import mypackage.ValueExpression;
#end
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import javax.faces.component.UIComponent;
import javax.faces.event.ActionEvent;

import oracle.adf.model.BindingContext;
import oracle.adf.view.rich.component.rich.layout.RichPanelTabbed;
import oracle.adf.view.rich.component.rich.layout.RichShowDetailItem;
import oracle.adf.view.rich.component.rich.nav.RichCommandLink;

import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import org.apache.myfaces.trinidad.event.LaunchEvent;

import eu.adf.fwk.utils.TablePaginationUtils;
import eu.adf.fwk.utils.EntityPaginator;

import $beanVOADFFacesImport;
import $beanVOADFFacesQueryResponseImport;
import $beanVOADFFacesQueryRequestImport;

public class $className {
    
##    private TablePaginationUtils ${domainVariableName}Table;
    private EntityPaginator<$beanVOADFFacesQueryRequestClass> ${domainVariableName}Table;
    private String ${domainVariableName}Name;
    private String ${domainVariableName}Reference;
    private RichPanelTabbed panelTab;
    private $beanVOADFFacesClass $beanVOADFFacesVariable = new $beanVOADFFacesClass();
    private $beanVOADFFacesClass search$beanVOADFFacesVariable = new $beanVOADFFacesClass();
    private Boolean displayResults = true;
    private Boolean displaySearch = false;    

    public $className() {
##        ${domainVariableName}Table = new TablePaginationUtils("list${domainClassName}");
        ${domainVariableName}Table = new EntityPaginator<$beanVOADFFacesQueryRequestClass>(${beanVOADFFacesQueryRequestClass}.class, "list${domainClassName}");
#if($runTimeErrorSolved)
        ${domainVariableName}Table.refreshPagination();
#end
    }

#putGetterSetter ($beanVOADFFacesClass $beanVOADFFacesVariable)

    public void set${domainClassName}Table(EntityPaginator<$beanVOADFFacesQueryRequestClass> table) {
        this.${domainVariableName}Table = table;
    }

    public EntityPaginator<$beanVOADFFacesQueryRequestClass> get${domainClassName}Table() {
        return ${domainVariableName}Table;
    }

    public String get${domainClassName}Name() {
        return ${domainVariableName}Name;
    }

    public void set${domainClassName}Reference(String ${domainVariableName}Reference) {
        this.${domainVariableName}Reference = ${domainVariableName}Reference;
    }

    public String get${domainClassName}Reference() {
        return ${domainVariableName}Reference;
    }

    public void doSearch(ActionEvent actionEvent) {
#if($hasCriteriaApi)
        ${domainVariableName}Table.getRequest().getCriterias().clear();
        Criteria criteria = new Criteria();
        CriteriaExpression expression = new CriteriaExpression();
        criteria.setCriteriaExpression(expression);
        
        if (${domainVariableName}Name!=null && !"".equals(${domainVariableName}Name)) {
            ValueExpression ve = new ValueExpression();            
            ve.setCriteriaAttribute("value");
            ve.setOperationCode(UnaryOperationCode.LIKE_IGNORE_CASE);        
            ve.getValues().add(${domainVariableName}Name);             
            expression.getValueExpressions().add(ve);
        }
        
        if (${domainVariableName}Reference!=null && !"".equals(${domainVariableName}Reference)) {
            ValueExpression ve = new ValueExpression();            
            ve.setCriteriaAttribute("key");
            ve.setOperationCode(UnaryOperationCode.LIKE_IGNORE_CASE);        
            ve.getValues().add(${domainVariableName}Reference);             
            expression.getValueExpressions().add(ve);
        }
        
        ${domainVariableName}Table.getRequest().getCriterias().add(criteria);
        ${domainVariableName}Table.setPageNumber(1);
#if($runTimeErrorSolved)
        ${domainVariableName}Table.refreshPagination();
#end    
#end        
    }

    public void displayAll(ActionEvent actionEvent) {
        BindingContext bindingCtx = BindingContext.getCurrent();
        BindingContainer bindings = bindingCtx.getCurrentBindingsEntry();
        System.out.println(">> actionEvent: "+actionEvent);
        Map mapParam = new HashMap();
        mapParam.put("${domainVariableName}", this.search$beanVOADFFacesVariable); //the variable name of the operation signature has to be passed
        OperationBinding ob = bindings.getOperationBinding("list$domainClassName");
        ob.getParamsMap().putAll(mapParam);
        ob.execute();
        $beanVOADFFacesQueryResponseClass result = ($beanVOADFFacesQueryResponseClass)ob.getResult();
        //displayResults=true;
        ${domainVariableName}Table.getRequest().getCriterias().clear();
        ${domainVariableName}Table.setPageNumber(1);
#if($runTimeErrorSolved)
        ${domainVariableName}Table.refreshPagination();
#end
    }

    public void handleLaunchEdit${entityADFClass}Dlg(LaunchEvent launchEvent) {
        RichCommandLink comp = (RichCommandLink)launchEvent.getComponent();
##works for one pk only
        String ${entityADFVariable}Reference = (String) comp.getAttributes().get("${entityADFVariable}Reference");
        //Pass the current value of the field into the dialog
        //      Object usr = username;
        launchEvent.getDialogParameters().put("${entityADFVariable}Reference", ${entityADFVariable}Reference);
    }

    public void set${domainClassName}Name(String ${domainVariableName}Name) {
        this.${domainVariableName}Name = ${domainVariableName}Name;
    }

    public void setPanelTab(RichPanelTabbed panelTab) {
        this.panelTab = panelTab;
    }

    public RichPanelTabbed getPanelTab() {
        return panelTab;
    }

    public void create${domainClassName}(ActionEvent actionEvent) {
        BindingContext bindingCtx = BindingContext.getCurrent();
        BindingContainer bindings = bindingCtx.getCurrentBindingsEntry();
        Map mapParam = new HashMap();
        mapParam.put("${domainVariableName}", this.${beanVOADFFacesVariable}); //the variable name of the operation signature has to be passed
        OperationBinding ob = bindings.getOperationBinding("createOrUpdate${domainClassName}");
        ob.getParamsMap().putAll(mapParam);
        ob.execute();
        ${beanVOADFFacesVariable} = new ${beanVOADFFacesClass}();
        List<UIComponent> childUIComponent = this.panelTab.getChildren();
        
        if (childUIComponent != null && childUIComponent.size() > 0) {
        
            for (int i = 0; i < childUIComponent.size(); i++) {
                if (childUIComponent.get(i) instanceof RichShowDetailItem) {
                    if (i == 0) {
                        ((RichShowDetailItem)childUIComponent.get(i)).setDisclosed(true);
                    } 
                    else {
                        ((RichShowDetailItem)childUIComponent.get(i)).setDisclosed(false);
                   }
                }
            }
        }
        
    }
	
    public void setDisplayResults(Boolean displayResults) {
        this.displayResults = displayResults;
    }

    public Boolean getDisplayResults() {
        return displayResults;
    }

    public void setDisplaySearch(Boolean displaySearch) {
        this.displaySearch = displaySearch;
    }

    public Boolean getDisplaySearch() {
        return displaySearch;
    }
}
