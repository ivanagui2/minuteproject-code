#exposeSeparator()
#putImportQuerySDDBean()
#putImportSDDInputBean()
#putImportQuerySDDBean()
#exposeQuerySpecific()
#set($table=$inputBean)
#asUML($table)
#set ($inputClass = $commonUtils.getTemplateClassName($inputBean, $model, $templateSDDInputBean))
#set ($tableVariableName = $commonUtils.getJavaNameVariableFirstLetter($inputClass))
#set($tableDB = $inputBean)
#set ($entityControllerJSFClass = $commonUtils.getTemplateClassName($tableDB, $model, $templateEntityControllerJSF))
#set ($entityControllerJSFVariable = $commonUtils.getJavaNameVariableFirstLetter($entityControllerJSFClass))
#exposeVariableEntitySpecific()
#addedAreas()
<!DOCTYPE html>
<html>
<head>
<title></title>

#putKendoUIJSImport()

</head>

<body>
    
<div id="${tableVariableName}">
   <div>
   		<div id="form-${tableVariableName}" >
        	<h3>${tableVariableName}</h3>
            <ul>
#*            
#foreach($column in $inputBean.columns)
#putColumnParams()
#columnJavaNaming()
#putKendoHtmlColumnSnippet($tableVariableName $tableVariableName)
#end
*#
<!-- pk -->
#foreach($column in ${table.primaryKeyColumns})
#putColumnParams()
#columnJavaNaming()
#if (!$isMany2Many && $isPkUserProvided)
#putKendoHtmlColumnSnippet($tableVariableName $tableVariableName)
#end
#end
#foreach ($columnGroup in $tableUtils.extractFieldGroup(${table.attributes}, $table))
#foreach ($column in $columnGroup)
#putColumnParams()
#columnJavaNaming()
#putKendoHtmlColumnSnippet($tableVariableName $tableVariableName)
#end
#end
<!-- reference -->
#foreach ($reference in $tableUtils.getParentOrderByReferenceData($table))
#putReferenceParams2()
#set ($column=$localColumn)
#putColumnParams()
#columnJavaNaming()
#putKendoHtmlColumnSnippet($tableVariableName $tableVariableName)
#end
            </ul>

            <!-- button action -->
            <p>
                <button id="action" class="k-button" data-bind="click: searchSdd">Execute</button>
            </p>
        </div>
    </div>
</div>

<div id="ssd-output-grid"/>

<div id="details" />

<!-- kendo js scripts -->
<script>
    $(document).ready(function () {

	  //fields
#foreach($column in $inputBean.columns)
#if (!$column.hasBeenDuplicated())
#putColumnParams()
#columnJavaNaming()
#putKendoJsColumnSnippet($tableVariableName $tableVariableName)
#end
#end

## inspired by http://demos.telerik.com/kendo-ui/grid/custom-command
       wnd = $("#details").kendoWindow({
           title: "$className Details",
           modal: true,
           visible: false,
           resizable: false,
           width: 300
           }).data("kendoWindow");

        detailsTemplate = kendo.template($("#template-detail").html());
#foreach ($column in $table.columns)
#if ($columnUtils.hasCheckConstraint($column))
#putColumnParamNaming()
#set($checkConstraints= $columnUtils.getCheckConstraintValues($column))
#set($size= $checkConstraints.size())
		var ${columnVar}List = [
#foreach ($property in $checkConstraints)
			{
				name : "$property.name",
				value : "$property.name"
			}
#if ($velocityCount!=$size)
            ,#end 
#end
		]
#end
#end
        var viewModel = kendo.observable({
#foreach ($column in $table.columns)
#if ($columnUtils.hasCheckConstraint($column))
#putColumnParamNaming()
			${columnVar}List : ${columnVar}List,
#end
#end
            searchSdd: function () {
                isQuestionMarkDone = false;
        		var query = "";
#set($cpt=0)
#foreach($column in $inputBean.columns)
#if (!$column.hasBeenDuplicated())
#set($cpt=$cpt+1)
#putColumnParamNaming()
        		var $columnVar = this.get("$columnVar");
#if($columnUtils.isTime($column))
                ${columnVar}Date = new Date(${columnVar});
				${columnVar}DateSt = kendo.toString(${columnVar}Date, "yyyy-MM-dd");
#set($columnValue="${columnVar}DateSt")
#else
#set($columnValue=$columnVar)
#end
##        		query = query + "$columnVar="+$columnValue;
                if ($columnVar!=undefined && !$columnVar=='') {
                    if (!isQuestionMarkDone) {
                        isQuestionMarkDone = true;
                        query = "?"+"$columnVar="+$columnValue;
                    } else {
                        query = query+"&"+"$columnVar="+$columnValue;
                    }
                }
#end
#end
				var dataSourceUrl = "/data/sdd/${tableClassName}In"+query;

                $("#ssd-output-grid").kendoGrid({
                    dataSource: {
                        transport: {
                            read: {
                                url: dataSourceUrl,
                                dataType: "json",
                                contentType: "application/json; charset=utf-8",
                                cache: false
                            }
                        }
                        ,
                        schema: {
                            data: "$sddOutputBeanClass"
                        }
                    },
                    change: function () {
						var rowId = this.select().data("uid");
						var item = this.dataSource.getByUid(rowId);
						kendo.ui.progress($("#ssd-output-grid"), true);
##						select4Info(item);
					},
                    resizable: true,
                    sortable: {
                        mode: "single",
                        allowUnsort: false
                    },
                    pageable: {
                        buttonCount: 5
                    },
					columns: [
#foreach($column in $outputBean.columns)
#putColumnParamNaming()
					{
						//TODO hide
	                	field: "$columnVar",
	                	title: "$columnVar",
#updatedColumnAttributeAreas()
$!updatedAreaBegin
#if($isUpdated)
$updatedAreaSnippet
#else
//						width : toset,
#end
$!updatedAreaEnd
						hidden : false
	            	}
#if ($query.actions.size()>0 || $velocityCount!=$outputBean.columns.size())
                	,#end 
#end
#foreach ($action in $query.actions)
					{ command: { text: "$action.name", click: showDetails }, title: " ", width: "180px" }
#if ($velocityCount!=$query.actions.size())
                	,#end 
#end
	            	],
                    height: 500,
                    scrollable: true,
                    selectable: true

                });

            }

        });

#foreach ($field in $query.queryFields)
// is hidden $field.name $field.isHidden() $field.isKey() $field.value
#end
        kendo.bind($("#form-${tableVariableName}"), viewModel);

    });

#foreach ($action in $query.actions)
	function $action.name (e) {
		e.preventDefault();
		var rowId = $("#ssd-output-grid").select().data("uid");
		var item = $("#ssd-output-grid").dataSource.getByUid(rowId);
		kendo.ui.progress($("#ssd-output-grid"), true);
#exposeEntityUpdatedAreas("${action.name}-action")
$!updatedAreaBegin
#if($isUpdated)
$updatedAreaSnippet
#else
//		todo
#foreach ($column in $outputBean.columns)
//$column.isHidden()
#if ($column.isHidden())
#putColumnParamNaming()
		var $columnVar = this.get("$columnVar");
#end
#end
//		todo get url from query
//			append parameters
//		if (target == single node 	=> popup)
//		if (target == list 			=> add list)
#end
$!updatedAreaEnd
	}

#end
    function showDetails(e) {
       e.preventDefault();

       var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
       wnd.content(detailsTemplate(dataItem));
       wnd.center().open();
   }

</script>

<script type="text/x-kendo-template" id="template-detail">
   <div id="details-container">
#foreach($column in $outputBean.columns)
#putColumnParamNaming()
       <h2>$columnVar : #= $columnVar # </h2>
#end
   </div>
</script>

</body>
</html>
