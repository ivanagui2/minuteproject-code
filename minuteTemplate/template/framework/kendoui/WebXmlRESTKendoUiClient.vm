#generatorSpecific()
#exposeVariableModelSpecific()
#exposeWebSecurityProperties()
#exposeMaven()
#exposeBackendTechnology()
##exposeRESTModelSpecific()
#exposeWebXmlSpecific()
#putTargetServerDefinition()
#exposeKendoUIGeneratorBeanSpecific()
#if ($webXmlVersion=="2.5" || $isWeblogicTargetServer)
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	version="2.5"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
#elseif ($webXmlVersion=="3.0")
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	version="3.0"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
#end
	<display-name>$generatorBean.name REST Application</display-name>
    <servlet>
        <servlet-name>$generatorBean.name Jersey Web Application</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>

        <init-param>
          <param-name>jersey.config.server.provider.packages</param-name>
          <param-value>
#foreach ($model in $configuration.allModels)          
#exposeRESTModelSpecific()
          $modelResourceJerseyImport;
#end        
          com.wordnik.swagger.jersey.listing</param-value>
        </init-param>
		<init-param>
			<param-name>jersey.config.server.provider.classnames</param-name>
			<param-value>org.glassfish.jersey.media.multipart.MultiPartFeature</param-value>
		</init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>$generatorBean.name Jersey Web Application</servlet-name>
        <url-pattern>/data/*</url-pattern>
    </servlet-mapping>

	<servlet>
		<servlet-name>DefaultJaxrsConfig</servlet-name>
		<servlet-class>com.wordnik.swagger.jaxrs.config.DefaultJaxrsConfig</servlet-class>
		<init-param>
			<param-name>api.version</param-name>
			<param-value>1.0.0</param-value>
		</init-param>
		<init-param>
			<param-name>swagger.api.basepath</param-name>
			<param-value>/data</param-value>
		</init-param>
##		<init-param>
##			<param-name>swagger.filter</param-name>
##			<param-value>com.wordnik.swagger.sample.util.ApiAuthorizationFilterImpl</param-value>
##		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>
	
#if($hasAtmosphereServlet)
	<servlet>
		<description>AtmosphereServlet</description>
		<servlet-name>AtmosphereServlet</servlet-name>
		<servlet-class>org.atmosphere.cpr.AtmosphereServlet</servlet-class>
		<!-- If you want to use Servlet 3.0 -->
		<async-supported>true</async-supported>
		<!-- List of init-param -->
	</servlet>
	<servlet-mapping>
		<servlet-name>AtmosphereServlet</servlet-name>
		<!-- Any mapping -->
		<url-pattern>/atmosphere/*</url-pattern>
	</servlet-mapping>
#end
#*
	<filter>
		<filter-name>ApiOriginFilter</filter-name>
		<filter-class>com.wordnik.swagger.sample.util.ApiOriginFilter</filter-class>
	</filter>
	<servlet>
		<servlet-name>Bootstrap</servlet-name>
		<servlet-class>com.wordnik.swagger.sample.Bootstrap</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>
	<filter-mapping>
		<filter-name>ApiOriginFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
*#
#set($filterName=$template.getPropertyValue("filter-name",""))
#set($filterClass=$template.getPropertyValue("filter-class",""))
#set($filterUrlPattern=$template.getPropertyValue("filter-url-pattern",""))
#if ($filterName!="")
	<filter>
		<filter-name>$filterName</filter-name>
		<filter-class>$filterClass</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>$filterName</filter-name>
		<url-pattern>$filterUrlPattern</url-pattern>
	</filter-mapping>
#end
#if($isSpringBackend)
	<!-- The context params that read by ContextLoaderListener  -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/application-context.xml
		</param-value>
	</context-param>
	
	<!-- This listener will load other application context file in addition to springweb-servlet.xml -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
#end

  <!-- Define a Security Constraint on this Application -->
#if ($securityAuthenticationType!="none")
	<security-constraint>
		<web-resource-collection>
			<web-resource-name>${package.name}</web-resource-name>
			<url-pattern>/*</url-pattern>
			<http-method>GET</http-method>
			<http-method>POST</http-method>
		</web-resource-collection>
       <auth-constraint>
           <role-name>$mpUserRole</role-name>
       </auth-constraint>
   </security-constraint>
 <!-- $securityAuthenticationType -->
#foreach ($model in $configuration.models())
#foreach ($package in $model.getStatementModel().getSddPackage().getQueryPackages())
## hasMenuAccess : $package.securityColor.hasMenuAccess -->
## hasMenuAccess : $package.securityColor.roles -->
#if ($package.securityColor.hasRoles())
	<security-constraint>
		<web-resource-collection>
			<web-resource-name>${package.name}</web-resource-name>
			<url-pattern>/sdd/${package.name}</url-pattern>
			<http-method>GET</http-method>
			<http-method>POST</http-method>
		</web-resource-collection>
       <auth-constraint>
           <role-name>$package.securityColor.roles</role-name>
       </auth-constraint>
   </security-constraint>
#end
#end
#end

<!-- Define the Login Configuration for this Application -->
#if ($securityAuthenticationType=="basic")   
    <login-config>
	   <auth-method>BASIC</auth-method>
	   <realm-name>$applicationRealm</realm-name>
	</login-config>

#end
#if ($securityAuthenticationType=="form") 
    <login-config>
        <auth-method>FORM</auth-method>
		    <realm-name>$applicationRealm</realm-name>
        <form-login-config>
           <form-login-page>/$loginPath</form-login-page>
           <form-error-page>/$loginErrorPath</form-error-page>
        </form-login-config>
    </login-config>
	
#end
	<!-- Security roles referenced by this web application -->
	<security-role>
	  <description>
	    The role that is required to log in to the Manager Application
	  </description>
	  <role-name>$mpUserRole</role-name>
	</security-role>
#foreach ($role in $configuration.distinctRoles())
	<security-role>
	  <description>
	    The role that is required to log in to the Manager Application
	  </description>
	  <role-name>$role</role-name>
	</security-role>
#end
#end

    <welcome-file-list>
        <welcome-file>$kendoUiMenuPath</welcome-file>
    </welcome-file-list>

</web-app>
