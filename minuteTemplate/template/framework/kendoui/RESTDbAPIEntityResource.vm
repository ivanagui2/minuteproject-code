#exposeBackendTechnology()
#putJPA2TemplateDefinition()
#if($isSpringBackend)
#exposeSpringDomainObjectSpecific()
#elseif($isEJBBackend)
#exposeEJBDomainObjectSpecific()
#end
#exposeSpringServiceDomainObject()
#set ($EJBDaoImplClass = $SpringServiceInterfaceClass)
#set ($EJBDaoImplVariable = $SpringServiceInterfaceVariable)
#exposeSpringModelSpecific()

package $packageName;

$!updatedAreaImport
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.ResourceBundle;

import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.QueryParam;
import javax.ws.rs.FormParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;

import net.sf.minuteProject.model.data.criteria.EntityCriteria;
import net.sf.minuteProject.model.data.criteria.EntitySort;
import net.sf.minuteProject.model.data.criteria.QueryData;
import net.sf.minuteProject.model.data.criteria.constant.EntityMatchType;
import net.sf.minuteProject.model.data.criteria.constant.OperandType;
import net.sf.minuteProject.model.data.criteria.constant.QuerySortOrder;

import $BslaDaoInterfaceImport;

#if($isSpringBackend)
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
#elseif($isEJBBackend)
import javax.enterprise.context.RequestScoped;
import javax.enterprise.inject.Default;
import javax.inject.Inject;
import javax.inject.Named;
import javax.ejb.EJB;

import $EJBDaoImplImport;

#end
import $importDomainObjectUML;
import net.sf.minuteProject.model.service.GenericService;
#exposeJPA2Import()
/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: REST entity controller ${className} </p>
 *
 */
@Path("/entity/${tableClassName}")
@Produces(MediaType.APPLICATION_JSON)
public class $className {

#if ($isSpringBackend)
    @Autowired
    @Qualifier("$BslaDaoInterfaceVariable")	
#elseif($isEJBBackend)
	@EJB// (name="$BslaDaoInterfaceVariable")	
#end
	${BslaDaoInterfaceClass} $BslaDaoInterfaceVariable;

    @GET
    @Path("/find")
    @Produces(MediaType.APPLICATION_JSON)
    public QueryData<$tableClassName> find(@QueryParam("sortOrder") String sortOrder,
                                    @QueryParam("sortField") String sortField,
                                    @QueryParam("first") int first,
                                    @QueryParam("pageSize") int pageSize
                    ) throws Exception {
        QuerySortOrder order = QuerySortOrder.ASC;
        /*
        if (sortOrder == SortOrder.DESCENDING) {
            order = QuerySortOrder.DESC;
        }
        */
        $tableClassName esMask = new $tableClassName();
        esMask.mask(sortField);
        EntitySort<$tableClassName> es = new EntitySort<$tableClassName>(esMask, order);

        $tableClassName ecMask = new $tableClassName();
        //ecMask.mask(filters);
        EntityCriteria<$tableClassName> ec = new EntityCriteria<$tableClassName>(ecMask, EntityMatchType.ALL, OperandType.CONTAINS, false);

        QueryData<$tableClassName> data = new QueryData<$tableClassName>(first, pageSize, es, ec);
        ${BslaDaoInterfaceVariable}.find(data);
        List<$tableClassName> list = data.getResult();
        List<$tableClassName> listDetached = new ArrayList<$tableClassName>();
        for ($tableClassName element : list) {
        	listDetached.add(element.clone());
        }
        data.setResult(listDetached);
        int count = data.getTotalResultCount().intValue();
        return data;
    }

$!updatedAreaImplementation
}