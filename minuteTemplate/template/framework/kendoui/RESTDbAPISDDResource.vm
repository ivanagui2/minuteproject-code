#exposeBackendTechnology()
#exposeDbApiRestQuerySpecific()
#exposeSDDSpring()
#exposeRESTSDDURLServer()
#putImportQuerySDDBean()
#addedAreas()
#set ($size = $inputBean.columns.size())
package $packageName;

$!updatedAreaImport

import com.wordnik.swagger.annotations.*;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.io.*;
import java.sql.*;

import java.io.IOException;
import javax.servlet.http.*;
import java.util.List;
import java.util.ArrayList;

#if($isSpringBackend)
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
#elseif($isEJBBackend)
import javax.enterprise.context.RequestScoped;
import javax.enterprise.inject.Default;
import javax.inject.Inject;
import javax.inject.Named;
import javax.ejb.EJB;

import $EJBDaoImplImport;

#end

import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.QueryParam;
import javax.ws.rs.FormParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import javax.xml.bind.JAXBElement;

import $sddOutputBeanCollectionImport;
#if($isNotVoidInput)
import $sddInputBeanImport;
#end
import $sddDaoInterfaceImport;

/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: class for ${className} service </p>
 *
 */
@Path("/sdd/${sddInputBeanClass}")
@Produces(MediaType.APPLICATION_JSON)
@Api(value="/sdd/${sddInputBeanClass}", description = "operation about ${sddInputBeanClass}")
public class ${className} {

#if ($isSpringBackend)
    @Autowired
    @Qualifier("$sddDaoInterfaceVariable")	
#elseif($isEJBBackend)
	@EJB ## (name="$BslaDaoInterfaceVariable")	
#end
    ${sddDaoInterfaceClass} $sddDaoInterfaceVariable;

#exposeQueryUpdatedAreas("SDD_EXECUTE_GET")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    @GET
    public $sddOutputBeanCollectionClass execute (
#foreach($column in $inputBean.columns)
#if (!$column.hasBeenDuplicated())
#putColumnParamNaming()
#if($columnUtils.isTime($column))
#set($columnType=$dateParamImport)
#end
        @QueryParam ("$columnVar") $columnType $columnVar #if($velocityCount!=$size),
#end
#end
#end
    ) {
#if($isNotVoidInput)
		$sddInputBeanClass $sddInputBeanVariable = new $sddInputBeanClass ();
#foreach($column in $inputBean.columns)
#if (!$column.hasBeenDuplicated())
#putColumnParamNaming()
#if($columnUtils.isTime($column))
#set($columnVar="$columnVar"+".getDate()")
#end
		${sddInputBeanVariable}.set$columnClass ($columnVar);
#end
#end
        return ${sddDaoInterfaceVariable}.execute(${sddInputBeanVariable});
#else
        return ${sddDaoInterfaceVariable}.execute();
#end
    }
#end
$!updatedAreaEnd

$!updatedAreaImplementation

}