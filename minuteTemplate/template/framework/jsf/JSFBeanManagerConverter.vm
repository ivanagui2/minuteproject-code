#exposeJSFEntitySpecific()
#exposeJSFModelSpecific()
#if($isSpringBackend)
#exposeSpringDomainObjectSpecific()
#exposeSpringServiceDomainObject()
#set ($EJBDaoImplClass = $SpringServiceInterfaceClass)
#set ($EJBDaoImplVariable = $SpringServiceInterfaceVariable)
#exposeSpringModelSpecific()
#elseif($isEJBBackend)
#exposeEJBDomainObjectSpecific()
#end
package $packageName;

$!updatedAreaImport

import javax.faces.bean.ManagedBean;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.ConverterException;
import javax.faces.convert.FacesConverter;
import javax.inject.Inject;


#if($isSpringBackend)
import org.springframework.stereotype.*;

import $lookupBeanImport;
import $beanSpringModelServiceImport;
import $SpringServiceInterfaceImport;
import $modelJSFUtilsImport;
import $modelSemanticReferenceUtilsJSFImport;

#elseif($isEJBBackend)
import javax.enterprise.context.RequestScoped;
import javax.faces.bean.ViewScoped;
import javax.enterprise.inject.Default;
import javax.inject.Inject;
import javax.inject.Named;

import $EJBDaoImplImport;

#end
import $importDomainObjectUML;
#exposeJPA2Import()
/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: JSF converter ${className} </p>
 *
 */
@FacesConverter(value="${entityConverterJSFVariable}")
#if($isSpringBackend)
@Component ("${entityConverterJSFVariable}")
#elseif($isEJBBackend)
#end
public class ${className} implements Converter {

##	@Inject 
##    private $EJBDaoImplClass $EJBDaoImplVariable;

    @Override
    public Object getAsObject(FacesContext context, UIComponent ui, String value) {
        $tableClassName $tableVariableName = new $tableClassName();
#if ($jpa2Utils.isEmbedded($table))
	//not ideal since not all the column are copied
#*     
@EmbeddedId
    private ${embeddedIdClass} $embeddedIdVariable;
#foreach($column in ${table.primaryKeyColumns})
#putColumnParamNaming()
#if(!$isForeignKey)
    @Column(name="$column.name" #if($isLengthPrecisionColumn), length=$column.size#end #if($column.isRequired()), nullable=false#else, nullable=true#end #if($isColumnUnique), unique=true#else, unique=false#end , insertable=false, updatable=false)
    private $columnType ${columnVar}_;
#end
*#
#if($columnUtils.isString($primaryKeyFirstColumn))
	    ${tableVariableName}.set${primaryKeyJavaNameClass}_(value);
#else
	    ${tableVariableName}.set${primaryKeyJavaNameClass}_(${primaryKeyFullType}.valueOf(value));
#end
#else
#if($columnUtils.isString($primaryKeyFirstColumn))
	    ${tableVariableName}.set${primaryKeyJavaNameClass}(value);
#else
	    ${tableVariableName}.set${primaryKeyJavaNameClass}(${primaryKeyFullType}.valueOf(value));
#end
#end
    	return $tableVariableName;
    }

	@Override
    public String getAsString(FacesContext context, UIComponent ui, Object object) {
		return (($tableClassName) object).get${primaryKeyJavaNameClass}().toString();
##		return object.toString();
    }
	
$!updatedAreaImplementation
}