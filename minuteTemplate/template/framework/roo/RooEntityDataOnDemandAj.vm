#putRooEntityParams()
#exposeRooTestSpecific()
package ${packageName};

import java.util.List;
import java.util.Random;
import $importDomainObject;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

privileged aspect $className {
    
    declare @type: AddressDataOnDemand: @Component;
    
    private Random AddressDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Address> AddressDataOnDemand.data;
    
    public Address AddressDataOnDemand.getNewTransientAddress(int index) {
        net.sf.mp.demo.roo.petshop.domain.Address obj = new net.sf.mp.demo.roo.petshop.domain.Address();
        String city = "city_" + index;
        if (city.length() > 55) {
            city = city.substring(0, 55);
        }
        obj.setCity(city);
        obj.setLatitude(new Integer(index).doubleValue());
        obj.setLongitude(new Integer(index).doubleValue());
        String state_ = "state__" + index;
        if (state_.length() > 25) {
            state_ = state_.substring(0, 25);
        }
        obj.setState_(state_);
        String street1 = "street1_" + index;
        if (street1.length() > 55) {
            street1 = street1.substring(0, 55);
        }
        obj.setStreet1(street1);
        String street2 = "street2_" + index;
        if (street2.length() > 55) {
            street2 = street2.substring(0, 55);
        }
        obj.setStreet2(street2);
        String zip = "zip_" + index;
        if (zip.length() > 5) {
            zip = zip.substring(0, 5);
        }
        obj.setZip(zip);
        return obj;
    }
    
    public Address AddressDataOnDemand.getSpecificAddress(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Address obj = data.get(index);
        return Address.findAddress(obj.getAddressid());
    }
    
    public Address AddressDataOnDemand.getRandomAddress() {
        init();
        Address obj = data.get(rnd.nextInt(data.size()));
        return Address.findAddress(obj.getAddressid());
    }
    
    public boolean AddressDataOnDemand.modifyAddress(Address obj) {
        return false;
    }
    
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void AddressDataOnDemand.init() {
        if (data != null && !data.isEmpty()) {
            return;
        }
        
        data = net.sf.mp.demo.roo.petshop.domain.Address.findAddressEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Address' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<net.sf.mp.demo.roo.petshop.domain.Address>();
        for (int i = 0; i < 10; i++) {
            net.sf.mp.demo.roo.petshop.domain.Address obj = getNewTransientAddress(i);
            obj.persist();
            data.add(obj);
        }
    }
    
}
