#exposeVariableEntitySpecific()
#exposeEnvironmentParams()
#exposeOXDomainSpecific()
#putImportParamsUML()
#set($defaultViewExt="DEFAULT_VIEW")
##set($attributes=$table.attributes)
#set($attributecount=$attributes.length)
package $packageName;

import java.sql.*;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;

import javax.persistence.*;
import org.openxava.annotations.*;

#foreach ($reference in $table.children)
#set ($thisTable = $reference.foreignTable)
#exposeImportParamsUML($reference.foreignTable)
#if(!$thisTable.isManyToMany())
import $importDomainObjectUML;
#end
#end
#foreach ($reference in $table.parents)
#exposeImportParamsUML($reference.foreignTable)
#set ($thisTable = $reference.foreignTable)
#if(!$thisTable.isManyToMany())
import $importDomainObjectUML;
#end
#end
#foreach ($reference in $childReferences)
#putReferenceParams()
#if($linktableDB.isManyToMany())
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
#exposeImportParamsUML($targetTable)
import $importDomainObjectUML;
#end
#end
#end

/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: Domain Object describing a ${className} entity</p>
 *
 */
@Entity (name="${className}")
@Table (name="${table.name}")
@Views({
	@View(
		name="base",
		members=
        "" 
##foreach ($column in ${table.attributes})
##putColumnParams()
##columnJavaNaming()
##        + " $columnVar ;" 	
##end	
#foreach ($columnGroup in $tableUtils.extractFieldGroup(${table.attributes}, $table))
#foreach ($column in $columnGroup)
#putColumnParams()
#columnJavaNaming()
        + "$columnVar #if ($velocityCount!=$columnGroup.size()),#else ; #end"
#end
#end
#foreach ($reference in $tableUtils.getParentOrderByReferenceData($table))##$table.parents)
#putReferenceParams2()
	    + "${localColumnVariable};"  
#end	
		),
	@View(
		name="Create", 
		extendsView="base"
	),
	@View(
		name="Update", 
		extendsView="base",
#writeViewChildrenMember()
	),
	@View(extendsView="base",
#writeViewChildrenMember()
	),
    @View(name="${domainVariableName}${defaultViewExt}", 
	   members=
          "#foreach ($column in ${table.primaryKeyColumns}) #putColumnParams()$columnVar ;#end" 	
##foreach ($column in ${table.attributes})
##if (!$column.isLob())
##putColumnParams()
##columnJavaNaming()
##        + " $columnVar ;" 
##end
##end
#foreach ($columnGroup in $tableUtils.extractFieldGroup($tableUtils.getDisplayableAttributes($table), $table))
#foreach ($column in $columnGroup)
#putColumnParams()
#columnJavaNaming()
        + "$columnVar #if ($velocityCount!=$columnGroup.size()),#else ; #end"
#end
#end
#exposeViewParentSemanticRef()
#exposeViewParentSemanticRefProperty()	
	)
})

@Tabs({
@Tab(
#exposeTabAll()
#if ($hasTabAll)
#exposeTabProperties()
#else
properties=""
#end
)
#exposeTabSimple()
#if($hasTabSimple),
@Tab(
name = "${className}Tab",
#exposeTabSimple()
#exposeTabProperties()
)
#end
,
@Tab(
name = "${className}TabWithRef",
#exposeTabWithRef()
#if ($hasTabWithRef)
#exposeTabProperties()
#else
properties=""
#end
)
})

public class ${className} {

#foreach($column in ${table.primaryKeyColumns})
#putColumnParams()
#columnJavaNaming()
#if (!$isMany2Many)
#if (!$isPkUserProvided)
##    @Column(name="$column.name" #if($isLengthPrecisionColumn),length=$column.size#end)
#if ($databaseUtils.isPrimaryKeyPolicySequence($table))
#set ($sequenceName = $databaseUtils.provideSequence($table))
    @SequenceGenerator(name = "${table.name}SEQ", sequenceName ="$sequenceName", allocationSize=1 )
#end
#end
    #if (!$isPkUserProvided)@Hidden #end@Id @Column(name="$column.name" #if($isLengthPrecisionColumn),length=$column.size#end)
#if (!$isMany2Many)
#if (!$isPkUserProvided)
#if ($databaseUtils.isPrimaryKeyPolicySequence($table))
#set ($sequenceName = $databaseUtils.provideSequence($table))
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator="${table.name}SEQ") 
#elseif ($databaseUtils.isPrimaryKeyPolicyIncrement($table))
    @GeneratedValue(strategy = GenerationType.AUTO)
#end
#end
#end
#end
    private $columnType $columnVar; ##// pk not fk

#end

#foreach ($column in ${table.attributes})
#putColumnParams()
#columnJavaNaming()
#if ($isView)
    @Column(name="$column.name",  #if($isLengthPrecisionColumn)length=$column.size,#end #if($column.isRequired())nullable=false#else nullable=true#end, #if($isColumnUnique)unique=true,#else unique=false,#end insertable=false, updatable=false)
#else
    @Column(name="$column.name",  #if($isLengthPrecisionColumn)length=$column.size,#end #if($column.isRequired())nullable=false#else nullable=true#end, #if($isColumnUnique)unique=true#else unique=false#end)
#end
#if ($isMandatory)
    @Required
#end
#foreach ($property in $column.getPropertiesArray())
#if($property.tag=="checkconstraint")
    @Editor(forViews="Create,Update,DEFAULT,${domainVariableName}${defaultViewExt}", value="${className}${columnClass}ComboEditor")
#end
#end
#if ($column.isLob())
    @Lob
    @Editor (forViews="Create,Update,DEFAULT,${domainVariableName}${defaultViewExt}", value="${className}${columnClass}LobEditor")
#exposeLobProperties()
#if ($convertClobToString=="true")
#set($columnType="String")
#end
#end
#if ($columnUtils.hasStereotype($column))
    @Stereotype ("$column.stereotype.stereotype")
#end
    private $columnType $columnVar; 
#end

#foreach ($reference in $table.parents)
#putReferenceParams2()
    @ManyToOne (fetch=FetchType.LAZY)
#if ($isView)
    @JoinColumn(name="$localColumnName", #if($localColumn.isRequired())nullable=false#else nullable=true#end, #if($isColumnUnique)unique=true,#else unique=false,#end insertable=false, updatable=false)
#else
#if(!$isMany2Many)
#OxJPAFKisPK()
    @JoinColumn(name="$localColumnName", #if($localColumn.isRequired())nullable=false#else nullable=true#end, #if($isColumnUnique)unique=true,#else unique=false#end $insertableUpdatable )
#else
    @JoinColumn(name="$localColumnName", #if($localColumn.isRequired())nullable=false#else nullable=true#end, #if($isColumnUnique)unique=true,#else unique=false,#end insertable=false, updatable=false)
#end
#end  
#if ($isMandatory && !$table.isLinkEntity())
    @Required
#end 
    @ReferenceView ("${linkedTableVariable}${defaultViewExt}")  
#set($semanticReference = $linktableDB.semanticReference)
#if ($openXavaUtils.hasDescriptionList($linktableDB))    
    @DescriptionsList(
       descriptionProperties=
#foreach ($chunk in $semanticReference.semanticReferenceBeanPath)       
       "$chunk#if ($velocityCount!=$semanticReference.semanticReferenceBeanPath.size()), "+
#else "
#end 
#end       
    )
    @NoCreate
    @NoModify	
#end 
#if (!$authorizationUtils.hasSameColor($table, $linktableDB) && !$openXavaUtils.hasDescriptionList($linktableDB))    
    @NoCreate
    @NoModify	
#end
#exposeEnrichedPk($localColumn)
#if (!$isEnrichedPk)
#set($colVar = ${localColumnVariable})
#else
#set($colVar = ${linkedTableVariable})
#end
    private $linkedTableClass ${colVar}; 
    
#end

#foreach ($reference in $childReferences)
#putReferenceParams()
#if(!$linktableDB.isManyToMany())
#set ($importDomainObjectForeignTable = $bslaLibraryUtils.getDomainObjectUMLImport($model, $linktableDB, $template))
#set ($targetEntityClass="${importDomainObjectForeignTable}.class")
#exposeEnrichedPk(${reference.column})
#if (!$isEnrichedPk)
#set ($foreignColumnVar = $formatUtils.getJavaNameVariable($columnDB.name))
#else
#set ($foreignColumnVar = $domainVariableName)
#end
    @OneToMany (targetEntity=$targetEntityClass, fetch=FetchType.LAZY, mappedBy="$foreignColumnVar"#if (!$reference.column.isRequired() || $reference.table.isLinkEntity()), cascade=CascadeType.REMOVE#end)//, cascade=CascadeType.ALL)
    @JoinColumn (name="$columnDB.name", referencedColumnName="$pK")
    private Set <$linkclass> ${link}${columnclass}s = new HashSet();
   
#end
#end

#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
#exposeImportParamsUML($targetTable)
#set($targetColumn=$enrichmentUtils.getOtherColumn($linkedTableDB, $linkReference.localColumn))
    @ManyToMany
    @JoinTable(name="$linkedTableDBName", //$linkedTableDBName
        joinColumns=@JoinColumn(name="$targetColumn.name"), //$columnDB.name $targetColumn
        inverseJoinColumns=@JoinColumn(name="$linkReference.localColumnName") //$linkReference.localColumnName
    )
    private Set <$targetTableName> ${targetTableVariableName}Via${linkTableName}By${localColumnName}s = new HashSet();

#end

    /**
    * Default constructor
    */
    public ${className}() {
    }

##patch for hibernate
#if ($isMany2Many)
    public ${className} get${className} () {
    	return this;
    }

    public void set${className} (${className} ${variableName}) {
    	new ${className}(
#foreach ($column in ${table.columns})
#putColumnParams()
       ${variableName}.get_${columnVar}()#if ($velocityCount!=$table.columnCount),
#end
#end 		
		);
    }
#end    

#foreach($column in ${table.primaryKeyColumns})
#putColumnParams()
#columnJavaNaming()
##if(!$isForeignKey)
    public $columnType get$columnClass() {
        return $columnVar;
    }
	
    public void set$columnClass ($columnType $columnVar) {
        this.$columnVar =  $columnVar;
    }
    
##end
#end

#foreach ($column in ${table.attributes})
#putColumnParams()
#columnJavaNaming()
#if ($column.isLob())
#exposeLobProperties()
#if ($convertClobToString=="true")
#set($columnType="String")
#end
#end
    public $columnType get$columnClass() {
        return $columnVar;
    }
	
    public void set$columnClass ($columnType $columnVar) {
        this.$columnVar =  $columnVar;
    }
#end

###foreach ($reference in $table.parents)
###putReferenceParams2()
##    public $linkedTableClass get${linkedTableClass} () {  //get$linkedTableVariable
##    	return ${linkedTableVariable};//${localColumnVariable};
##    }
##	
##   public void set${linkedTableClass} ($linkedTableClass ${linkedTableVariable}) {
##    	this.${linkedTableVariable} = ${linkedTableVariable};//this.${localColumnVariable} = ${linkedTableVariable};
##    }
##    
##end
#foreach ($reference in $table.parents)
#putReferenceParams2()
#exposeEnrichedPk($localColumn)
#if (!$isEnrichedPk)
    public $linkedTableClass get$localColumnClass () {  //
    	return ${localColumnVariable};
    }
	
    public void set${localColumnClass} ($linkedTableClass ${localColumnVariable}) {
    	this.${localColumnVariable} = ${localColumnVariable};//this.${localColumnVariable} = ${linkedTableVariable};
    }
#else
    public $linkedTableClass get${linkedTableClass} () {  //get$linkedTableVariable
    	return ${linkedTableVariable};//${localColumnVariable};
    }
	
   public void set${linkedTableClass} ($linkedTableClass ${linkedTableVariable}) {
    	this.${linkedTableVariable} = ${linkedTableVariable};//this.${localColumnVariable} = ${linkedTableVariable};
    }
    
#end 
#end

#foreach ($reference in $childReferences)
#putReferenceParams()
#if(!$linktableDB.isManyToMany())
    public Set<$linkclass> get${linkclass}${columnclass}s() {
        if (${link}${columnclass}s == null){
            ${link}${columnclass}s = new HashSet();
        }
        return ${link}${columnclass}s;
    }

    public void set${linkclass}${columnclass}s (Set<$linkclass> ${link}${columnclass}s) {
        this.${link}${columnclass}s = ${link}${columnclass}s;
    }	
    
    public void add${linkclass}${columnclass} ($linkclass ${link}) {
    	    get${linkclass}${columnclass}s().add($link);
    }
    
##else
##foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
##exposeM2MSpecific() 
##    public Set<$targetTableName> get${targetTableName}Via${linkTableName}By${localColumnName}s() {
##        if (${targetTableVariableName}Via${linkTableName}By${localColumnName}s == null){
##            ${targetTableVariableName}Via${linkTableName}By${localColumnName}s = new HashSet();
##        }
##        return ${targetTableVariableName}Via${linkTableName}By${localColumnName}s;
##    }
##
##    public void set${targetTableName}Via${linkTableName}By${localColumnName}s (Set<$targetTableName> ${targetTableVariableName}Via${linkTableName}By${localColumnName}s) {
##        this.${targetTableVariableName}Via${linkTableName}By${localColumnName}s = ${targetTableVariableName}Via${linkTableName}By${localColumnName}s;
##    }	
##        
##end
#end    
#end
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
    public Set<$targetTableName> get${targetTableName}Via${linkTableName}By${localColumnName}s() {
        if (${targetTableVariableName}Via${linkTableName}By${localColumnName}s == null){
            ${targetTableVariableName}Via${linkTableName}By${localColumnName}s = new HashSet();
        }
        return ${targetTableVariableName}Via${linkTableName}By${localColumnName}s;
    }

    public void set${targetTableName}Via${linkTableName}By${localColumnName}s (Set<$targetTableName> ${targetTableVariableName}Via${linkTableName}By${localColumnName}s) {
        this.${targetTableVariableName}Via${linkTableName}By${localColumnName}s = ${targetTableVariableName}Via${linkTableName}By${localColumnName}s;
    }	

#end
}
