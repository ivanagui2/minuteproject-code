#exposeQuerySpecific()
##exposeSDDOX()
#putJPA2TemplateDefinition()
#putImportQuerySDDBean()
#addedAreas()
#exposeJPASpecifics()
#set ($table = $inputBean)
#exposeVariableEntitySpecific()
package $packageName;

$!updatedAreaImport

import org.openxava.jpa.*;
import org.openxava.model.*;
import org.openxava.util.*;
import org.openxava.validators.*;
import org.openxava.actions.*;
import java.util.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.hibernate.HibernateException;
import org.hibernate.Session;

import $sddOutputBeanCollectionImport;
import $sddOutputBeanImport;
#if($isNotVoidInput)
import $sddInputBeanImport;
#end

/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: SDD DAO Spring JPA implementation </p>
 *
 */
public class ${className} extends ViewBaseAction {

#set ($fullQuery = $queryUtils.getFullQueryQuestionMark($query))
    public static final String QUERY_NATIVE = "$fullQuery";

#exposeQueryUpdatedAreas("SDD_EXECUTE_GET")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    public $sddOutputBeanCollectionClass execute ($sddInputBeanClass $sddInputBeanVariable) {
        $sddOutputBeanCollectionClass $sddOutputBeanCollectionVariable = new $sddOutputBeanCollectionClass();
        List<$sddOutputBeanClass> list = executeJDBC ($sddInputBeanVariable);
        ${sddOutputBeanCollectionVariable}.set$sddOutputBeanClasses (list);
        return ${sddOutputBeanCollectionVariable};
    }
#end
$!updatedAreaEnd

#putSddJdbcLookup()

//if JPA2 implementation is hibernate
    @SuppressWarnings("deprecation")   
    public Connection getConnection() throws HibernateException {  
        Session session = getSession();  
        Connection connection = session.connection();  
        return connection;  
    } 
    
    private Session getSession() {  
        Session session = (Session) XPersistence.getManager().getDelegate();  
        return session;  
    }

	public void execute() throws Exception {
#exposeModelUpdatedAreas("execute")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else 
        //super.execute();
        //TODO
        Messages errors = 
            MapFacade.validate("$sddInputBeanClass", getView().getValues());
        if (errors.contains()) throw new ValidationException(errors);
        ${sddInputBeanClass} e = new ${sddInputBeanClass}();
#foreach ($column in ${table.attributes})
#putColumnParamNaming()
#if(!$isForeignKey && !$column.isHidden() && $column.isEditable())
#if(!$isPrimaryKey || $columnUtils.isNaturalPk($column))
#set($oxGetViewValue=$openXavaUtils.getViewValue($column, $useTemporal))
		e.set${columnClass}(${oxGetViewValue});
#end
#end
#end

        try {
            execute(e);
        } catch (Exception ex) {
            errors = new Messages();
            errors.add(ex.getMessage());
            throw new ValidationException(errors);
        }
        //TODO return list
        addInfo("call ${className} done!");
#end
$!updatedAreaEnd

	}

$!updatedAreaImplementation

}
