<!DOCTYPE root>
<generator-config>
	<configuration>
        <conventions>
            <target-convention type="enable-updatable-code-feature" />
            <target-convention type="disable-timestamp-comment-marker" />
        </conventions>
		<model name="winy" version="1.0" package-root="com">
			<description>
				<CDATA>
					This model illustrates:
					Reverse-engineering on tables, views
					SDD
					Add ad-hoc forms and actions
				</CDATA>
			</description>
			<data-model database-type="MYSQL">
				<driver name="mysql" version="5.1.16" groupId="mysql"
					artifactId="mysql-connector-java"></driver>
				<dataSource>
					<driverClassName>org.gjt.mm.mysql.Driver</driverClassName>
					<url>jdbc:mysql://localhost:3306/winy</url>
					<username>root</username>
					<password>mysql</password>
				</dataSource>
				<!-- for Oracle and DB2 please set the schema <schema> </schema> -->
				<primaryKeyPolicy oneGlobal="true">
					<primaryKeyPolicyPattern name="autoincrementPattern"></primaryKeyPolicyPattern>
				</primaryKeyPolicy>
			</data-model>
			<business-model>
				<business-package default="project">
					<condition type="package" startsWith="STAT" result="statistics"></condition>
					<condition type="package" startsWith="SEC" result="security"></condition>
					<condition type="package" startsWith="ADMIN" result="admin"></condition>
					<condition type="package" startsWith="RELEASE" result="release"></condition>
					<condition type="package" startsWith="BUS" result="business"></condition>
					<condition type="package" startsWith="VIEW_STAT" result="stats"></condition>
				</business-package>
				<enrichment>
					<conventions>
						<column-naming-convention type="apply-strip-column-name-suffix"
							pattern-to-strip="_ID" />
						<reference-naming-convention
							type="apply-referenced-alias-when-no-ambiguity" is-to-plurialize="true" />
						<ordering-convention field-pattern="DISPLAY_ORDER"
							field-pattern-type="endsWith" ordering="asc" />

						<!-- stereotype email, URL -->
						<stereotype-convention field-pattern="email"
							field-pattern-type="contains" stereotype="email" />
						<stereotype-convention field-pattern="url"
							field-pattern-type="contains" stereotype="url" />
						<stereotype-convention field-pattern="password"
							field-pattern-type="contains" stereotype="password" />
						<stereotype-convention field-pattern="notes"
							field-pattern-type="equals" stereotype="text-html" />

						<!-- primary key conv -->
						<column-naming-convention
							type="apply-fix-primary-key-column-name-when-no-ambiguity-and-not-natural"
							default-value="ID" />

						<!-- strip prefix -->
						<entity-naming-convention type="apply-strip-table-name-prefix"
							pattern-to-strip="ADMIN_,SEC_,BUS_" />
						<!-- semantic reference -->
						<semantic-entity-convention
							field-pattern="NAME,NUMBER" field-pattern-type="contains"
							max-number-of-fields="2" />

						<!-- trigger -->
						<property-convention scope="field" pattern="CREATION_DATE"
							tag="trigger-insert-with-current-date" type="start-with" />
						
						<view-primary-key-convention 
						            type="apply-default-primary-key-otherwise-first-one" 
						            default-primary-key-names="IDENTIFIER,ID" /> 
					</conventions>
				</enrichment>
			</business-model>
			<statement-model>
				<queries>
					<query name="winery_profile" id="winery_profile" package-name="profile">
						<query-body>
							<value>
select w.id domain_id, w.name domain, pp.name formula, pp.price price, pp.period period, r.name region 
from user u, user_winery_profile uwp, winery w, pay_plan pp, region r
where uwp.user_id = u.id and
uwp.winery_id = w.id and
uwp.pay_plan_id = pp.id and
w.region_id = r.id and
u.email = ?
							</value>
						</query-body>
						<query-params>
                        	<query-param name="email" is-mandatory="true" type="string" sample="'mail'"></query-param>
                        </query-params>
					</query>
					<query name="productList" id="product_list" package-name="product">
						<query-body>
							<value>
select p.name product, p.detail detail, pi.price price, pi.year year, w.name winery, r.name region 
from product p, winery w, region r, product_item pi
where p.winery_id = w.id and w.region_id = r.id and pi.product_id = p.id
 order by region desc, winery desc, product desc
							</value>
						</query-body>
					</query>
					<query name="call_new_domain" id="call_new_domain" package-name="domain">
                         <query-body>
                         <value>
<![CDATA[call new_domain (?,?,?,?,?,?,?,?,?,?,?,?,?,?)]]>

                            </value>
                         </query-body>
                         <query-params>
                         	<query-param name="name" is-mandatory="true" type="string" sample="'a'"></query-param>
                         	<query-param name="description" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="geo" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="latitude" is-mandatory="true" type="long" sample="1" ></query-param>
                         	<query-param name="longitude" is-mandatory="true" type="long" sample="1" ></query-param>
                         	<query-param name="email" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="region_id" is-mandatory="true" type="int" sample="-1" ></query-param>
                         	<query-param name="contact_name" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_street1" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_street2" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_post_code" is-mandatory="true" type="int" sample="1200" ></query-param>
                         	<query-param name="contact_city" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_phone" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="id" is-mandatory="true" type="int" sample="10"  is-id="true" is-output-param="true"></query-param>
                         </query-params>
                          
                     </query>
					<query name="call_make_domain" id="call_make_domain" package-name="domain">
                         <query-body>
                         <value>
<![CDATA[call make_domain (?,?,?,?,?,?,?,?,?,?,?,?,?)]]>
                            </value>
                         </query-body>
                         <query-params>
                         	<query-param name="name" is-mandatory="true" type="string" sample="'a'"></query-param>
                         	<query-param name="description" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="geo" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="latitude" is-mandatory="true" type="long" sample="1" ></query-param>
                         	<query-param name="longitude" is-mandatory="true" type="long" sample="1" ></query-param>
                         	<query-param name="email" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="region_id" is-mandatory="true" type="int" sample="1" ></query-param>
                         	<query-param name="contact_name" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_street1" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_street2" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_post_code" is-mandatory="true" type="int" sample="1200" ></query-param>
                         	<query-param name="contact_city" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         	<query-param name="contact_phone" is-mandatory="true" type="string" sample="'a'" ></query-param>
                         </query-params>
                          
                     </query>
                     
                     <query name="country_list" id="country_list" package-name="country">
                         <query-body>
                         <value>
<![CDATA[select id, name, description from country]]>
                            </value>
                         </query-body>
                         <query-params>
                         	<query-param name="name" is-mandatory="true" type="string" sample="'a'"></query-param>
                         </query-params>
                     </query>
                     
                     <query name="region_list" id="region_list" package-name="region">
                         <query-body>
                         <value>
<![CDATA[select id, name, description from region r where r.country_id = ?]]>
                            </value>
                         </query-body>
                         <query-params>
                         	<query-param name="country_id" is-mandatory="true" type="int" sample="-1"></query-param>
                         </query-params>
                     </query>
                  </queries>
              </statement-model>
		</model>

		<targets catalog-entry="REST-Custom, Openxava"
			append-catalog-entry-dir-to-outputdir-root="true"  
			outputdir-root="../../product/winy" />



	</configuration>
</generator-config>